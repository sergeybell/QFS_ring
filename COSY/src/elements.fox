INCLUDE 'utilities';

PROCEDURE ROTATE PHI;
  VARIABLE M NM1 4; VARIABLE ANG NM2;
  VARIABLE i 1;
  ANG := PHI*DEGRAD;
  M(1):= COS(ANG)*MAP(1) + SIN(ANG)*MAP(3);
  M(3):=-SIN(ANG)*MAP(1) + COS(ANG)*MAP(3);
  M(2):= COS(ANG)*MAP(2) + SIN(ANG)*MAP(4);
  M(4):=-SIN(ANG)*MAP(2) + COS(ANG)*MAP(4);
  LOOP i 1 4; MAP(i):=M(i);  ENDLOOP;
  {RSA PHI;}
ENDPROCEDURE; {ROTATE}

FUNCTION BMULT KNL L; {COMPUTES MAGNETIC INDUCTION FOR A MADX MULTIPOLE ELEMENT}
  BMULT := KNL/L * CONS(CHIM);
ENDFUNCTION; {BMULT}

PROCEDURE THINMQ L {m} TILT {rad} K1 {m^-2};
                 {see QUAD for parameter explanations}
  VARIABLE OM NM1;
  WRITE 6 '***** THIN QUADRUPOLE DEFINITION';
  OM := SQRT(ABS(K1));
  UMS;
  {load thin quad orbital map into MSC}
  IF CONS(K1)>0;
    MSC(2) := -OM*SIN(OM*L)*DD(1) + 1*DD(2);
    MSC(4) := OM*SINH(OM*L)*DD(3) + 1*DD(4);
  ELSEIF CONS(K1)<0;
    MSC(2) := OM*SINH(OM*L)*DD(1) + 1*DD(2);
    MSC(4) := -OM*SIN(OM*L)*DD(3) + 1*DD(4);
  ELSEIF TRUE;
    DL L;
  ENDIF;
  {load thin quad spin map into SSCR}
  {*** NOT IMPLEMENTED yet, SSCR = Identity ***}
  {apply MSC and SSCR to MAP, SPNR respectively.}
  LOCSET 0 0 0 0 0 0; UPDATE 1 1;
ENDPROCEDURE;

PROCEDURE QUAD1 L {m} TILT G; {BNL-type quadrupole definition}
  VARIABLE L0 1;
  VARIABLE G0 1;
  VARIABLE TILT0 1;
  WRITE 6 'BNL TYPE QUAD IN NICA FS';

  L0:=L;{in meters}
  IF (G=0); WRITE 6 'G=0';
    DL L0;
  ELSEIF (1=1);
    G0:=G*10;{in Tesla/m}
    TILT0:=TILT;
    ROTATE TILT0;
    WRITE 6 'B = '&ST(G0*.05);
    MQ L0 G0*0.05 0.05; {Magnetic quadrupole}
    {WRITE 6 'MQ' L0 G0*0.05;}
    ROTATE -TILT0;
  ENDIF;
ENDPROCEDURE; { END OF QUADRUPOLE }

PROCEDURE QUAD L {m} TILT {rad} K1 {m^-2} ;
  {L quadrupole length}
  {K1 = B_Y/X / (B_0 R) [m^-2]}
      {COSY wants magnetic induction at the pole,}
      {which is B_y(a) = B*\rho*K_1*a, a = aperture}
      {checked with Optim; there K1 is Tl/m (not normalized by B\rho)}
      {hence B_y(a) = K1 * a in the automatic converter}
  VARIABLE Bpt NM1; {magnetic induction (flux density @ pole tip)}
  VARIABLE A 1; {aperture}
  VARIABLE TILT0 1;
  TILT0 := RAD2DEG(TILT);
  A:=.05;
  Bpt := K1*CONS(CHIM)*A; {in Tesla}
  { WRITE 6 'K1[m^-2]        B[Tl]          G[kG/cm]       ' }
  {          SF(CONS(K1), '(E15.7)')&SF(CONS(Bpt), '(E15.7)')&SF(CONS(Bpt)/A/10,'(E15.7)'); }
  IF Bpt=0; DL L;
  ELSEIF TRUE;
    ROTATE  TILT0;
      MQ L Bpt A;
   ROTATE -TILT0;
 ENDIF;
ENDPROCEDURE; {QUAD}

PROCEDURE SEXT L {m} TILT {rad} KNL {unit};
  VARIABLE Bpt 1; VARIABLE TILT0 1;
  VARIABLE L0 1;
  Bpt := BMULT(KNL, L);
  WRITE 6 'Bpt = '&SF(Bpt, '(E15.7)');
  TILT0 := RAD2DEG(TILT);
  IF Bpt=0; DL L;
  ELSEIF TRUE;
    ROTATE TILT0;
      MH L Bpt .05;
    ROTATE -TILT0;
  ENDIF;
ENDPROCEDURE; {SEXT}

PROCEDURE OCT L {m} TILT {rad} KNL {unit};
  VARIABLE Bpt 1; VARIABLE TILT0 1;
  Bpt := BMULT(KNL, L);
  WRITE 6 'Bpt = '&SF(Bpt, '(E15.7)');
  IF Bpt=0; DL L;
  ELSEIF TRUE;
    ROTATE TILT0;
      MO L Bpt .05;
    ROTATE -TILT0;
  ENDIF;
ENDPROCEDURE; {OCT}

PROCEDURE MULT TILT {rad} KNL {unit} N;
  VARIABLE Bpt 1 N; VARIABLE I 1;
  VARIABLE L0 1; VARIABLE FLAG 1; {used to check magnetic field components against 0}
  VARIABLE TILT0 1;
  L0 := 0;
  TILT0 := RAD2DEG(TILT);
  IF N=2; WRITE 6 'QUAD';
    {QUAD L0 TILT KNL(2)/L0;} DL L0;
  ELSEIF N=3; WRITE 6 'SEXT';
    {SEXT L0 TILT KNL(3);} DL L0;
  ELSEIF N=4; WRITE 6 'OCT';
    {OCT  L0 TILT KNL(4);} DL L0;
  ELSEIF TRUE;
    WRITE 6 '*** UNDEFINED ELEMENT ERROR ***';
  ENDIF;
ENDPROCEDURE;

PROCEDURE SBEND L {m} ANGLE {rad} TILT {rad} E1 {rad} H1 {1/m} E2 {rad} H2{1/m} FINT {unit} FINTX {unit};
  VARIABLE R 1; VARIABLE ANGLE0 1; VARIABLE TILT0 1;
  VARIABLE E10 1; VARIABLE E20 1;
  E10 := E1/DEGRAD;
  E20 := E2/DEGRAD;
  ANGLE0 := ABS(ANGLE)/DEGRAD;
  TILT0 := TILT/DEGRAD;
  R := L/ABS(ANGLE);
  IF ANGLE<0; CB; ENDIF;
  ROTATE TILT0;
    DI R ANGLE0 .1 E10 H1 E20 H2;
  ROTATE -TILT0;
  IF ANGLE<0; CB; ENDIF;
ENDPROCEDURE; {SBEND}

PROCEDURE RBEND L {m} ANGLE {rad} TILT {rad};
  VARIABLE R 1; VARIABLE ANGLE_DEG 1; VARIABLE TILT0 1;
  {variables needed for MCLK}
  VARIABLE NT 1;
  VARIABLE KN 1 1;
  VARIABLE S1 1 1;
  VARIABLE S2 1 1;
  VARIABLE B 1;

  { WRITE 6 '********** RBEND'; }
  NT := 1;
  B := CONS(P0)/(CLIGHT*1E-6) * ANGLE/L;
  KN(1) := 0; S1(1) := 0; S2(1) := 0;
  ANGLE_DEG := ABS(ANGLE)/DEGRAD;
  TILT0 := TILT/DEGRAD;
  R := L/ABS(ANGLE);
  { WRITE 6 'ANGLE[rad]      ANGLE[deg]      R[m]            B[Tl]' }
  {          SF(ANGLE,'(F15.7)')&SF(ANGLE_DEG, '(F15.7)')&SF(R, '(F15.7)')&' '&SF(B, '(F15.7)'); }
  IF ANGLE<0; CB; WRITE 6 'CB'; ENDIF;
  ROTATE TILT0;
    DP R ANGLE_DEG .05;
  ROTATE -TILT0;
  IF ANGLE<0; CB; ENDIF;
ENDPROCEDURE; {RBEND}

PROCEDURE SOL L {m} KS {m^-2}; {TO BE FINISHED !!!!!!!!!!!!!!!!!!!!!}
  VARIABLE C 1; VARIABLE S 1; VARIABLE GAMMA NM1;
  WRITE 6 '!!! ******** CUSTOM SOLENOID DEF';
  C := COS(KS*L);
  S := SIN(KS*L);
  GAMMA := 1 + E0/(M0*AMUMEV) ;
  UMS;
  IF KS#0;
    MSC(1) := 1*DD(1) + S/KS*DD(2)      + (1-C)/KS*DD(4);
    MSC(2) :=           C*DD(2)         + S*DD(4);
    MSC(3) :=         - (1-C)/KS*DD(2)  + S/KS*DD(4);
    MSC(4) :=         - S*DD(2)         + C*DD(4);
    MSC(5) := L/GAMMA/GAMMA;
  ELSEIF TRUE; DL L; ENDIF;
  LOCSET 0 0 0 0 0 0 ; UPDATE 1 1;
ENDPROCEDURE;

PROCEDURE SOLENOID_0 L {m} KS {rad/m}; {this is the ORIGINAL IMPLEMENTATION used in test2ST (contract 100-3596)}
                                         {which doesnt account for the saturation in the solenoid magnets}
  VARIABLE B0 1; VARIABLE A 1;
  VARIABLE MU 1 ; {MAGNETIC PERMEABILITY}
  VARIABLE N 1; {NUMBER OF SOLENOID TURNS}
  VARIABLE I 1; {SOLENOID CURRENT IN AMPERES}
  MU := 1.2566E-6; N := 100;
  A  := .05;
  B0 := KS * CONS(CHIM);
  I  := 2*B0/MU/N;
  IF (B0 = 0); DL L; WRITE 6 'SOLENOID IS OFF';
  ELSEIF TRUE;
    CMS B0 A L;
  ENDIF;
ENDPROCEDURE; {SOLENOID_0}

PROCEDURE SOLENOID L {m} KS {rad/m}; {this solenoid implementation accounts for the saturation effect (top B-field)}
  VARIABLE B0 1; VARIABLE A 1;
  VARIABLE BTOP 1; {maximum magnetic field in solenoid; cannot go any further}
  BTOP := 6; {the 2ST scheme requires 4 6-T solenoids, so I assume 6T is reacheable}
  A  := .05;
  B0 := KS * CONS(CHIM); WRITE 6 'SOLENOID MAGNETIC FIELD COMPUTED:'&SF(B0, '(F15.7)')&' Tl';
  IF (B0>BTOP); B0 := BTOP; WRITE 6 'SOLENOID REACHED SATURATION; SETTING Btop FIELD (6T)!'; ENDIF;
  IF (B0 = 0);
    DL L; WRITE 6 'SOLENOID IS OFF';
  ELSEIF TRUE;
    CMS B0 A L;
  ENDIF;
ENDPROCEDURE; {SOLENOID}

PROCEDURE RFCAV L {m} VOLT {MV} LAG {rad} HARMON {unit};
  IF VOLT=0;
    DL L;
  ELSEIF TRUE;
    WRITE 6 'UNIMPLEMENTED ERROR!';
  ENDIF;
ENDPROCEDURE;

PROCEDURE KICK L {m} KX {unit} KY {unit};
  IF ((KX=0) * (KY=0));
    DL L;
  ELSEIF TRUE;
    WRITE 6 'UNIMPLEMENTED ERROR!';
  ENDIF;
ENDPROCEDURE;

PROCEDURE WIEN L2 {m} B1 {kGs} B2 {kV/cm} TILT {rad}; {homogenous WF; closed orbit preserved}
{parasitic (tilt) fields are implemented via a spin kick like Eremey thesis section 6.5.3}
  VARIABLE R1 1;
  VARIABLE R2 1;
  VARIABLE B0 1; VARIABLE B3 1;
  VARIABLE L1 1;
  VARIABLE TILT0 1; VARIABLE TOF 1;
  VARIABLE BX 1; VARIABLE EY 1;
  VARIABLE BETA 1; VARIABLE DWMDM 1;
  L1:=L2; {in meters}
  B0:=ABS(B1)/10; {in Tesla}
  B3:=ABS(B2)*1e5;   {in V/m}
  R2:=CONS(CHIM)/B0;
  R1:=CONS(CHIE)/B3;
  { WRITE 6 'RE = '&SF(R1, '(E15.7)')&' RB ='&SF(R2, '(E15.7)'); }
  TILT0 := TILT;
  WF R1 R1 L1 0.05;             {use equal radii (R1 R1) for no bend effect in the Wien-filter}
  IF TILT0#0;
    BX := B0*TAN(TILT0);
    EY := CONS(CHIE)/CONS(CHIM)*BX;
    BETA := CONS(V0)/CLIGHT;
    DWMDM := Z0/M0*EZERO/AMU*(G0*BX - (G0 - 1/BETA/BETA + 1)*BETA*EY/CLIGHT);
    TOF := L1/CONS(V0);
    RSX TOF*DWMDM;
  ENDIF;
ENDPROCEDURE; { END OF WIEN }

PROCEDURE ED L {m} E {kV/cm} TILT {rad};
 VARIABLE I 1;
 VARIABLE TILT0 1;
 VARIABLE R_E 1;
 VARIABLE E1 1;
 VARIABLE ANGDEF 1;
 E1:=E*1e5;   {in V/m}
 R_E:=(CONS(CHIE)/E1);
 ANGDEF:=L/R_E;

 WRITE 6 'E1' E1;
 WRITE 6 'R_E' R_E;
 WRITE 6 'ANGDEF' ANGDEF;
 WRITE 6 '' ;

 TILT0 := TILT;
 ROTATE TILT0;
  ECL ABS(R_E) ANGDEF 0.1;
 ROTATE -TILT0;
ENDPROCEDURE; {END OF ED}

PROCEDURE ELD L {m} E {kV/cm} TILT {rad};
 VARIABLE NE 1 5;
 VARIABLE NM 1 5;
 VARIABLE TILT0 1;
 VARIABLE R_E 1;
 VARIABLE I 1;
 VARIABLE TILT0 1;
 VARIABLE R_E 1;
 VARIABLE E1 1;
 VARIABLE ANGDEF 1;

 E1:=E*1e5;   {in V/m}
 R_E:=(CONS(CHIE)/E1);
 ANGDEF:=L/R_E;

 {WRITE 6 'ELD';
 WRITE 6 'E1' E1;
 WRITE 6 'R_E' R_E;
 WRITE 6 'ANGDEF' ANGDEF;
 WRITE 6 '' ;}

 NE(1):=-1;NE(2):=1;NE(3):=-1;NE(4):=1;NE(5):=-1;
 NM(1):=0;NM(2):=0;NM(3):=0;NM(4):=0;NM(5):=0;
 LOOP I 1 5; NE(I):=NE(I)*(1/R_E)^I; ENDLOOP;
 TILT0 := TILT;
 ROTATE TILT0;
 WC -R_E 10000000000000000 L 0.1 NE NM 5;
 ROTATE -TILT0;
ENDPROCEDURE; {END OF ELD}

{PROCEDURE WIEN2P LDEF ANGDEF TILT;
 VARIABLE I 1;
 VARIABLE NE 1 5;
 VARIABLE NM 1 5;
 VARIABLE TILT0 1;
 VARIABLE RFULL 1;
 VARIABLE BFULL 1;
 VARIABLE RDEF 1;
 VARIABLE R_E 1;
 VARIABLE R_B 1;
 VARIABLE BDEF 1;
 VARIABLE EDEF 1;
 RFULL:=LDEF/ANGDEF;
 BFULL:=CONS(CHIM)/RFULL;
 BDEF:=BFULL/(  1+G0*GAMMA*GAMMA/(1-G0*(BETA^2)*GAMMA^2)  );
 EDEF:=G0*BDEF*CONS(V0)*(GAMMA^2)/(  1-G0*(BETA^2)*GAMMA^2  );
 R_E:=(CONS(CHIE)/EDEF);
 R_B:=(CONS(CHIM)/BDEF);
 RDEF:=1/( 1/R_B + 1/R_E  );
{
 WRITE 6 'R_B' R_B 'R_E' R_E 'RFULL' RFULL 'RDEF' RDEF;
 WRITE 6 '' ;
 WRITE 6 'BFULL T' BFULL 'BDEF T' BDEF 'EDEF V/m' EDEF;
}
 NE(1):=-1;NE(2):=1;NE(3):=-1;NE(4):=1;NE(5):=-1;
 NM(1):=0;NM(2):=0;NM(3):=0;NM(4):=0;NM(5):=0;
 LOOP I 1 5; NE(I):=NE(I)*(1/R_E+1/R_B)^I; ENDLOOP;
 TILT0 := TILT;
 ROTATE TILT0;
 WC -R_E R_B LDEF 0.1 NE NM 5;
 ROTATE -TILT0;
ENDPROCEDURE; {END OF WIEN2P}}

SAVE 'elements';
