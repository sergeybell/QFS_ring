      1 BEGIN ;
      2   VARIABLE AMU 1 ;
      3   VARIABLE AMUMEV 1 ;
      4   VARIABLE EZERO 1 ;
      5   VARIABLE CLIGHT 1 ;
      6   VARIABLE PI  1 ;
      7   VARIABLE DEGRAD 1 ;
      8   VARIABLE TRUE 1 ;
      9   VARIABLE FALSE 1 ;
     10   VARIABLE E0 100 ;
     11   VARIABLE M0 100 ;
     12   VARIABLE Z0 100 ;
     13   VARIABLE V0 100 ;
     14   VARIABLE P0 100 ;
     15   VARIABLE G0 100 ;
     16   VARIABLE CHIM 500 ;
     17   VARIABLE CHIE 500 ;
     18   VARIABLE ETA 500 ;
     19   VARIABLE HFAC 500 ;
     20   VARIABLE TFAC 1 ;
     21   VARIABLE MAP 4000 8 ;
     22   VARIABLE MSC 4000 8 ;
     23   VARIABLE SPNR 4000 3 3 ;
     24   VARIABLE SSCR 4000 3 3 ;
     25   VARIABLE LSPN 1 ;
     26   VARIABLE RAY 10001 8 ;
     27   VARIABLE RSC 10001 8 ;
     28   VARIABLE RCOL 10001 ;
     29   VARIABLE SPI 10001 3 ;
     30   VARIABLE SSC 10001 3 ;
     31   VARIABLE REMAIN 10001 ;
     32   VARIABLE REMOVE 10001 ;
     33   VARIABLE NRAY 1 ;
     34   VARIABLE NSPN 1 ;
     35   VARIABLE XCUT 1 2 ;
     36   VARIABLE LCUT 1 ;
     37   VARIABLE NCT 1 ;
     38   VARIABLE NCCT 1 ;
     39   VARIABLE XCT 1 2 10 ;
     40   VARIABLE LCT 1 10 ;
     41   VARIABLE MCT 4000 20 ;
     42   VARIABLE ESC 1 ;
     43   VARIABLE ENC 1 ;
     44   VARIABLE ERAY 1 4 ;
     45   VARIABLE ERSC 1 4 ;
     46   VARIABLE EMAX 1 2 ;
     47   VARIABLE AXP 1000 3 ;
     48   VARIABLE AXD 1000 6 ;
     49   VARIABLE SPOS 1000 ;
     50   VARIABLE XLOC 20 ;
     51   VARIABLE ZLOC 20 ;
     52   VARIABLE PLOC 20 ;
     53   VARIABLE SLOC 20 ;
     54   VARIABLE VLOC 20 ;
     55   VARIABLE TLOC 20 ;
     56   VARIABLE SYS 20000 ;
     57   VARIABLE CE 10 ;
     58   VARIABLE TRA 1000 251 ;
     59   VARIABLE NRAYTRA0 1 ;
     60   VARIABLE NRAYTRA 1 ;
     61   VARIABLE ETRA 1000 ;
     62   VARIABLE SYS0 200 ;
     63   VARIABLE TRTST 200 ;
     64   VARIABLE GPLOC 1 ;
     65   VARIABLE LSCR 1 ;
     66   VARIABLE LSCT 1 ;
     67   VARIABLE LTRA 20 3 ;
     68   VARIABLE GTRA 20 3 ;
     69   VARIABLE EFX 4000 ;
     70   VARIABLE EFY 4000 ;
     71   VARIABLE EFZ 4000 ;
     72   VARIABLE V 4000 ;
     73   VARIABLE BFX 4000 ;
     74   VARIABLE BFY 4000 ;
     75   VARIABLE BFZ 4000 ;
     76   VARIABLE W 4000 ;
     77   VARIABLE H 4000 ;
     78   VARIABLE CHIM1 1 ;
     79   VARIABLE CHIE1 1 ;
     80   VARIABLE TP1 1 ;
     81   VARIABLE PMM 20 40 ;
     82   VARIABLE PEM 20 40 ;
     83   VARIABLE LM 1 ;
     84   VARIABLE PPOL 20 36 ;
     85   VARIABLE MPOL 20 30 ;
     86   VARIABLE NPOL 1 ;
     87   VARIABLE LS 1 ;
     88   VARIABLE NSDP 1 ;
     89   VARIABLE LCCT 1 ;
     90   VARIABLE LOFF 1 ;
     91   VARIABLE ENGEC 2 20 2 2 6 ;
     92   VARIABLE LE 1 ;
     93   VARIABLE GFF2 40 2 6 10 ;
     94   VARIABLE LFF2 400 2 6 10 ;
     95   VARIABLE DATFF2 1 2 6 10 ;
     96   VARIABLE INP 1 ;
     97   VARIABLE NN 1 ;
     98   VARIABLE SN 10  100 ;
     99   VARIABLE HN 25 100 ;
    100   VARIABLE VN 25 100 ;
    101   VARIABLE WN 25 100 ;
    102   VARIABLE PN 1 40 ;
    103   VARIABLE NPG 1 ;
    104   VARIABLE DR 10 ;
    105   VARIABLE DMAX 1 ;
    106   VARIABLE MFP 1 8 ;
    107   VARIABLE MFD 6 700 30;
    108   VARIABLE BETHEBLOCHC 1 6 ;
    109   VARIABLE BXNOB 1 5 ;
    110   VARIABLE BXBDT 1 5 7 ;
    111   VARIABLE BXNOD 1 5 ;
    112   VARIABLE BXDDT 1 5 7 ;
    113   VARIABLE BXBOXID 1 70 ;
    114   VARIABLE BXIBOX 1 ;
    115   VARIABLE BX1BOXPN 1 70 4 ;
    116   VARIABLE BX1BOXP 1 70 4 2 3 ;
    117   VARIABLE A 1 13 ;
    118   VARIABLE B 1 13 12 ;
    119   VARIABLE C 1 13 ;
    120   VARIABLE D 1 13 ;
    121   VARIABLE HSQR 1 ;
    122   VARIABLE LRKCO 1 ;
    123   VARIABLE LRKO 1 ;
    124   VARIABLE RKO 2 ;
    125   VARIABLE EPS 1 ;
    126   VARIABLE WAF 1 ;
    127   VARIABLE DD 1 20 ;
    128   VARIABLE DX 1 20 ;
    129   VARIABLE XX 15 30 ;
    130   VARIABLE DEPS 1 ;
    131   VARIABLE NO  1 ;
    132   VARIABLE NV  1 ;
    133   VARIABLE ND 1 ;
    134   VARIABLE TWOND 1 ;
    135   VARIABLE NOC 1 ;
    136   VARIABLE NM1 1 ;
    137   VARIABLE NM2 1 ;
    138   VARIABLE NM3 1 ;
    139   VARIABLE NMP 1 ;
    140   VARIABLE NP 1 ;
    141   VARIABLE LOV 1 ;
    142   VARIABLE LRP 1 ;
    143   VARIABLE LUM 1 ;
    144   VARIABLE LFR 1 ;
    145   VARIABLE LPS 1 ;
    146   VARIABLE LPI 1 ;
    147   VARIABLE LPG 1 ;
    148   VARIABLE LCB 1 ;
    149   VARIABLE LFR2 1 ;
    150   VARIABLE LCR 1 ;
    151   VARIABLE LKC 1 ;
    152   VARIABLE LENV 1 ;
    153   VARIABLE LSYS 1 ;
    154   VARIABLE LCE 1 ;
    155   VARIABLE LAX 1 ;
    156   VARIABLE LWA 1 ;
    157   VARIABLE LCO 1 ;
    158   VARIABLE LTR 1 ;
    159   VARIABLE LTRR 1 ;
    160   VARIABLE LTRI 1 ;
    161   VARIABLE LTRPRAY 1 ;
    162   VARIABLE LTRPRAYU 1 ;
    163   VARIABLE LTRPSPI 1 ;
    164   VARIABLE LTRPSPIU 1 ;
    165   VARIABLE LWNDANF 1 ;
    166   VARIABLE LWNTS 1 ;
    167   VARIABLE LWNTR 1 ;
    168   VARIABLE DIRSETFLAG 1;
    169   VARIABLE PHSP 1 8 ;
    170   VARIABLE PARS 1 8 ;
    171   VARIABLE PHSR 1 3 ;
    172   PROCEDURE VESORT VEC;
    173     VARIABLE I 1;
    174     VARIABLE POS 1;
    175     VARIABLE CURVAL 1;
    176     VARIABLE TEST 1;
    177     LOOP I 2 LENGTH(VEC);
    178       CURVAL := VEC|I;
    179       POS := I;
    180       TEST:=(VEC|(POS-1))>CURVAL;
    181       WHILE TEST;
    182         VELSET VEC POS VEC|(POS-1);
    183         POS:=POS-1;
    184         IF POS>1;
    185           TEST:=(VEC|(POS-1))>CURVAL;
    186           ELSEIF LO(1);
    187           TEST:=LO(0);
    188           ENDIF;
    189         ENDWHILE;
    190       VELSET VEC POS CURVAL;
    191       ENDLOOP;
    192     ENDPROCEDURE;
    193   FUNCTION L2NORM ARR LEN;
    194     VARIABLE I 1;
    195     VARIABLE DUM NM1;
    196     LOOP I 1 LEN;
    197       DUM := DUM + SQR(ARR(I));
    198       ENDLOOP;
    199     L2NORM := SQRT(DUM);
    200     ENDFUNCTION;
    201   FUNCTION VEL2NORM VEC;
    202     VEL2NORM := SQRT(ABS(SQR(VEC)));
    203     ENDFUNCTION;
    204   FUNCTION MAX I J ;
    205     MAX := VMAX(I&J) ;
    206     ENDFUNCTION ;
    207   FUNCTION MIN I J ;
    208     MIN := VMIN(I&J) ;
    209     ENDFUNCTION ;
    210   FUNCTION MOD I1 I2 ;
    211     MOD := I1-INT(I1/I2)*I2 ;
    212     ENDFUNCTION ;
    213   FUNCTION SIG I ;
    214     SIG := 1 ;
    215     IF I#0 ;
    216       SIG := I/ABS(CONS(I)) ;
    217       ENDIF ;
    218     ENDFUNCTION ;
    219   FUNCTION VSIG VEC;
    220     VARIABLE RES NM1;
    221     VARIABLE N 1;
    222     VARIABLE I 1;
    223     RES := VEC;
    224     LOOP I 1 LENGTH(RES);
    225       VELSET RES I SIG(RES|I); %SIG:  213
    226       ENDLOOP;
    227     VSIG := RES;
    228     ENDFUNCTION;
    229   FUNCTION VEMEDIAN VEC;
    230     VARIABLE N 1;
    231     VARIABLE I0 1;
    232     N := LENGTH(VEC);
    233     I0 := NINT(N/2);
    234     VESORT VEC; %VESORT:  172
    235     IF MOD(N, 2)=1; %MOD:  210
    236       VEMEDIAN := VEC|I0;
    237       ELSEIF LO(1);
    238       VEMEDIAN := .5*(VEC|I0 + VEC|(I0+1));
    239       ENDIF;
    240     ENDFUNCTION;
    241   FUNCTION IM X ;
    242     IM := CM(0&1)*X ;
    243     ENDFUNCTION ;
    244   FUNCTION ATAN2 Y X ;
    245     VARIABLE XC 1 ;
    246     VARIABLE YC 1 ;
    247     XC := CONS(X) ;
    248     YC := CONS(Y) ;
    249     IF (XC=0)*(YC=0) ;
    250       ATAN2 := 0 ;
    251       ELSEIF ABS(YC)>ABS(XC) ;
    252       ATAN2 := ATAN(X/Y) ;
    253       IF YC>0 ;
    254         ATAN2 := PI*0.5-ATAN2 ;
    255         ELSEIF 1=1 ;
    256         ATAN2 := -PI*0.5-ATAN2 ;
    257         ENDIF ;
    258       ELSEIF 1=1 ;
    259       ATAN2 := ATAN(Y/X) ;
    260       IF XC<0 ;
    261         IF YC<0 ;
    262           ATAN2 := -PI+ATAN2 ;
    263           ELSEIF 1=1 ;
    264           ATAN2 := PI+ATAN2 ;
    265           ENDIF ;
    266         ENDIF ;
    267       ENDIF ;
    268     ENDFUNCTION ;
    269   FUNCTION VATAN2 Y X ;
    270     VARIABLE I 1 ;
    271     VATAN2 := Y ;
    272     LOOP I 1 LENGTH(Y) ;
    273       VELSET VATAN2 I ATAN2(Y|I,X|I) ; %ATAN2:  244
    274       ENDLOOP ;
    275     ENDFUNCTION ;
    276   FUNCTION SS A I1 I2 ;
    277     SS := A|(I1&I2) ;
    278     ENDFUNCTION ;
    279   FUNCTION R S I1 I2 ;
    280     STCRE (S|(I1&I2)) R ;
    281     ENDFUNCTION ;
    282   FUNCTION S  R ;
    283     RECST R '(G23.16)' S ;
    284     ENDFUNCTION ;
    285   FUNCTION SF R FORM ;
    286     RECST R FORM SF ;
    287     ENDFUNCTION ;
    288   FUNCTION SI I ;
    289     VARIABLE J 1 ;
    290     VARIABLE K 1 ;
    291     K := ABS(I) ;
    292     SI := SF(K-10*INT(K/10),'(I1)') ; %SF:  285
    293     LOOP J 1 LOG(K+.1)/LOG(10) ;
    294       K := INT(K/10) ;
    295       SI := SF(K-10*INT(K/10),'(I1)')&SI ; %SF:  285
    296       ENDLOOP ;
    297     IF I<0 ;
    298       SI := '-'&SI ;
    299       ENDIF ;
    300     ENDFUNCTION ;
    301   FUNCTION COEF X I ;
    302     DAPEE X I COEF ;
    303     ENDFUNCTION ;
    304   FUNCTION WABS X W ;
    305     DANOW X+0*DD(1) W WABS ;
    306     ENDFUNCTION ;
    307   FUNCTION DER I V ;
    308     DER := V%I ;
    309     ENDFUNCTION ;
    310   FUNCTION INTEG I V ;
    311     INTEG := V%(-I) ;
    312     ENDFUNCTION ;
    313   PROCEDURE CONTINUE ;
    314     PI := PI ;
    315     ENDPROCEDURE ;
    316   PROCEDURE SVSCR ;
    317     LSCR := -1 ;
    318     SCRLEN LSCR ;
    319     ENDPROCEDURE ;
    320   FUNCTION ILAST A IA1 IA2 ;
    321     VARIABLE I 1 ;
    322     VARIABLE CH 1 ;
    323     CH := ' ' ;
    324     I := IA2+1 ;
    325     WHILE (CH=' ')*(I>IA1) ;
    326       I := I-1 ;
    327       CH := SS(A,I,I) ; %SS:  276
    328       ENDWHILE ;
    329     ILAST := I ;
    330     ENDFUNCTION ;
    331   FUNCTION IPOS C A ;
    332     VARIABLE LEN 1 ;
    333     VARIABLE I 1 ;
    334     LEN := LENGTH(A) ;
    335     IPOS := 0 ;
    336     I := 0 ;
    337     WHILE I<LEN ;
    338       I := I+1 ;
    339       IF C=(A|I) ;
    340         IPOS := I ;
    341         I := LEN ;
    342         ENDIF ;
    343       ENDWHILE ;
    344     ENDFUNCTION ;
    345   PROCEDURE TRCAP A ;
    346     VARIABLE AC 26 ;
    347     VARIABLE AS 26 ;
    348     VARIABLE LS 1 ;
    349     VARIABLE IA 1 ;
    350     VARIABLE I 1 ;
    351     AC := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ;
    352     AS := 'abcdefghijklmnopqrstuvwxyz' ;
    353     LS := ILAST(A,1,LENGTH(A)) ; %ILAST:  320
    354     IF LS>1 ;
    355       LOOP I 2 LS-1 ;
    356         IA := IPOS((A|I),AS) ; %IPOS:  331
    357         IF IA>0 ;
    358           A := (A|(1&(I-1)))&(AC|IA)&(A|((I+1)&LS)) ;
    359           ENDIF ;
    360         ENDLOOP ;
    361       I := 1 ;
    362       IA := IPOS((A|I),AS) ; %IPOS:  331
    363       IF IA>0 ;
    364         A := (AC|IA)&(A|((I+1)&LS)) ;
    365         ENDIF ;
    366       I := LS ;
    367       IA := IPOS((A|I),AS) ; %IPOS:  331
    368       IF IA>0 ;
    369         A := (A|(1&(I-1)))&(AC|IA) ;
    370         ENDIF ;
    371       ELSEIF LS=1 ;
    372       IA := IPOS((A|1),AS) ; %IPOS:  331
    373       IF IA>0 ;
    374         A := (AC|IA) ;
    375         ENDIF ;
    376       ENDIF ;
    377     ENDPROCEDURE ;
    378   PROCEDURE WORDS A N WORD SEP ;
    379     VARIABLE I 1 ;
    380     VARIABLE J 1 ;
    381     VARIABLE L 1 ;
    382     L := ILAST(A,1,LENGTH(A)) ; %ILAST:  320
    383     N := 0 ;
    384     J := 0 ;
    385     I := 0 ;
    386     WHILE I<L ;
    387       I := I+1 ;
    388       IF     (J=0)*((A|I)#SEP) ;
    389         J := 1 ;
    390         N := N+1 ;
    391         WORD(N) := I ;
    392         ELSEIF (J=1)*((A|I)=SEP) ;
    393         J := 0 ;
    394         WORD(N) := WORD(N)&(I-1) ;
    395         ENDIF ;
    396       ENDWHILE ;
    397     IF J=0 ;
    398       N := N+1 ;
    399       WORD(N) := I ;
    400       ENDIF ;
    401     WORD(N) := WORD(N)&I ;
    402     ENDPROCEDURE ;
    403   PROCEDURE FIELDS A N FIELD SEP ;
    404     VARIABLE I 1 ;
    405     VARIABLE J 1 ;
    406     VARIABLE L 1 ;
    407     L := LENGTH(A) ;
    408     N := 0 ;
    409     J := 1 ;
    410     I := 0 ;
    411     WHILE I<L ;
    412       I := I+1 ;
    413       IF ((A|I)=SEP) ;
    414         N := N + 1;
    415         IF I>J ;
    416           FIELD(N) := J&(I-1) ;
    417           ELSEIF LO(1) ;
    418           FIELD(N) := 0&0 ;
    419           ENDIF ;
    420         J := I+1 ;
    421         ENDIF ;
    422       ENDWHILE ;
    423     N := N + 1;
    424     IF I>J ;
    425       FIELD(N) := J&I ;
    426       ELSEIF LO(1) ;
    427       FIELD(N) := 0&0 ;
    428       ENDIF ;
    429     ENDPROCEDURE ;
    430   PROCEDURE MI M N L IER NO NV NM1 ;
    431     VARIABLE C 2 L ;
    432     VARIABLE AL 1 L L ;
    433     VARIABLE AI 1 L L ;
    434     VARIABLE CL 1 L ;
    435     VARIABLE AN NM1 L ;
    436     VARIABLE SM NM1 L ;
    437     VARIABLE DDA 1 L ;
    438     VARIABLE SCR NM1 ;
    439     VARIABLE I 1 ;
    440     VARIABLE J 1 ;
    441     VARIABLE K 1 ;
    442     IF L>NV ;
    443       WRITE 6 ' *** ERROR in MI, dim too large' ;
    444       QUIT 0 ;
    445       ENDIF ;
    446     LOOP I 1 L ;
    447       DDA(I) := DA(I) ;
    448       DANOT 1 ;
    449       SCR := M(I) ;
    450       DANOT NO ;
    451       C(I) := CONS(SCR) ;
    452       AN(I) := M(I)-SCR ;
    453       DACLIW SCR L CL ;
    454       LOOP J 1 L ;
    455         AL(I,J) := CL(J) ;
    456         ENDLOOP ;
    457       N(I) := 0 ;
    458       ENDLOOP ;
    459     LINV AL AI L L IER ;
    460     IF IER#0 ;
    461       IER := 1 ;
    462       ENDIF ;
    463     IF NO>1 ;
    464       POLVAL 101 AN L N L N L ;
    465       ENDIF ;
    466     LOOP I 1 L ;
    467       N(I) := 0 ;
    468       LOOP J 1 L ;
    469         N(I) := N(I) + AI(I,J)*DDA(J) ;
    470         ENDLOOP ;
    471       ENDLOOP ;
    472     LOOP I 2 NO ;
    473       DANOT I ;
    474       POLVAL 0 AN L N L N L ;
    475       LOOP J 1 L ;
    476         SM(J) := 0 ;
    477         LOOP K 1 L ;
    478           SM(J) := SM(J) + AI(J,K)*(DDA(K)-N(K)) ;
    479           ENDLOOP ;
    480         ENDLOOP ;
    481       LOOP J 1 L ;
    482         N(J) := SM(J) ;
    483         ENDLOOP ;
    484       ENDLOOP ;
    485     LOOP I 1 L ;
    486       SM(I) := DDA(I) - C(I) ;
    487       ENDLOOP ;
    488     POLVAL 1 N L SM L N L ;
    489     ENDPROCEDURE ;
    490   PROCEDURE FOURIERTRANS D L FTO FTA FTP ;
    491     VARIABLE I 1 ;
    492     VARIABLE J 1 ;
    493     VARIABLE DEL 1 ;
    494     VARIABLE RS LENGTH(D(1)) ;
    495     VARIABLE RC LENGTH(D(1)) ;
    496     RS := 0 ;
    497     LOOP J 1 L ;
    498       RS := RS + D(J) ;
    499       ENDLOOP ;
    500     FTA(1) := RS/L ;
    501     FTP(1) := 0*RS+PI/2 ;
    502     LOOP I 1 FTO ;
    503       DEL := I*2*PI/L ;
    504       RS := (D(1)-D(L))*COS(-0.5*DEL) ;
    505       RC := (D(L)-D(1))*SIN(-0.5*DEL) ;
    506       LOOP J 1 L-1 ;
    507         RS := RS + (D(J+1)-D(J))*COS((J-0.5)*DEL) ;
    508         RC := RC + (D(J)-D(J+1))*SIN((J-0.5)*DEL) ;
    509         ENDLOOP ;
    510       RS := RS/(PI*I) ;
    511       RC := RC/(PI*I) ;
    512       FTA(I+1) := SQRT(SQR(RS)+SQR(RC)) ;
    513       FTP(I+1) := VATAN2(RC,RS) ; %VATAN2:  269
    514       ENDLOOP ;
    515     ENDPROCEDURE ;
    516   FUNCTION ME M I ;
    517     DAPEE MAP(M) I ME ;
    518     ENDFUNCTION ;
    519   FUNCTION MEP M I ;
    520     DAPEP MAP(M) I TWOND MEP ;
    521     ENDFUNCTION ;
    522   FUNCTION MA M II ;
    523     VARIABLE I 1 ;
    524     VARIABLE K 1 ;
    525     I := II ;
    526     DAPEE MAP(M) I MA ;
    527     WHILE I#0 ;
    528       I := I/10 ;
    529       K := I ;
    530       I := INT(I+.01) ;
    531       K := NINT(10*(K-I)) ;
    532       IF K>TWOND ;
    533         MA := MA*PARS(K-TWOND) ;
    534         ELSEIF TRUE ;
    535         MA := MA*PHSP(K) ;
    536         ENDIF ;
    537       ENDWHILE ;
    538     ENDFUNCTION ;
    539   FUNCTION PB X Y ;
    540     VARIABLE I 1 ;
    541     PB := 0 ;
    542     LOOP I 1 TWOND 2 ;
    543       PB := PB + DER(I,X)*DER(I+1,Y) - DER(I+1,X)*DER(I,Y) ; %DER:  30
                  7 %DER:  307 %DER:  307 %DER:  307
    544       ENDLOOP ;
    545     ENDFUNCTION ;
    546   FUNCTION LEXP A B ;
    547     VARIABLE I 1 ;
    548     VARIABLE XP NM1 TWOND ;
    549     LOOP I 1 TWOND 2 ;
    550       XP(I) := -DER(I+1,A) ; %DER:  307
    551       XP(I+1) := DER(I,A) ; %DER:  307
    552       ENDLOOP ;
    553     DAFLO XP B LEXP TWOND ;
    554     ENDFUNCTION ;
    555   PROCEDURE CPOLVAL LTR POL NPOL ARG NARG RES NRES ;
    556     VARIABLE RIPOL NM1 2*NPOL ;
    557     VARIABLE RIRES 2*NM1 2*NRES ;
    558     VARIABLE J 1 ;
    559     VARIABLE I 2 ;
    560     IMUNIT I ;
    561     LOOP J 1 NPOL ;
    562       RIPOL(2*J-1) := REAL(POL(J)) ;
    563       RIPOL(2*J  ) := IMAG(POL(J)) ;
    564       ENDLOOP ;
    565     POLVAL LTR RIPOL 2*NPOL ARG NARG RIRES 2*NRES ;
    566     LOOP J 1 NPOL ;
    567       RES(J) := RIRES(2*J-1) + I*RIRES(2*J  ) ;
    568       ENDLOOP ;
    569     ENDPROCEDURE ;
    570   FUNCTION POLY X Y P IS ;
    571     VARIABLE I 1 ;
    572     VARIABLE J 1 ;
    573     VARIABLE X1 NM1 ;
    574     VARIABLE Y1 NM1 ;
    575     POLY := 0 ;
    576     X1 := 1 ;
    577     LOOP I 1 IS+1 ;
    578       Y1 := 1 ;
    579       LOOP J 1 IS+1 ;
    580         POLY := POLY + P(I,J)*X1*Y1 ;
    581         Y1 := Y*Y1 ;
    582         ENDLOOP ;
    583       X1 := X*X1 ;
    584       ENDLOOP ;
    585     ENDFUNCTION ;
    586   PROCEDURE POTI F NF P ;
    587     VARIABLE I 1 ;
    588     VARIABLE K 1 ;
    589     VARIABLE FF NM1 ;
    590     VARIABLE SCR NM1 ;
    591     P := 0 ;
    592     LOOP I 1 NF ;
    593       FF := F(I) ;
    594       LOOP K I+1 NF ;
    595         DAPLU FF K 0 SCR ;
    596         FF := SCR ;
    597         ENDLOOP ;
    598       P := P + INTEG(I,FF) ; %INTEG:  310
    599       ENDLOOP ;
    600     DANOT NOC-1 ;
    601     SCR := 0 ;
    602     LOOP I 1 NF ;
    603       SCR := SCR + WABS(DER(I,P)-F(I),WAF) ; %WABS:  304 %DER:  307
    604       ENDLOOP ;
    605     IF SCR>1E-5 ;
    606       WRITE 6 ' --- WARNING in POTI, error norm = '&S(SCR) ; %S:  282
    607       ENDIF;
    608     DANOT NOC ;
    609     ENDPROCEDURE ;
    610   FUNCTION FACT N ;
    611     VARIABLE I 1 ;
    612     FACT := 1 ;
    613     LOOP I 1 N ;
    614       FACT := FACT*I ;
    615       ENDLOOP ;
    616     ENDFUNCTION ;
    617   FUNCTION NMON NO NV ;
    618     VARIABLE I 1 ;
    619     NMON := 1 ;
    620     LOOP I 1 NO ;
    621       NMON := NMON*(NV+I)/I ;
    622       ENDLOOP ;
    623     ENDFUNCTION ;
    624   FUNCTION GAUSS1 X NX DX SIGMA IP MFD ERR ;
    625     VARIABLE NG  1 ;
    626     VARIABLE IXN 1 ;
    627     VARIABLE IX  1 ;
    628     VARIABLE IXM 1 ;
    629     NG := NINT(8*SIGMA) ;
    630     GAUSS1 := 0 ;
    631     IXN := NINT(1+CONS(X)/DX) ;
    632     IF ((IXN-NG<1)+(IXN+NG>NX)) ;
    633       ERR := 1 ;
    634       LOOP IX IXN-NG IXN+NG ;
    635         IXM := IX ;
    636         IF IX<1 ;
    637           IXM := 1 ;
    638           ELSEIF IX>NX ;
    639           IXM := NX ;
    640           ENDIF ;
    641         GAUSS1 := GAUSS1+MFD(IP,IXM)*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    642         ENDLOOP ;
    643       ELSEIF TRUE ;
    644       ERR := 0 ;
    645       LOOP IX IXN-NG IXN+NG ;
    646         GAUSS1 := GAUSS1+MFD(IP,IX)*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    647         ENDLOOP ;
    648       ENDIF ;
    649     GAUSS1 := GAUSS1/(SQRT(PI)*SIGMA) ;
    650     ENDFUNCTION ;
    651   FUNCTION GAUSS X Z NX NZ DX DZ SIGMA MFD ERR ;
    652     VARIABLE NG  1 ;
    653     VARIABLE IXN 1 ;
    654     VARIABLE IZN 1 ;
    655     VARIABLE SUMZ NM2 ;
    656     VARIABLE IX  1 ;
    657     VARIABLE IZ  1 ;
    658     VARIABLE IXM 1 ;
    659     VARIABLE IZM 1 ;
    660     NG := NINT(8*SIGMA) ;
    661     GAUSS := 0 ;
    662     IXN := NINT(1+CONS(X)/DX) ;
    663     IZN := NINT(1+CONS(Z)/DZ) ;
    664     IF ((IXN-NG<1)+(IXN+NG>NX)+(IZN-NG<1)+(IZN+NG>NZ)) ;
    665       ERR := 1 ;
    666       LOOP IX IXN-NG IXN+NG ;
    667         SUMZ := 0 ;
    668         IXM := IX ;
    669         IF IX<1 ;
    670           IXM := 1 ;
    671           ELSEIF IX>NX ;
    672           IXM := NX ;
    673           ENDIF ;
    674         LOOP IZ IZN-NG IZN+NG ;
    675           IZM := IZ ;
    676           IF IZ<1 ;
    677             IZM := 1 ;
    678             ELSEIF IZ>NZ ;
    679             IZM := NZ ;
    680             ENDIF ;
    681           SUMZ := SUMZ+MFD(IXM,IZM)*EXP(-SQR((IZ-1-Z/DZ)/SIGMA)) ;
    682           ENDLOOP ;
    683         GAUSS := GAUSS+SUMZ*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    684         ENDLOOP ;
    685       ELSEIF TRUE ;
    686       ERR := 0 ;
    687       LOOP IX IXN-NG IXN+NG ;
    688         SUMZ := 0 ;
    689         LOOP IZ IZN-NG IZN+NG ;
    690           SUMZ := SUMZ+MFD(IX,IZ)*EXP(-SQR((IZ-1-Z/DZ)/SIGMA)) ;
    691           ENDLOOP ;
    692         GAUSS := GAUSS+SUMZ*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    693         ENDLOOP ;
    694       ENDIF ;
    695     GAUSS := GAUSS/(PI*SIGMA*SIGMA) ;
    696     ENDFUNCTION ;
    697   PROCEDURE WSET W ;
    698     WAF := W ;
    699     ENDPROCEDURE ;
    700   PROCEDURE ESET E ;
    701     EPS := E ;
    702     ENDPROCEDURE ;
    703   PROCEDURE DSET E ;
    704     DAEPS E ;
    705     DEPS := E ;
    706     ENDPROCEDURE ;
    707   PROCEDURE CG PIC X Y N ;
    708     VARIABLE I 1 ;
    709     GRMOVE X(1) Y(1) 0 PIC ;
    710     LOOP I 2 N ;
    711       GRDRAW X(I) Y(I) 0 PIC ;
    712       ENDLOOP ;
    713     ENDPROCEDURE ;
    714   FUNCTION ENGE IMP IEE IEM S ;
    715     IF CONS(S)<-3 ;
    716       ENGE := 1+0*S ;
    717       ELSEIF CONS(S)>5 ;
    718       ENGE := 0*S ;
    719       ELSEIF LO(1) ;
    720       ENGE :=      ENGEC(IMP,IEE,IEM,1) + S*( ENGEC(IMP,IEE,IEM,2)    
                              + S*( ENGEC(IMP,IEE,IEM,3) + S*( ENGEC(IMP,IEE,I
                  EM,4)                + S*( ENGEC(IMP,IEE,IEM,5) + S*  ENGEC(
                  IMP,IEE,IEM,6) )))) ;
    721       IF     CONS(ENGE)<-60 ;
    722         ENGE := -60 ;
    723         ELSEIF CONS(ENGE)>30  ;
    724         ENGE :=  30 ;
    725         ENDIF ;
    726       ENGE := 1/(1+EXP(ENGE)) ;
    727       ENDIF ;
    728     ENDFUNCTION ;
    729   PROCEDURE FC IMP IEE IEM C1 C2 C3 C4 C5 C6 ;
    730     VARIABLE S 1 ;
    731     VARIABLE IFER 1 ;
    732     VARIABLE F0 1 ;
    733     VARIABLE F 1 ;
    734     ENGEC(IMP,IEE,IEM,1) := C1 ;
    735     ENGEC(IMP,IEE,IEM,2) := C2 ;
    736     ENGEC(IMP,IEE,IEM,3) := C3 ;
    737     ENGEC(IMP,IEE,IEM,4) := C4 ;
    738     ENGEC(IMP,IEE,IEM,5) := C5 ;
    739     ENGEC(IMP,IEE,IEM,6) := C6 ;
    740     IFER := 0 ;
    741     F0 := ENGE(IMP,IEE,IEM,5) ; %ENGE:  714
    742     LOOP S 4 -3 -1 ;
    743       F:= ENGE(IMP,IEE,IEM,S) ; %ENGE:  714
    744       IF F<F0 ;
    745         IFER := 1 ;
    746         ENDIF ;
    747       F0 := F ;
    748       ENDLOOP ;
    749     IF IFER=1 ;
    750       WRITE 6 ' *** ERROR in FC, not monotonic.' ;
    751       ENDIF ;
    752     IF ABS(ENGE(IMP,IEE,IEM,5))>0.001 ; %ENGE:  714
    753       IFER := 1 ;
    754       WRITE 6 ' *** ERROR in FC, not 0 outside.' ;
    755       ENDIF ;
    756     IF ABS(ENGE(IMP,IEE,IEM,-3)-1)>0.001 ; %ENGE:  714
    757       IFER := 1 ;
    758       WRITE 6 ' *** ERROR in FC, not 1 inside.' ;
    759       ENDIF ;
    760     IF IFER=1 ;
    761       WRITE 6 '   S=z/D   Enge function: outside(S=5) to inside(S=-3)'
                   ;
    762       LOOP S 5 -3 -1 ;
    763         F:= ENGE(IMP,IEE,IEM,S) ; %ENGE:  714
    764         WRITE 6 SF(S,'(F6.0)')&SF(F,'(G16.4)') ; %SF:  285 %SF:  285
    765         ENDLOOP ;
    766       ENDIF ;
    767     ENDPROCEDURE ;
    768   PROCEDURE FP IMP IEE IEM TL ID IU ;
    769     VARIABLE PIC 1000 ;
    770     VARIABLE X1 1 ;
    771     VARIABLE X2 1 ;
    772     VARIABLE XD 1 ;
    773     VARIABLE X10 1 ;
    774     VARIABLE X20 1 ;
    775     VARIABLE XP 10 ;
    776     VARIABLE I 1 ;
    777     VARIABLE Y1 1 ;
    778     VARIABLE Y2 1 ;
    779     VARIABLE YD 1 ;
    780     VARIABLE YP 30 ;
    781     VARIABLE X 1 201 ;
    782     VARIABLE Y 1 201 ;
    783     VARIABLE NI 1 ;
    784     VARIABLE JD 1 NV ;
    785     VARIABLE T 100 ;
    786     VARIABLE TMP 10 ;
    787     T := 'Enge Function' ;
    788     IF ID>0 ;
    789       IF LOV=0 ;
    790         WRITE 6 ' *** ERROR, call OV before FP.' ;
    791         QUIT 0 ;
    792         ELSEIF ID>NO ;
    793         WRITE 6 ' *** ERROR in FP, order > NO.' ;
    794         QUIT 0 ;
    795         ENDIF ;
    796       LOOP I 1 NV ;
    797         JD(I) := 0 ;
    798         ENDLOOP ;
    799       JD(1) := ID ;
    800       T := T&' Derivative '&SI(ID) ; %SI:  288
    801       ENDIF ;
    802     IF      IMP=1 ;
    803       TMP := 'Di' ;
    804       ELSEIF IMP=2 ;
    805       TMP := 'Quadru' ;
    806       ELSEIF IMP=3 ;
    807       TMP := 'Sextu' ;
    808       ELSEIF IMP=4 ;
    809       TMP := 'Octu' ;
    810       ELSEIF IMP=5 ;
    811       TMP := 'Deca' ;
    812       ELSEIF IMP=6 ;
    813       TMP := 'Duodeca' ;
    814       ELSEIF (IMP>6)*(IMP<16) ;
    815       TMP := SI(2*IMP)&'-' ; %SI:  288
    816       ELSEIF 1=1 ;
    817       WRITE 6         ' *** ERROR in FP, not supported. IMP='&SI(IMP) 
                  ; %SI:  288
    818       QUIT 0 ;
    819       ENDIF ;
    820     T := T&', ' ;
    821     IF IEM=2 ;
    822       T := T&'E-' ;
    823       ENDIF ;
    824     T := T&TMP&'pole, ' ;
    825     IF IEE=1 ;
    826       T := T&'Entrance' ;
    827       ELSEIF IEE=2 ;
    828       T := T&'Exit' ;
    829       ENDIF ;
    830     IF TYPE(TL)=TYPE(' ') ;
    831       IF TL#' ' ;
    832         T := T&': '&TL ;
    833         ENDIF ;
    834       ENDIF ;
    835     NI := 200 ;
    836     X1 := -3.5 ;
    837     X2 := 5.5 ;
    838     XD := X2-X1 ;
    839     X10 := -3 ;
    840     X20 := 5 ;
    841     IF ID>0 ;
    842       Y1 := 1.D30 ;
    843       Y2 := -1.D30 ;
    844       XP := X1+DA(1) ;
    845       LOOP I 1 NI+1 ;
    846         X(I) := CONS(XP) ;
    847         YP := ENGE(IMP,IEE,IEM,XP) ; %ENGE:  714
    848         DAPEA YP JD NV TMP ;
    849         Y(I) := TMP ;
    850         Y1 := MIN(Y1,TMP) ; %MIN:  207
    851         Y2 := MAX(Y2,TMP) ; %MAX:  204
    852         XP := XP+XD/NI ;
    853         ENDLOOP ;
    854       ELSEIF 1=1 ;
    855       Y1 := 0 ;
    856       Y2 := 1 ;
    857       XP := X1 ;
    858       LOOP I 1 NI+1 ;
    859         X(I) := XP ;
    860         Y(I) := ENGE(IMP,IEE,IEM,XP) ; %ENGE:  714
    861         XP := XP+XD/NI ;
    862         ENDLOOP ;
    863       ENDIF ;
    864     YD := Y2-Y1 ;
    865     CLEAR PIC ;
    866     GRCOLR 5 PIC ;
    867     GRMOVE X1 0 0 PIC ;
    868     GRDRAW X2 0 0 PIC ;
    869     GRMOVE   0 Y1-0.1*YD 0 PIC ;
    870     GRDRAW   0 Y2+0.1*YD 0 PIC ;
    871     GRMOVE X10 Y1-0.1*YD 0 PIC ;
    872     GRDRAW X10 Y2+0.1*YD 0 PIC ;
    873     GRMOVE X20 Y1-0.1*YD 0 PIC ;
    874     GRDRAW X20 Y2+0.1*YD 0 PIC ;
    875     IF ID<1 ;
    876       GRMOVE X1 Y2 0 PIC ;
    877       GRDRAW X2 Y2 0 PIC ;
    878       ENDIF ;
    879     GRCOLR 1 PIC ;
    880     GRMOVE X1 Y1-0.1*YD 0 PIC ;
    881     GRDRAW X2 Y1-0.1*YD 0 PIC ;
    882     GRDRAW X2 Y2+0.1*YD 0 PIC ;
    883     GRDRAW X1 Y2+0.1*YD 0 PIC ;
    884     GRDRAW X1 Y1-0.1*YD 0 PIC ;
    885     CG PIC X Y NI+1 ; %CG:  707
    886     GRCOLR 2 PIC ;
    887     IF ID>0 ;
    888       TMP := '(G10.3)' ;
    889       ELSEIF ID<1 ;
    890       TMP := '(I2)' ;
    891       ENDIF ;
    892     GRMOVE   X2+0.005*XD Y2-0.01*YD 0 PIC ;
    893     GRCHAR SF(Y2,TMP) PIC ; %SF:  285
    894     GRMOVE   X2+0.005*XD Y1-0.01*YD 0 PIC ;
    895     GRCHAR SF(Y1,TMP) PIC ; %SF:  285
    896     GRMOVE   X2+0.005*XD   -0.01*YD 0 PIC ;
    897     GRCHAR ' 0'       PIC ;
    898     GRMOVE   X2-0.025*XD Y1-0.15*YD 0 PIC ;
    899     GRCHAR SF(X2,'(F3.1)') PIC ; %SF:  285
    900     GRMOVE   X1-0.035*XD Y1-0.15*YD 0 PIC ;
    901     GRCHAR SF(X1,'(F4.1)') PIC ; %SF:  285
    902     GRMOVE  X20-0.007*XD Y1-0.15*YD 0 PIC ;
    903     GRCHAR SI(X20)    PIC ; %SI:  288
    904     GRMOVE  X10-0.015*XD Y1-0.15*YD 0 PIC ;
    905     GRCHAR SI(X10)    PIC ; %SI:  288
    906     GRMOVE     -0.007*XD Y1-0.15*YD 0 PIC ;
    907     GRCHAR '0'        PIC ;
    908     GRMOVE X20/2-0.05*XD Y1-0.15*YD 0 PIC ;
    909     GRCHAR 'outside'  PIC ;
    910     GRMOVE X10/2-0.04*XD Y1-0.15*YD 0 PIC ;
    911     GRCHAR 'inside'   PIC ;
    912     GRMOVE X2+0.07*XD    Y1-0.15*YD 0 PIC ;
    913     GRCHAR 'x 2d'     PIC ;
    914     GRMOVE X2+0.15*XD 0 0 PIC ;
    915     GRMOVE X1 Y2+0.15*YD 0 PIC ;
    916     GRCHAR T PIC ;
    917     WRITE IU PIC ;
    918     ENDPROCEDURE ;
    919   PROCEDURE FD ;
    920     VARIABLE I 1 ;
    921     VARIABLE J 1 ;
    922     VARIABLE K 1 ;
    923     LOOP J 1 2 ;
    924       LOOP K 1 2 ;
    925         FC 1 J K 0.478959 1.911289 -1.185953 1.630554 -1.082657 0.3181
                  11 ; %FC:  729
    926         FC 2 J K 0.296471 4.533219 -2.270982 1.068627 -0.036391 0.0222
                  61 ; %FC:  729
    927         LOOP I 3 15 ;
    928           FC I J K 0.176659 7.153079 -3.113116 3.444311 -1.976740 0.54
                  0068 ; %FC:  729
    929           ENDLOOP ;
    930         ENDLOOP ;
    931       ENDLOOP ;
    932     LE := 1 ;
    933     ENDPROCEDURE ;
    934   PROCEDURE DEF ;
    935     AMU := 1.66053873D-27 ;
    936     EZERO := 1.602176462D-19 ;
    937     CLIGHT:= 2.99792458D8 ;
    938     AMUMEV := AMU*SQR(CLIGHT)/EZERO*1D-6 ;
    939     PI := 3.1415926535897932384626433832795028842 ;
    940     DEGRAD := PI / 180 ;
    941     ESET 1E-10 ; %ESET:  700
    942     WSET .1 ; %WSET:  697
    943     DSET 1E-16 ; %DSET:  703
    944     LTRUE TRUE ;
    945     LFALSE FALSE ;
    946     ENDPROCEDURE ;
    947   PROCEDURE CR ;
    948     VARIABLE I 1 ;
    949     LOOP I 1 8 ;
    950       RAY(I) := 0 ;
    951       RSC(I) := 0 ;
    952       ENDLOOP ;
    953     NRAY := 0 ;
    954     LOOP I 1 3 ;
    955       SPI(I) := 0 ;
    956       SSC(I) := 0 ;
    957       ENDLOOP ;
    958     NSPN := 0 ;
    959     LCR := 1 ;
    960     RCOL := 1 ;
    961     REMAIN := 1 ;
    962     REMOVE := 0 ;
    963     LENV := 0 ;
    964     ENDPROCEDURE ;
    965   PROCEDURE CO NNO ;
    966     NOC := NNO ;
    967     DANOT NOC ;
    968     ENDPROCEDURE ;
    969   PROCEDURE OV ORD NND NNP ;
    970     VARIABLE I 1 ;
    971     IF NND>3 ;
    972       WRITE 6 ' *** ERROR in OV, ND > 3 ' ;
    973       QUIT 0 ;
    974       ELSEIF NND<0 ;
    975       WRITE 6 ' *** ERROR in OV, ND < 0 ' ;
    976       QUIT 0 ;
    977       ELSEIF NNP<0 ;
    978       WRITE 6 ' *** ERROR in OV, NP < 0 ' ;
    979       QUIT 0 ;
    980       ENDIF ;
    981     NO := ORD ;
    982     ND := NND ;
    983     TWOND := 2*ND ;
    984     NP := NNP ;
    985     NV := TWOND + NP ;
    986     IF LWA<0 ;
    987       LWA := -LWA ;
    988       NV := NV+1 ;
    989       ENDIF ;
    990     IF NV>40 ;
    991       IF LWA=0 ;
    992         WRITE 6 '*** ERROR in OV, 2*ND+NP > 40 ' ;
    993         ELSEIF LWA#0 ;
    994         WRITE 6 '*** ERROR in OV, 2*ND+NP > 39 ' ;
    995         ENDIF ;
    996       QUIT 0 ;
    997       ENDIF ;
    998     DEF ; %DEF:  934
    999     IF ND=0 ;
   1000       DAINI NO NV 0 NM1 ;
   1001       ELSEIF TRUE ;
   1002       DAINI NO+1 MAX(NV,3) 0 NM1 ; %MAX:  204
   1003       ENDIF ;
   1004     NM2 := NMON(NO,TWOND+NP) ; %NMON:  617
   1005     NM3 := NMON(NO+1,3) ; %NMON:  617
   1006     NMP := NMON(NO,NP) ; %NMON:  617
   1007     LOOP I NV+1 20 ;
   1008       DD(I) := 0 ;
   1009       ENDLOOP ;
   1010     SVSCR ; %SVSCR:  316
   1011     LSCR := MAX(50000,LSCR) ; %MAX:  204
   1012     LSCR := MAX(LSCR,2*NM1) ; %MAX:  204
   1013     SCRLEN LSCR ;
   1014     LSCT := 50000 ;
   1015     LOOP I 1 MAX(NV,3) ; %MAX:  204
   1016       DD(I) := DA(I) ;
   1017       ENDLOOP ;
   1018     DSET 1E-16 ; %DSET:  703
   1019     CO NO ; %CO:  965
   1020     LOV := 1 ;
   1021     LRP := 0 ;
   1022     LUM := 0 ;
   1023     LPI := 0 ;
   1024     LCB := 1 ;
   1025     LPG := 0 ;
   1026     LPS := 0 ;
   1027     LM := 0 ;
   1028     LFR := 0 ;
   1029     LFR2 := 0 ;
   1030     LENV := 0 ;
   1031     LSYS := 1 ;
   1032     LCR := 0 ;
   1033     LCE := 1 ;
   1034     LAX := 1 ;
   1035     LTRR := 0 ;
   1036     LTRI := 0 ;
   1037     LTRPRAY := 0 ;
   1038     LTRPSPI := 0 ;
   1039     CR ; %CR:  947
   1040     NRAYTRA0 := 251 ;
   1041     NRAYTRA := NRAY ;
   1042     FD ; %FD:  919
   1043     ENDPROCEDURE ;
   1044   FUNCTION PARA I ;
   1045     PARA := 1 ;
   1046     IF     LWA=1 ;
   1047       IF TWOND+I<NV ;
   1048         PARA := 1+DA(TWOND+I) ;
   1049         ENDIF ;
   1050       ELSEIF LWA#1 ;
   1051       IF TWOND+I<NV+1 ;
   1052         PARA := 1+DA(TWOND+I) ;
   1053         ENDIF ;
   1054       ENDIF ;
   1055     ENDFUNCTION ;
   1056   PROCEDURE SB PX PA R12 PY PB R34 PT PD R56 PG PZ ;
   1057     IF LOV=0 ;
   1058       WRITE 6 ' *** ERROR, call OV before SB' ;
   1059       QUIT 0 ;
   1060       ENDIF ;
   1061     PHSP(1) := PX ;
   1062     PHSP(2) := PA ;
   1063     PHSP(3) := PY ;
   1064     PHSP(4) := PB ;
   1065     PHSP(5) := PT ;
   1066     PHSP(6) := PD ;
   1067     PHSP(7) := PG ;
   1068     PHSP(8) := PZ ;
   1069     PHSR(1) := R12 ;
   1070     PHSR(2) := R34 ;
   1071     PHSR(3) := R56 ;
   1072     LPS := 1 ;
   1073     ENDPROCEDURE ;
   1074   PROCEDURE SP P1 P2 P3 P4 P5 P6 ;
   1075     PARS(1) := P1 ;
   1076     PARS(2) := P2 ;
   1077     PARS(3) := P3 ;
   1078     PARS(4) := P4 ;
   1079     PARS(5) := P5 ;
   1080     PARS(6) := P6 ;
   1081     ENDPROCEDURE ;
   1082   PROCEDURE LOCTRA X Y Z T P A NAP ;
   1083     VARIABLE CT NMP ;
   1084     VARIABLE ST NMP ;
   1085     VARIABLE CP NMP ;
   1086     VARIABLE SP NMP ;
   1087     VARIABLE CA NMP ;
   1088     VARIABLE SA NMP ;
   1089     VARIABLE CB NMP ;
   1090     VARIABLE SB NMP ;
   1091     VARIABLE CM NMP ;
   1092     VARIABLE SM NMP ;
   1093     VARIABLE N NMP ;
   1094     CT := COS(T) ;
   1095     ST := SIN(T) ;
   1096     CP := COS(P) ;
   1097     SP := SIN(P) ;
   1098     CA := COS(A) ;
   1099     SA := SIN(A) ;
   1100     IF ABS(ST*SP)=1 ;
   1101       CB := 0 ;
   1102       SB := 1 ;
   1103       ELSEIF TRUE ;
   1104       N := SQRT(1-SQR(ST)*SQR(SP)) ;
   1105       CB := CP/N ;
   1106       SB := CT*SP/N ;
   1107       ENDIF ;
   1108     CM := CA*CB+SA*SB ;
   1109     SM := SA*CB-CA*SB ;
   1110     NAP(1) := X+(CM*CT*CP-SM*SP)*DD(1)-(CM*SP+SM*CT*CP)*DD(2)+(ST*CP)*
                  DD(3) ;
   1111     NAP(2) := Y+(CM*CT*SP+SM*CP)*DD(1)+(CM*CP-SM*CT*SP)*DD(2)+(ST*SP)*
                  DD(3) ;
   1112     NAP(3) := Z-(CM*ST         )*DD(1)+(      SM*ST   )*DD(2)+(CT   )*
                  DD(3) ;
   1113     ENDPROCEDURE ;
   1114   PROCEDURE LOCSET X Z P S V T ;
   1115     XLOC := X ;
   1116     ZLOC := Z ;
   1117     PLOC := P ;
   1118     SLOC := S ;
   1119     VLOC := V ;
   1120     TLOC := T ;
   1121     ENDPROCEDURE ;
   1122   PROCEDURE MR NAP LAP ;
   1123     VARIABLE COD 1 NV ;
   1124     VARIABLE NUM 1 ;
   1125     VARIABLE I 1 ;
   1126     VARIABLE MM NM1 NV ;
   1127     NUM := MIN(TWOND,4) ; %MIN:  207
   1128     LOOP I 1 TWOND ;
   1129       MM(I) := NAP(I) ;
   1130       ENDLOOP ;
   1131     LOOP I TWOND+1 NV ;
   1132       MM(I) := DD(I) ;
   1133       ENDLOOP ;
   1134     MI MM MM NV I NOC NV NM1 ; %MI:  430
   1135     IF I#0 ;
   1136       WRITE 6 ' *** ERROR in REV, no inverse' ;
   1137       QUIT 0 ;
   1138       ENDIF ;
   1139     LOOP I 2 NUM 2 ;
   1140       COD(I-1) := DD(I-1) ;
   1141       COD(I) := -DD(I) ;
   1142       MM(I) := -MM(I) ;
   1143       ENDLOOP ;
   1144     LOOP I NUM+1 NV ;
   1145       COD(I) := DD(I) ;
   1146       ENDLOOP ;
   1147     IF ND>2 ;
   1148       COD(5) := -DD(5) ;
   1149       MM(5) := -MM(5) ;
   1150       ENDIF ;
   1151     POLVAL 1 MM TWOND COD NV LAP TWOND ;
   1152     ENDPROCEDURE ;
   1153   PROCEDURE MT IAP NAP PHI ;
   1154     VARIABLE R 1 4 4 ;
   1155     VARIABLE COD NM1 NV ;
   1156     VARIABLE I 1 ;
   1157     VARIABLE J 1 ;
   1158     VARIABLE S 1 ;
   1159     VARIABLE C 1 ;
   1160     IF PHI=0 ;
   1161       C := 1 ;
   1162       S := 0 ;
   1163       ELSEIF ABS(PHI+90)=180 ;
   1164       C := 0 ;
   1165       S := 1 ;
   1166       ELSEIF ABS(PHI)=180 ;
   1167       C := -1 ;
   1168       S := 0 ;
   1169       ELSEIF ABS(PHI-90)=180 ;
   1170       C := 0 ;
   1171       S := -1 ;
   1172       ELSEIF TRUE ;
   1173       C := COS(PHI*DEGRAD) ;
   1174       S := SIN(PHI*DEGRAD) ;
   1175       ENDIF ;
   1176     IF (TWOND=1)*(S#0) ;
   1177       WRITE 6 ' *** ERROR in MT, ND too low' ;
   1178       QUIT 0 ;
   1179       ENDIF ;
   1180     LOOP I 1 4 ;
   1181       LOOP J 1 4 ;
   1182         R(I,J) := 0 ;
   1183         ENDLOOP ;
   1184       R(I,I) := C ;
   1185       ENDLOOP ;
   1186     LOOP I 1 2 ;
   1187       R(I,I+2) := S ;
   1188       R(I+2,I) := -S ;
   1189       ENDLOOP ;
   1190     LOOP I 1 4 ;
   1191       COD(I) := 0 ;
   1192       LOOP J 1 4 ;
   1193         COD(I) := COD(I)+R(I,J)*DD(J) ;
   1194         ENDLOOP ;
   1195       ENDLOOP ;
   1196     LOOP I 5 NV ;
   1197       COD(I) := DD(I) ;
   1198       ENDLOOP ;
   1199     POLVAL 1 IAP TWOND COD NV NAP TWOND ;
   1200     LOOP I 1 4 ;
   1201       COD(I) := 0 ;
   1202       LOOP J 1 4 ;
   1203         COD(I) := COD(I)+R(J,I)*NAP(J) ;
   1204         ENDLOOP ;
   1205       ENDLOOP ;
   1206     LOOP I 1 4 ;
   1207       NAP(I) := COD(I) ;
   1208       ENDLOOP ;
   1209     ENDPROCEDURE ;
   1210   FUNCTION SIGMA I J ;
   1211     VARIABLE K 1 ;
   1212     IF (I=J)*(INT(I/2)#I/2) ;
   1213       SIGMA := SQR(PHSP(I)*ME(I,I))+SQR(PHSP(I+1)*ME(I,I+1))         +
                  2*PHSP(I)*PHSP(I+1)*PHSR((I+1)/2)*ME(I,I)*ME(I,I+1) ; %ME:  
                  516 %ME:  516 %ME:  516 %ME:  516
   1214       ELSEIF (I=J)*(INT(I/2)=I/2) ;
   1215       SIGMA := SQR(PHSP(I-1)*ME(I,I-1))+SQR(PHSP(I)*ME(I,I))         +
                  2*PHSP(I-1)*PHSP(I)*PHSR(I/2)*ME(I,I-1)*ME(I,I) ; %ME:  516 
                  %ME:  516 %ME:  516 %ME:  516
   1216       ELSEIF (ABS(I-J)=1)*(INT(MAX(J,I)/2)*2=MAX(J,I)) ; %MAX:  204 %M
                  AX:  204
   1217       K := MIN(I,J) ; %MIN:  207
   1218       SIGMA := SQR(PHSP(K))*ME(K,K)*ME(K+1,K)         +SQR(PHSP(K+1))*
                  ME(K,K+1)*ME(K+1,K+1) ; %ME:  516 %ME:  516 %ME:  516 %ME:  
                  516
   1219       SIGMA := SIGMA         +PHSP(K)*PHSP(K+1)*PHSR((K+1)/2)*(ME(K,K)
                  *ME(K+1,K+1)         +ME(K,K+1)*ME(K+1,K)) ; %ME:  516 %ME: 
                   516 %ME:  516 %ME:  516
   1220       ELSEIF TRUE ;
   1221       WRITE 6 ' *** ERROR in SIGMA, wrong element' ;
   1222       QUIT 0 ;
   1223       ENDIF ;
   1224     ENDFUNCTION ;
   1225   PROCEDURE UPDATEMAP MAPT MAPO MAPU SPNT SPNO SPNU ;
   1226     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   1227     VARIABLE I 1 ;
   1228     PROCEDURE SPNMUL ;
   1229       VARIABLE J 1 ;
   1230       VARIABLE K 1 ;
   1231       VARIABLE SM NM2 3 3 ;
   1232       VARIABLE SV NM2 9 ;
   1233       VARIABLE SVO NM2 9 ;
   1234       LOOP I 1 3 ;
   1235         LOOP J 1 3 ;
   1236           SM(I,J) := SPNO(I,J) ;
   1237           SVO(3*(I-1)+J) := SPNT(I,J) ;
   1238           ENDLOOP ;
   1239         ENDLOOP ;
   1240       POLVAL 2 SVO 9 MS NV SV 9 ;
   1241       LOOP I 1 3 ;
   1242         LOOP J 1 3 ;
   1243           SPNU(I,J) := 0 ;
   1244           LOOP K 1 3 ;
   1245             SPNU(I,J) := SPNU(I,J) + SV(3*(I-1)+K)*SM(K,J) ;
   1246             ENDLOOP ;
   1247           ENDLOOP ;
   1248         ENDLOOP ;
   1249       ENDPROCEDURE ;
   1250     LOOP I 1 TWOND ;
   1251       MS(I) := MAPO(I) ;
   1252       ENDLOOP ;
   1253     LOOP I TWOND+1 NV ;
   1254       MS(I) := DD(I) ;
   1255       ENDLOOP ;
   1256     POLVAL 1 MAPT TWOND MS NV MAPU TWOND ;
   1257     IF LSPN=1 ;
   1258       SPNMUL ; %SPNMUL: 1228
   1259       ENDIF ;
   1260     ENDPROCEDURE ;
   1261   PROCEDURE UPDATE IM IR ;
   1262     VARIABLE PIC LSCT ;
   1263     VARIABLE RB 1 ;
   1264     VARIABLE COD 1 3 ;
   1265     VARIABLE XF 1 ;
   1266     VARIABLE YF 1 ;
   1267     VARIABLE ZF 1 ;
   1268     VARIABLE SF 1 ;
   1269     VARIABLE I 1 ;
   1270     VARIABLE J 1 ;
   1271     PROCEDURE SPNVEC ;
   1272       VARIABLE SVO NM2 9 ;
   1273       VARIABLE SSCM NRAY 9 ;
   1274       VARIABLE SCRV NRAY 3 ;
   1275       VARIABLE SCR NRAY ;
   1276       IF LCR=1 ;
   1277         LCR := 0 ;
   1278         SCR := 0 ;
   1279         LOOP I 1 3 ;
   1280           SCR := SCR+SQR(SPI(I)) ;
   1281           ENDLOOP ;
   1282         VELSET SCR 1 1 ;
   1283         IF VMIN(SCR)<1E-3 ;
   1284           WRITE 6 ' *** ERROR in UPDATE, there is a zero spin vector' 
                  ;
   1285           QUIT 0 ;
   1286           ENDIF ;
   1287         ENDIF ;
   1288       LOOP I 1 3 ;
   1289         LOOP J 1 3 ;
   1290           SVO(3*(I-1)+J) := SSCR(I,J) ;
   1291           ENDLOOP ;
   1292         ENDLOOP ;
   1293       POLVAL 2 SVO 9 RAY 8 SSCM 9 ;
   1294       SCR := 0 ;
   1295       LOOP I 1 3 ;
   1296         SCRV(I) := 0 ;
   1297         LOOP J 1 3 ;
   1298           SCRV(I) := SCRV(I)+SSCM(3*(I-1)+J)*SPI(J) ;
   1299           ENDLOOP ;
   1300         SCR := SCR+SQR(SCRV(I)) ;
   1301         ENDLOOP ;
   1302       SCR := SQRT(SCR) ;
   1303       VELSET SCR 1 1 ;
   1304       LOOP I 1 3 ;
   1305         SPI(I) := SCRV(I)/SCR ;
   1306         ENDLOOP ;
   1307       ENDPROCEDURE ;
   1308     PROCEDURE NEWENV ;
   1309       LOOP I 1 MIN(TWOND,4) 2 ; %MIN:  207
   1310         J := (I+1)/2 ;
   1311         ERAY(I) := SQRT(SQR(PHSP(I)*ME(I,I))+SQR(PHSP(I+1)*ME(I,I+1)) 
                                        +2*PHSP(I)*PHSP(I+1)*PHSR(J)*ME(I,I)*M
                  E(I,I+1)) ; %ME:  516 %ME:  516 %ME:  516 %ME:  516
   1312         ERAY(I+1) := SQR(PHSP(I))*ME(I,I)*ME(I+1,I)                   
                       +SQR(PHSP(I+1))*ME(I,I+1)*ME(I+1,I+1) ; %ME:  516 %ME: 
                   516 %ME:  516 %ME:  516
   1313         ERAY(I+1) := (PHSP(I)*PHSP(I+1)*PHSR(J)*                      
                     (ME(I,I)*ME(I+1,I+1)+ME(I,I+1)*ME(I+1,I))                
                          +ERAY(I+1))/ERAY(I) ; %ME:  516 %ME:  516 %ME:  516 
                  %ME:  516
   1314         EMAX(J) := MAX(EMAX(J),ERAY(I)) ; %MAX:  204
   1315         ENDLOOP ;
   1316       ENDPROCEDURE ;
   1317     PROCEDURE CTR X Y Z ;
   1318       COD(1) := X ;
   1319       COD(2) := Y ;
   1320       COD(3) := Z ;
   1321       POLVAL -1 GTRA 3 COD 3 COD 3 ;
   1322       XF := COD(1) ;
   1323       YF := COD(2) ;
   1324       ZF := COD(3) ;
   1325       ENDPROCEDURE ;
   1326     PROCEDURE CURV X2 Y2 A1 B1 A2 B2 PIC ;
   1327       VARIABLE T1X 1 ;
   1328       VARIABLE T1Y 1 ;
   1329       VARIABLE T1Z 1 ;
   1330       VARIABLE T2X 1 ;
   1331       VARIABLE T2Y 1 ;
   1332       VARIABLE T2Z 1 ;
   1333       IF LPG#0 ;
   1334         CTR X2*LPG Y2*LPG 0 ; %CTR: 1317
   1335         T1X := COS(GPLOC-PLOC)*A1*LPG-SIN(GPLOC-PLOC) ;
   1336         T1Y := B1*LPG ;
   1337         T1Z := COS(GPLOC-PLOC)+SIN(GPLOC-PLOC)*A1*LPG ;
   1338         T2X := COS(GPLOC)*A2*LPG-SIN(GPLOC) ;
   1339         T2Y := B2*LPG ;
   1340         T2Z := COS(GPLOC) +SIN(GPLOC)*A2*LPG ;
   1341         ELSEIF TRUE ;
   1342         XF := X2 ;
   1343         YF := Y2 ;
   1344         ZF := SF ;
   1345         T1X := A1 ;
   1346         T1Y := B1 ;
   1347         T1Z := 1 ;
   1348         T2X := A2 ;
   1349         T2Y := B2 ;
   1350         T2Z := 1 ;
   1351         ENDIF ;
   1352       GRCURV ZF XF YF T1Z T1X T1Y T2Z T2X T2Y PIC ;
   1353       ENDPROCEDURE ;
   1354     PROCEDURE LINE IS P X Y Z SZ ;
   1355       IF LPG#0 ;
   1356         IF P#0 ;
   1357           CTR (RB+X*LPG)*COS(PLOC)-RB Y*LPG -(RB+X*LPG)*SIN(PLOC) ; %C
                  TR: 1317
   1358           ELSEIF TRUE ;
   1359           CTR X*LPG Y*LPG Z ; %CTR: 1317
   1360           ENDIF ;
   1361         ELSEIF TRUE ;
   1362         XF := X ;
   1363         YF := Y ;
   1364         ZF := SZ ;
   1365         ENDIF ;
   1366       IF IS=0 ;
   1367         GRMOVE ZF XF YF SYS ;
   1368         ELSEIF TRUE ;
   1369         GRDRAW ZF XF YF SYS ;
   1370         ENDIF ;
   1371       ENDPROCEDURE ;
   1372     PROCEDURE ELEM ;
   1373       IF MAX(ABS(DR*LPG),ABS(DR))>1E-10 ; %MAX:  204
   1374         RB := 1D6 ;
   1375         IF PLOC#0 ;
   1376           RB := SLOC/PLOC ;
   1377           ENDIF ;
   1378         LINE 0 PLOC -DR -DR -SLOC SPOS ; %LINE: 1354
   1379         LINE 1 PLOC  DR -DR -SLOC SPOS ; %LINE: 1354
   1380         LINE 1 PLOC  DR  DR -SLOC SPOS ; %LINE: 1354
   1381         LINE 1 PLOC -DR  DR -SLOC SPOS ; %LINE: 1354
   1382         LINE 1 PLOC -DR -DR -SLOC SPOS ; %LINE: 1354
   1383         IF ABS(SLOC)>1E-5 ;
   1384           LINE 0 PLOC  DR  DR -SLOC SPOS ; %LINE: 1354
   1385           CURV  DR  DR 0 0 0 0 SYS ; %CURV: 1326
   1386           LINE 0 PLOC -DR -DR -SLOC SPOS ; %LINE: 1354
   1387           CURV -DR -DR 0 0 0 0 SYS ; %CURV: 1326
   1388           LINE 0 PLOC  DR -DR -SLOC SPOS ; %LINE: 1354
   1389           CURV  DR -DR 0 0 0 0 SYS ; %CURV: 1326
   1390           LINE 0 PLOC -DR  DR -SLOC SPOS ; %LINE: 1354
   1391           CURV -DR  DR 0 0 0 0 SYS ; %CURV: 1326
   1392           IF LCE#0 ;
   1393             XF := -DR*.98 ;
   1394             YF := -DR*.98 ;
   1395             ZF := DR/10 ;
   1396             IF LPG=0 ;
   1397               ZF := ZF+SPOS ;
   1398               ELSEIF PLOC=0 ;
   1399               CTR XF*LPG YF*LPG ZF*LPG-SLOC ; %CTR: 1317
   1400               ELSEIF TRUE ;
   1401               CTR (RB+XF*LPG)*COS(PLOC*(1-ZF*LPG/SLOC))-RB            
                               YF*LPG -(RB+XF*LPG)*SIN(PLOC*(1-ZF*LPG/SLOC)) ;
                   %CTR: 1317
   1402               ENDIF ;
   1403             GRMOVE ZF XF YF SYS ;
   1404             GRCHAR CE SYS ;
   1405             ENDIF ;
   1406           LINE 0 0 -DR  DR 0 SF ; %LINE: 1354
   1407           LINE 1 0 -DR -DR 0 SF ; %LINE: 1354
   1408           LINE 1 0  DR -DR 0 SF ; %LINE: 1354
   1409           LINE 1 0  DR  DR 0 SF ; %LINE: 1354
   1410           LINE 1 0 -DR  DR 0 SF ; %LINE: 1354
   1411           ENDIF ;
   1412         ENDIF ;
   1413       ENDPROCEDURE ;
   1414     IF IM#0 ;
   1415       UPDATEMAP MSC MAP MAP SSCR SPNR SPNR ; %UPDATEMAP: 1225
   1416       ENDIF ;
   1417     IF IR*NRAY#0 ;
   1418       IF (LSPN=1)*(NSPN>0) ;
   1419         SPNVEC ; %SPNVEC: 1271
   1420         ENDIF ;
   1421       POLVAL 1 MSC TWOND RAY 8 RAY TWOND ;
   1422       ENDIF ;
   1423     IF LENV=1 ;
   1424       NEWENV ; %NEWENV: 1308
   1425       ENDIF ;
   1426     XLOC := XLOC*LCB ;
   1427     PLOC := PLOC*LCB ;
   1428     GPLOC := GPLOC+PLOC ;
   1429     SF := SPOS+SLOC ;
   1430     LOCTRA XLOC 0 ZLOC -PLOC 0 0 LTRA ; %LOCTRA: 1082
   1431     POLVAL 1 GTRA 3 LTRA 3 GTRA 3 ;
   1432     IF LPI#0 ;
   1433       POLVAL 101 GTRA 3 LTRA 3 COD 3 ;
   1434       IF LSYS#0 ;
   1435         ELEM ; %ELEM: 1372
   1436         ENDIF ;
   1437       RAY(1) := RAY(1)*LCB ;
   1438       RAY(2) := RAY(2)*LCB ;
   1439       RSC(2) := RSC(2)*LCB ;
   1440       LOOP I 1 NRAYTRA ;
   1441         PIC := TRA(I) ;
   1442         CURV RAY(1)|I RAY(3)|I RSC(2)|I RSC(4)|I RAY(2)|I RAY(4)|I PIC
                   ; %CURV: 1326
   1443         TRA(I) := PIC ;
   1444         ENDLOOP ;
   1445       RAY(1) := RAY(1)*LCB ;
   1446       RAY(2) := RAY(2)*LCB ;
   1447       RSC(2) := RSC(2)*LCB ;
   1448       IF LENV=1 ;
   1449         CURV ERAY(1) ERAY(3) ERSC(2) ERSC(4) ERAY(2) ERAY(4) ETRA ; %C
                  URV: 1326
   1450         ENDIF ;
   1451       ENDIF ;
   1452     SPOS := SF ;
   1453     XLOC := XLOC*LCB ;
   1454     PLOC := PLOC*LCB ;
   1455     IF LPI*IR#0 ;
   1456       LOOP I 1 8 ;
   1457         RSC(I) := RAY(I) ;
   1458         ENDLOOP ;
   1459       LOOP I 1 4 ;
   1460         ERSC(I) := ERAY(I) ;
   1461         ENDLOOP ;
   1462       IF NSPN>0 ;
   1463         LOOP I 1 3 ;
   1464           SSC(I) := SPI(I) ;
   1465           ENDLOOP ;
   1466         ENDIF ;
   1467       ENDIF ;
   1468     ENDPROCEDURE ;
   1469   PROCEDURE UMS ;
   1470     VARIABLE I 1 ;
   1471     VARIABLE J 1 ;
   1472     IF LRP=0 ;
   1473       WRITE 6 ' *** ERROR, call RP before UMS ' ;
   1474       QUIT 0 ;
   1475       ENDIF ;
   1476     LOOP I 1 8 ;
   1477       MSC(I) := XX(I) ;
   1478       ENDLOOP ;
   1479     IF LSPN=1 ;
   1480       LOOP I 1 3 ;
   1481         LOOP J 1 3 ;
   1482           SSCR(I,J) := 0*DD(1) ;
   1483           ENDLOOP ;
   1484         SSCR(I,I) := 1 + 0*DD(1) ;
   1485         ENDLOOP ;
   1486       ENDIF ;
   1487     ENDPROCEDURE ;
   1488   PROCEDURE UM ;
   1489     VARIABLE I 1 ;
   1490     VARIABLE J 1 ;
   1491     IF LRP=0 ;
   1492       WRITE 6 ' *** ERROR, call RP before UM ' ;
   1493       QUIT 0 ;
   1494       ENDIF ;
   1495     LOOP I 1 8 ;
   1496       MAP(I) := XX(I) ;
   1497       MSC(I) := MAP(I) ;
   1498       ENDLOOP ;
   1499     LOOP I 1 3 ;
   1500       AXP(I) := 0 ;
   1501       AXD(I) := 0 ;
   1502       ENDLOOP ;
   1503     LTRA(1) := DD(1) ;
   1504     LTRA(2) := DD(2) ;
   1505     LTRA(3) := DD(3) ;
   1506     GTRA(1) := DD(1) ;
   1507     GTRA(2) := DD(2) ;
   1508     GTRA(3) := DD(3) ;
   1509     IF LSPN=1 ;
   1510       LOOP I 1 3 ;
   1511         LOOP J 1 3 ;
   1512           SPNR(I,J) := 0 ;
   1513           SSCR(I,J) := 0 ;
   1514           ENDLOOP ;
   1515         SPNR(I,I) := 1 ;
   1516         SSCR(I,I) := 1 ;
   1517         ENDLOOP ;
   1518       ENDIF ;
   1519     LUM := 1 ;
   1520     SPOS := 0 ;
   1521     GPLOC := 0 ;
   1522     NCT := 0 ;
   1523     NCCT := 0 ;
   1524     ENDPROCEDURE ;
   1525   PROCEDURE SM M ;
   1526     VARIABLE I 1 ;
   1527     LOOP I 1 TWOND ;
   1528       M(I) := MAP(I) ;
   1529       ENDLOOP ;
   1530     ENDPROCEDURE ;
   1531   PROCEDURE SNM N M ;
   1532     VARIABLE I 1 ;
   1533     LOOP I 1 TWOND ;
   1534       M(I) := N(I) ;
   1535       ENDLOOP ;
   1536     ENDPROCEDURE ;
   1537   PROCEDURE SSM M ;
   1538     VARIABLE I 1 ;
   1539     VARIABLE J 1 ;
   1540     LOOP I 1 3 ;
   1541       LOOP J 1 3 ;
   1542         M(I,J) := SPNR(I,J) ;
   1543         ENDLOOP ;
   1544       ENDLOOP ;
   1545     ENDPROCEDURE ;
   1546   PROCEDURE SSNM N M ;
   1547     VARIABLE I 1 ;
   1548     VARIABLE J 1 ;
   1549     LOOP I 1 3 ;
   1550       LOOP J 1 3 ;
   1551         M(I,J) := N(I,J) ;
   1552         ENDLOOP ;
   1553       ENDLOOP ;
   1554     ENDPROCEDURE ;
   1555   PROCEDURE AM M ;
   1556     VARIABLE I 1 ;
   1557     LOOP I 1 TWOND ;
   1558       MSC(I) := M(I) ;
   1559       ENDLOOP ;
   1560     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   1561     UPDATE 1 1 ; %UPDATE: 1261
   1562     ENDPROCEDURE ;
   1563   PROCEDURE ANM N M O ;
   1564     VARIABLE I 1 ;
   1565     VARIABLE MM NM1 NV ;
   1566     LOOP I 1 TWOND ;
   1567       MM(I) := M(I) ;
   1568       ENDLOOP ;
   1569     LOOP I TWOND+1 NV ;
   1570       MM(I) := DD(I)+0*MM(1) ;
   1571       ENDLOOP ;
   1572     POLVAL 1 N TWOND MM NV O TWOND ;
   1573     ENDPROCEDURE ;
   1574   PROCEDURE PM IU ;
   1575     VARIABLE I 1 ;
   1576     VARIABLE M NM1 5 ;
   1577     LOOP I 1 5 ;
   1578       M(I) := MAP(I) + 0*DD(1) ;
   1579       ENDLOOP ;
   1580     DAPRV M 5 6 TWOND IU ;
   1581     ENDPROCEDURE ;
   1582   PROCEDURE PSM IU ;
   1583     VARIABLE I 1 ;
   1584     VARIABLE J 1 ;
   1585     VARIABLE M NM2 3 ;
   1586     LOOP I 1 3 ;
   1587       LOOP J 1 3 ;
   1588         M(J) := SPNR(I,J) + 0*DD(1) ;
   1589         ENDLOOP ;
   1590       DAPRV M 3 6 TWOND IU ;
   1591       ENDLOOP ;
   1592     ENDPROCEDURE ;
   1593   PROCEDURE WM IU ;
   1594     VARIABLE I 10 ;
   1595     I := '(E24.16)' ;
   1596     WRITE IU ' L  '&SF(SPOS,I) ; %SF:  285
   1597     WRITE IU ' P ('&SF(XLOC,I)&','&SF(0,I)&','&SF(ZLOC,I)&')' ; %SF:  
                  285 %SF:  285 %SF:  285
   1598     WRITE IU ' A ('&SF(PLOC,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  285
                   %SF:  285 %SF:  285
   1599     LOOP I 1 8 ;
   1600       WRITE IU MAP(I)+0*DD(1) ;
   1601       ENDLOOP ;
   1602     ENDPROCEDURE ;
   1603   PROCEDURE PNM IU NAP ;
   1604     VARIABLE I 1 ;
   1605     VARIABLE M NM1 5 ;
   1606     LOOP I 1 MIN(5,TWOND) ; %MIN:  207
   1607       M(I) := NAP(I) + 0*DD(1) ;
   1608       ENDLOOP ;
   1609     LOOP I TWOND+1 5 ;
   1610       M(I) := 0*DD(1) ;
   1611       ENDLOOP ;
   1612     DAPRV M 5 6 TWOND IU ;
   1613     ENDPROCEDURE ;
   1614   PROCEDURE WNM IU NAP ;
   1615     VARIABLE I 10 ;
   1616     I := '(E24.16)' ;
   1617     WRITE IU ' L  '&SF(0,I) ; %SF:  285
   1618     WRITE IU ' P ('&SF(0,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  285 %S
                  F:  285 %SF:  285
   1619     WRITE IU ' A ('&SF(0,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  285 %S
                  F:  285 %SF:  285
   1620     LOOP I 1 TWOND ;
   1621       WRITE IU NAP(I)+0*DD(1) ;
   1622       ENDLOOP ;
   1623     ENDPROCEDURE ;
   1624   PROCEDURE DMAP IU MAPA MAPB AC ;
   1625     VARIABLE I 1 ;
   1626     VARIABLE C NM1 MAX(5,TWOND) ; %MAX:  204
   1627     VARIABLE DEPSP 1 ;
   1628     DEPSP := DEPS ;
   1629     DAEPS AC ;
   1630     LOOP I 1 TWOND ;
   1631       C(I) := MAPA(I)-MAPB(I)+0*DD(1) ;
   1632       ENDLOOP ;
   1633     LOOP I TWOND+1 5 ;
   1634       C(I) := 0*DD(1) ;
   1635       ENDLOOP ;
   1636     DAPRV C 5 6 TWOND IU ;
   1637     IF ND>2 ;
   1638       WRITE IU MAPA(6)-MAPB(6) ;
   1639       ENDIF ;
   1640     DSET DEPSP ; %DSET:  703
   1641     ENDPROCEDURE ;
   1642   PROCEDURE DSMAP IU MAPA MAPB AC ;
   1643     VARIABLE I 1 ;
   1644     VARIABLE J 1 ;
   1645     VARIABLE DEPSP 1 ;
   1646     VARIABLE M NM2 3 ;
   1647     DEPSP := DEPS ;
   1648     DAEPS AC ;
   1649     LOOP I 1 3 ;
   1650       LOOP J 1 3 ;
   1651         M(J) := MAPA(I,J)-MAPB(I,J)+0*DD(1) ;
   1652         ENDLOOP ;
   1653       DAPRV M 3 6 TWOND IU ;
   1654       ENDLOOP ;
   1655     DSET DEPSP ; %DSET:  703
   1656     ENDPROCEDURE ;
   1657   PROCEDURE CATR IAP NAP LGH ;
   1658     VARIABLE NC 1 ;
   1659     VARIABLE PC 1 ;
   1660     VARIABLE VN NM1 ;
   1661     VARIABLE LT NM1 ;
   1662     VARIABLE GM NM1 ;
   1663     VARIABLE MG NM1 ;
   1664     VARIABLE COP NM1 NV ;
   1665     VARIABLE DOP NM1 NV ;
   1666     IF LUM#1 ;
   1667       WRITE 6 ' *** ERROR, call UM before CATR' ;
   1668       QUIT 0 ;
   1669       ENDIF ;
   1670     PC := CONS(P0) ;
   1671     IF ND>2 ;
   1672       GM := SQRT(1+SQR(DD(2))+SQR(DD(4)))/(1+DD(6)) ;
   1673       ELSEIF ND>0 ;
   1674       GM := SQRT(1+SQR(DD(2))+SQR(DD(4)))*PC/P0 ;
   1675       ENDIF ;
   1676     IF ND>1 ;
   1677       MG := SQRT(SQR(P0/PC)-SQR(IAP(2))-SQR(IAP(4))) ;
   1678       ELSEIF ND>0 ;
   1679       MG := SQRT(SQR(P0/PC)-SQR(IAP(2))) ;
   1680       ENDIF ;
   1681     IF ND>0 ;
   1682       COP(1) :=  DD(1) ;
   1683       COP(2) :=  DD(2)/GM ;
   1684       DOP(1) := IAP(1) ;
   1685       DOP(2) := IAP(2)/MG ;
   1686       IF ND>1 ;
   1687         COP(3) :=  DD(3) ;
   1688         COP(4) :=  DD(4)/GM ;
   1689         DOP(3) := IAP(3) ;
   1690         DOP(4) := IAP(4)/MG ;
   1691         IF ND>2 ;
   1692           COP(5) := DD(5) ;
   1693           NC := CONS(ETA) ;
   1694           VN := V0/CONS(V0) ;
   1695           LT := -(1+NC)/(2+NC)/VN ;
   1696           COP(6) := (SQRT(SQR(PC*(1+DD(6))/M0/AMUMEV)+1)-1)*M0*AMUMEV/
                  CONS(E0)-1 ;
   1697           DOP(5) := DD(5)-(IAP(5)-DD(5))/LT-(VN-1)*LGH ;
   1698           DOP(6) := P0/PC-1 ;
   1699           ENDIF ;
   1700         ENDIF ;
   1701       ENDIF ;
   1702     ANM DOP COP NAP ; %ANM: 1563
   1703     ENDPROCEDURE ;
   1704   PROCEDURE TRCA IAP NAP LGH ;
   1705     VARIABLE NC 1 ;
   1706     VARIABLE PC 1 ;
   1707     VARIABLE VN NM1 ;
   1708     VARIABLE LT NM1 ;
   1709     VARIABLE GM NM1 ;
   1710     VARIABLE MG NM1 ;
   1711     VARIABLE COP NM1 NV ;
   1712     VARIABLE I 1 ;
   1713     VARIABLE DOP NM1 NV ;
   1714     IF LUM#1 ;
   1715       WRITE 6 ' *** ERROR, call UM before TRCA' ;
   1716       QUIT 0 ;
   1717       ENDIF ;
   1718     PC := CONS(P0) ;
   1719     IF ND>2 ;
   1720       GM := SQRT(1+SQR(IAP(2))+SQR(IAP(4)))/(1+DD(6)) ;
   1721       ELSEIF ND>1 ;
   1722       GM := SQRT(1+SQR(IAP(2))+SQR(IAP(4)))*PC/P0 ;
   1723       ELSEIF ND>0 ;
   1724       GM := SQRT(1+SQR(IAP(2)))*PC/P0 ;
   1725       ENDIF ;
   1726     MG := SQRT(SQR(P0/PC)-SQR(DD(2))-SQR(DD(4))) ;
   1727     IF ND>0 ;
   1728       COP(1) :=  DD(1) ;
   1729       COP(2) :=  DD(2)/MG ;
   1730       DOP(1) := IAP(1) ;
   1731       DOP(2) := IAP(2)/GM ;
   1732       IF ND>1 ;
   1733         COP(3) :=  DD(3) ;
   1734         COP(4) :=  DD(4)/MG ;
   1735         DOP(3) := IAP(3) ;
   1736         DOP(4) := IAP(4)/GM ;
   1737         IF ND>2 ;
   1738           COP(5) := DD(5) ;
   1739           COP(6) := P0/PC-1 ;
   1740           NC := CONS(ETA) ;
   1741           VN := PC/M0/AMUMEV*(1+DD(6)) ;
   1742           VN := VN/SQRT(1+SQR(VN)) ;
   1743           VN := VN/CONS(VN) ;
   1744           LT := -(1+NC)/(2+NC)/VN ;
   1745           DOP(6) := (SQRT(SQR(PC*(1+IAP(6))/M0/AMUMEV)+1)-1)*M0*AMUMEV
                  /CONS(E0)-1 ;
   1746           DOP(5) := DD(5)-(IAP(5)-DD(5)+(VN-1)*LGH)*LT ;
   1747           ENDIF ;
   1748         ENDIF ;
   1749       ENDIF ;
   1750     ANM DOP COP NAP ; %ANM: 1563
   1751     ENDPROCEDURE ;
   1752   PROCEDURE COCR IAP NAP ;
   1753     VARIABLE LAP 2*NM1 TWOND ;
   1754     VARIABLE COD 5 NV ;
   1755     VARIABLE I 2 ;
   1756     IMUNIT I ;
   1757     IF ND<2 ;
   1758       WRITE 6 ' *** ERROR in COCR, ND too small' ;
   1759       QUIT 0 ;
   1760       ENDIF ;
   1761     COD(1) := (DD(1)+DD(2))/2 ;
   1762     COD(3) := (DD(1)-DD(2))/2/I ;
   1763     COD(2) := (DD(3)+DD(4))/2 ;
   1764     COD(4) := (DD(3)-DD(4))/2/I ;
   1765     LAP(1) := IAP(1)+I*IAP(3) ;
   1766     LAP(2) := IAP(1)-I*IAP(3) ;
   1767     LAP(3) := IAP(2)+I*IAP(4) ;
   1768     LAP(4) := IAP(2)-I*IAP(4) ;
   1769     LOOP I 5 TWOND ;
   1770       COD(I) := DD(I) ;
   1771       LAP(I) := IAP(I) ;
   1772       ENDLOOP ;
   1773     LOOP I TWOND+1 NV ;
   1774       COD(I) := DD(I) ;
   1775       ENDLOOP ;
   1776     CPOLVAL 1 LAP TWOND COD NV NAP TWOND ; %CPOLVAL:  555
   1777     ENDPROCEDURE ;
   1778   PROCEDURE CRCO IAP NAP ;
   1779     VARIABLE DUM 1 ;
   1780     VARIABLE LAP 2*NM1 TWOND ;
   1781     VARIABLE COD 5 NV ;
   1782     VARIABLE I 2 ;
   1783     IMUNIT I ;
   1784     IF ND<2 ;
   1785       WRITE 6 ' *** ERROR in CRCO, ND too small' ;
   1786       QUIT 0 ;
   1787       ENDIF ;
   1788     COD(1) := DD(1)+I*DD(3) ;
   1789     COD(2) := DD(1)-I*DD(3) ;
   1790     COD(3) := DD(2)+I*DD(4) ;
   1791     COD(4) := DD(2)-I*DD(4) ;
   1792     LAP(1) := (IAP(1)+IAP(2))/2 ;
   1793     LAP(3) := (IAP(1)-IAP(2))/2/I ;
   1794     LAP(2) := (IAP(3)+IAP(4))/2 ;
   1795     LAP(4) := (IAP(3)-IAP(4))/2/I ;
   1796     LOOP I 5 TWOND ;
   1797       COD(I) := DD(I) ;
   1798       LAP(I) := IAP(I) ;
   1799       ENDLOOP ;
   1800     LOOP I TWOND+1 NV ;
   1801       COD(I) := DD(I) ;
   1802       ENDLOOP ;
   1803     CPOLVAL 1 LAP TWOND COD NV NAP TWOND ; %CPOLVAL:  555
   1804     DUM := 0 ;
   1805     LOOP I 1 TWOND ;
   1806       DUM := DUM + ABS(IMAG(NAP(I))) ;
   1807       NAP(I) := REAL(NAP(I)) ;
   1808       ENDLOOP ;
   1809     IF DUM>1E-12 ;
   1810       WRITE 6 ' --- WARNING in CRCO, map not in circular representatio
                  n' ;
   1811       ENDIF ;
   1812     ENDPROCEDURE ;
   1813   PROCEDURE PT IU ;
   1814     VARIABLE M NM1 TWOND ;
   1815     VARIABLE I 1 ;
   1816     VARIABLE MM NM1 MAX(NV,6) ; %MAX:  204
   1817     CATR MAP M SPOS ; %CATR: 1657
   1818     LOOP I TWOND NV ;
   1819       MM(I) := DD(I) ;
   1820       ENDLOOP ;
   1821     LOOP I 1 TWOND 2 ;
   1822       MM(I) := .01*DD(I) ;
   1823       MM(I+1) := .001*DD(I+1) ;
   1824       ENDLOOP ;
   1825     IF ND>2 ;
   1826       MM(6) := .01*DD(6) ;
   1827       ENDIF ;
   1828     POLVAL 1 M TWOND MM NV MM TWOND ;
   1829     LOOP I 1 TWOND 2 ;
   1830       MM(I) :=  100*MM(I) ;
   1831       MM(I+1) :=  1000*MM(I+1) ;
   1832       ENDLOOP ;
   1833     IF ND>2 ;
   1834       MM(6) := .1*MM(6) ;
   1835       ENDIF ;
   1836     LOOP I 1 5 ;
   1837       MM(I) := MM(I) + 0*DD(1) ;
   1838       ENDLOOP ;
   1839     DAPRV MM 5 6 TWOND IU ;
   1840     ENDPROCEDURE ;
   1841   PROCEDURE PA IU ;
   1842     VARIABLE I 1 ;
   1843     VARIABLE MM NM1 MAX(NV,5) ; %MAX:  204
   1844     LOOP I 1 TWOND ;
   1845       MM(I) := PHSP(I)*DD(I) ;
   1846       ENDLOOP ;
   1847     LOOP I TWOND+1 NV ;
   1848       MM(I) := PARS(I-TWOND)*DD(I) ;
   1849       ENDLOOP ;
   1850     POLVAL 1 MAP TWOND MM NV MM TWOND ;
   1851     LOOP I TWOND+1 5 ;
   1852       MM(I) := 0*DD(1) ;
   1853       ENDLOOP ;
   1854     DAPRV MM 5 6 TWOND IU ;
   1855     ENDPROCEDURE ;
   1856   PROCEDURE FM M XF MF IER ;
   1857     VARIABLE N NM1 NV ;
   1858     VARIABLE NI NM1 NV ;
   1859     VARIABLE C NM1 NV ;
   1860     VARIABLE I 1 ;
   1861     VARIABLE PEP NM1 ;
   1862     VARIABLE COR 1 ;
   1863     VARIABLE GEO 1 ;
   1864     VARIABLE P 1 ;
   1865     P := 0 ;
   1866     IF TWOND=5 ;
   1867       COR := 4 ;
   1868       ELSEIF TRUE ;
   1869       COR := TWOND ;
   1870       ENDIF ;
   1871     LOOP I 1 COR ;
   1872       DAPEP M(I) 0 COR PEP ;
   1873       P:= P + ABS(PEP) ;
   1874       ENDLOOP ;
   1875     IF P=0 ;
   1876       LOOP I 1 TWOND ;
   1877         MF(I) := M(I) ;
   1878         XF(I) := 0 ;
   1879         ENDLOOP ;
   1880       IER := 0 ;
   1881       ELSEIF P#0 ;
   1882       LOOP I 1 COR ;
   1883         C(I) := 0*DD(1) ;
   1884         N(I) := M(I)-DD(I) ;
   1885         ENDLOOP ;
   1886       LOOP I COR+1 NV ;
   1887         C(I) := DD(I) ;
   1888         N(I) := DD(I) ;
   1889         ENDLOOP ;
   1890       MI N NI NV IER NOC NV NM1 ; %MI:  430
   1891       IF IER#0 ;
   1892         WRITE 6 ' --- WARNING in FM, no fixed point' ;
   1893         ENDIF ;
   1894       POLVAL 1 NI NV C NV XF NV ;
   1895       POLVAL 1 M TWOND XF NV C TWOND ;
   1896       LOOP I 1 COR ;
   1897         XF(I) := XF(I) + DD(I) ;
   1898         ENDLOOP ;
   1899       POLVAL 0 M TWOND XF NV MF TWOND ;
   1900       LOOP I 1 COR ;
   1901         MF(I) := MF(I)-C(I) ;
   1902         XF(I) := XF(I)-DD(I) ;
   1903         ENDLOOP ;
   1904       IF TWOND=5 ;
   1905         XF(5) := C(5) ;
   1906         MF(5) := MF(5)-C(5)+DD(5) ;
   1907         MF(6) := DD(6) ;
   1908         ENDIF ;
   1909       ENDIF ;
   1910     ENDPROCEDURE ;
   1911   PROCEDURE RR M   X A Y B D  PR AR N   OR MR RES ;
   1912     PROCEDURE REC ;
   1913       VARIABLE NN 1 ;
   1914       VARIABLE S MAX(NM1,N+1) ; %MAX:  204
   1915       VARIABLE I 1 ;
   1916       VARIABLE M4 NM1 4 ;
   1917       VARIABLE CM 1 6 ;
   1918       VARIABLE RI N 6 ;
   1919       VARIABLE RO N 4 ;
   1920       VARIABLE RB N 4 ;
   1921       VARIABLE RE N 4 ;
   1922       VARIABLE IRAN 1 ;
   1923       VARIABLE J NM1 ;
   1924       VARIABLE NOM 1 ;
   1925       VARIABLE IER 1 ;
   1926       FUNCTION RAN IRAN ;
   1927         RAN := 98765*IRAN+.12345 ;
   1928         RAN := 2*(RAN-NINT(RAN)) ;
   1929         IRAN := RAN ;
   1930         ENDFUNCTION ;
   1931       IRAN := 0 ;
   1932       IF OR>0 ;
   1933         LOOP I 1 4 ;
   1934           DAPLU M(I) 1 0 S ;
   1935           M4(I) := S ;
   1936           CM(I+1) := DD(I) ;
   1937           ENDLOOP ;
   1938         NOM := NOC ;
   1939         CO OR ; %CO:  965
   1940         CM(1) := 0*DD(1) ;
   1941         CM(6) := 0*DD(1) ;
   1942         IF ND=3 ;
   1943           CM(6) := DD(4) ;
   1944           CM(5) := 0*DD(1) ;
   1945           ENDIF ;
   1946         POLVAL 1 M4 4 CM 6 M4 4 ;
   1947         MI M4 MR 4 IER NOC NV NM1 ; %MI:  430
   1948         CO NOM ; %CO:  965
   1949         ENDIF ;
   1950       S := 0 ;
   1951       LOOP I 1 N-1 ;
   1952         S := S&0 ;
   1953         ENDLOOP ;
   1954       LOOP I 1 N ;
   1955         VELSET S I X*RAN(IRAN) ; %RAN: 1926
   1956         ENDLOOP ;
   1957       RI(1) := S ;
   1958       LOOP I 1 N ;
   1959         VELSET S I A*RAN(IRAN) ; %RAN: 1926
   1960         ENDLOOP ;
   1961       RI(2) := S ;
   1962       LOOP I 1 N ;
   1963         VELSET S I Y*RAN(IRAN) ; %RAN: 1926
   1964         ENDLOOP ;
   1965       RI(3) := S ;
   1966       LOOP I 1 N ;
   1967         VELSET S I B*RAN(IRAN) ; %RAN: 1926
   1968         ENDLOOP ;
   1969       RI(4) := S ;
   1970       LOOP I 1 N ;
   1971         VELSET S I D*RAN(IRAN) ; %RAN: 1926
   1972         ENDLOOP ;
   1973       RI(5) := S ;
   1974       RI(6) := S ;
   1975       POLVAL 1 M 4 RI 6 RO 4 ;
   1976       LOOP I 1 N ;
   1977         VELSET S I PR*RAN(IRAN) ; %RAN: 1926
   1978         ENDLOOP ;
   1979       RE(1) := S ;
   1980       LOOP I 1 N ;
   1981         VELSET S I AR*RAN(IRAN) ; %RAN: 1926
   1982         ENDLOOP ;
   1983       RE(2) := S ;
   1984       LOOP I 1 N ;
   1985         VELSET S I PR*RAN(IRAN) ; %RAN: 1926
   1986         ENDLOOP ;
   1987       RE(3) := S ;
   1988       LOOP I 1 N ;
   1989         VELSET S I AR*RAN(IRAN) ; %RAN: 1926
   1990         ENDLOOP ;
   1991       RE(4) := S ;
   1992       RO(1) := RO(1) + RE(1) ;
   1993       RO(2) := RO(2) + RE(2) ;
   1994       RO(3) := RO(3) + RE(3) ;
   1995       RO(4) := RO(4) + RE(4) ;
   1996       POLVAL 1 MR 4 RO 4 RB 4 ;
   1997       RE(1) := RI(2)-RB(1) ;
   1998       RE(2) := RI(3)-RB(2) ;
   1999       RE(3) := RI(4)-RB(3) ;
   2000       RE(4) := RI(6)-RB(4) ;
   2001       LOOP J 1 4 ;
   2002         RES(J) := 0 ;
   2003         NN := 0 ;
   2004         LOOP I 1 N ;
   2005           VELGET RE(J) I S ;
   2006           IF S#0 ;
   2007             RES(J) := RES(J) + ABS(S) ;
   2008             NN := NN + 1 ;
   2009             ENDIF ;
   2010           ENDLOOP ;
   2011         RES(J) := NN/(RES(J)+1E-20)/4 ;
   2012         IF IER#0 ;
   2013           RES(J) := 0 ;
   2014           ENDIF ;
   2015         ENDLOOP ;
   2016       ENDPROCEDURE ;
   2017     SVSCR ; %SVSCR:  316
   2018     NM1 := MAX(NM1,N) ; %MAX:  204
   2019     SCRLEN 2*NM1 ;
   2020     REC ; %REC: 1912
   2021     NM1 := NMON(NO+1,NV) ; %NMON:  617
   2022     SCRLEN LSCR ;
   2023     ENDPROCEDURE ;
   2024   PROCEDURE AR M   X A Y B D   PR N   RES ;
   2025     VARIABLE I 1 ;
   2026     VARIABLE MR NM1 4 ;
   2027     VARIABLE RS 1 4 ;
   2028     DAPEE M(1) 2 RES ;
   2029     RR M X A Y B D PR RES*A N 1 MR RS ; %RR: 1911
   2030     RES := RS(4) ;
   2031     ENDPROCEDURE ;
   2032   PROCEDURE RM IU ;
   2033     VARIABLE LIN 80 ;
   2034     VARIABLE DUM NM1 ;
   2035     VARIABLE I 1 ;
   2036     READ IU LIN ;
   2037     IF SS(LIN,1,3)=' L ' ; %SS:  276
   2038       SLOC := R(LIN,5,28) ; %R:  279
   2039       READ IU LIN ;
   2040       XLOC := R(LIN,5,28) ; %R:  279
   2041       I := R(LIN,30,53) ; %R:  279
   2042       ZLOC := R(LIN,55,78) ; %R:  279
   2043       READ IU LIN ;
   2044       PLOC := R(LIN,5,28) ; %R:  279
   2045       I := R(LIN,30,53) ; %R:  279
   2046       I := R(LIN,55,78) ; %R:  279
   2047       LOCSET XLOC ZLOC PLOC SLOC 0 0 ; %LOCSET: 1114
   2048       LOOP I 1 8 ;
   2049         DAREA IU DUM NV ;
   2050         MSC(I) := DUM ;
   2051         ENDLOOP ;
   2052       ELSEIF TRUE ;
   2053       BACKF IU ;
   2054       DAREV MSC 5 6 TWOND IU ;
   2055       MSC(6) := DD(6) ;
   2056       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   2057       ENDIF ;
   2058     UPDATE 1 1 ; %UPDATE: 1261
   2059     ENDPROCEDURE ;
   2060   PROCEDURE RNM IU NAP ;
   2061     VARIABLE LIN 80 ;
   2062     VARIABLE DUM NM1 ;
   2063     VARIABLE I 1 ;
   2064     VARIABLE IAP NM1 8 ;
   2065     READ IU LIN ;
   2066     IF SS(LIN,1,3)=' L ' ; %SS:  276
   2067       READ IU LIN ;
   2068       READ IU LIN ;
   2069       LOOP I 1 8 ;
   2070         DAREA IU DUM NV ;
   2071         IAP(I) := DUM ;
   2072         ENDLOOP ;
   2073       ELSEIF TRUE ;
   2074       BACKF IU ;
   2075       DAREV IAP 5 6 TWOND IU ;
   2076       IAP(6) := DD(6) ;
   2077       ENDIF ;
   2078     LOOP I 1 TWOND ;
   2079       NAP(I) := IAP(I) ;
   2080       ENDLOOP ;
   2081     ENDPROCEDURE ;
   2082   PROCEDURE SR X A Y B T D G Z COL ;
   2083     VARIABLE I 1 ;
   2084     IF LOV=0 ;
   2085       WRITE 6 ' *** ERROR, call OV before SR' ;
   2086       QUIT 0 ;
   2087       ENDIF ;
   2088     IF LPI=1 ;
   2089       WRITE 6 ' *** ERROR, call SR before BP' ;
   2090       QUIT 0 ;
   2091       ENDIF ;
   2092     NRAY := NRAY + 1 ;
   2093     IF NRAY=1 ;
   2094       NRAY := 2 ;
   2095       ENDIF ;
   2096     RAY(1) := RAY(1)&X ;
   2097     RAY(2) := RAY(2)&A ;
   2098     RAY(3) := RAY(3)&Y ;
   2099     RAY(4) := RAY(4)&B ;
   2100     RAY(5) := RAY(5)&T ;
   2101     RAY(6) := RAY(6)&D ;
   2102     RAY(7) := RAY(7)&G ;
   2103     RAY(8) := RAY(8)&Z ;
   2104     RCOL := RCOL&COL ;
   2105     LOOP I 1 8 ;
   2106       RSC(I) := RAY(I) ;
   2107       ENDLOOP ;
   2108     REMAIN := REMAIN&1 ;
   2109     REMOVE := REMOVE&0 ;
   2110     ENDPROCEDURE ;
   2111   PROCEDURE SBE EX EY ET ;
   2112     VARIABLE E 1 3 ;
   2113     VARIABLE I 1 ;
   2114     VARIABLE J 1 ;
   2115     VARIABLE K 1 ;
   2116     VARIABLE DUM 1 ;
   2117     VARIABLE X 1 3 ;
   2118     VARIABLE A 1 3 ;
   2119     VARIABLE R 1 3 ;
   2120     E(1) := EX ;
   2121     E(2) := EY ;
   2122     E(3) := ET ;
   2123     LOOP I 1 ND ;
   2124       K := 2*I ;
   2125       J := K-1 ;
   2126       IF ABS(ME(J,J)+ME(K,K))<(2-1E-10) ; %ME:  516 %ME:  516
   2127         DUM := E(I)/PI/SQRT(1-SQR(ME(J,J)+ME(K,K))/4) ; %ME:  516 %ME:
                    516
   2128         X(I) := SQRT(DUM*ABS(ME(J,K))) ; %ME:  516
   2129         A(I) := SQRT(DUM*ABS(ME(K,J))) ; %ME:  516
   2130         R(I) := (ME(K,K)-ME(J,J))/2*SIG(ME(J,K))/SQRT(ABS(ME(J,K)*ME(K
                  ,J))) ; %ME:  516 %ME:  516 %SIG:  213 %ME:  516 %ME:  516 %
                  ME:  516
   2131         ELSEIF TRUE ;
   2132         X(I) := 0 ;
   2133         A(I) := 0 ;
   2134         R(I) := 0 ;
   2135         WRITE 6 ' --- WARNING in SBE, map unstable' ;
   2136         ENDIF ;
   2137       ENDLOOP ;
   2138     SB X(1) A(1) R(1) X(2) A(2) R(2) X(3) A(3) R(3) 0 0 ; %SB: 1056
   2139     ENDPROCEDURE ;
   2140   PROCEDURE ENVEL ;
   2141     VARIABLE I 1 ;
   2142     SR 0 0 0 0 0 0 0 0 1 ; %SR: 2082
   2143     IF LOV=0 ;
   2144       WRITE 6 ' *** ERROR, call OV before ENVEL' ;
   2145       QUIT 0 ;
   2146       ENDIF ;
   2147     ERAY(1) := PHSP(1) ;
   2148     EMAX(1) := PHSP(1) ;
   2149     ERAY(2) := PHSR(1)*PHSP(2) ;
   2150     ERAY(3) := PHSP(3) ;
   2151     EMAX(2) := PHSP(3) ;
   2152     ERAY(4) := PHSR(2)*PHSP(4) ;
   2153     LOOP I 1 4 ;
   2154       ERSC(I) := ERAY(I) ;
   2155       ENDLOOP ;
   2156     LENV := 1 ;
   2157     ENDPROCEDURE ;
   2158   PROCEDURE ENCL DISP ;
   2159     VARIABLE I 1 ;
   2160     VARIABLE MF NM1 8 ;
   2161     VARIABLE XF NM1 8 ;
   2162     TWOND := 5 ;
   2163     FM MAP XF MF I ; %FM: 1856
   2164     TWOND := 2*ND ;
   2165     LOOP I 1 NV ;
   2166       MF(I) := 0 ;
   2167       ENDLOOP ;
   2168     MF(6) := DISP ;
   2169     POLVAL 1 XF NV MF NV MF NV ;
   2170     SR 0 0 0 0 0 0 0 0 1 ; %SR: 2082
   2171     SR MF(1) MF(2) MF(3) MF(4) MF(5) MF(6) 0 0 1 ; %SR: 2082
   2172     ENDPROCEDURE ;
   2173   PROCEDURE SCDE ;
   2174     VARIABLE I 1 ;
   2175     IF LOV=0 ;
   2176       WRITE 6 ' *** ERROR, call OV before SCDE' ;
   2177       QUIT 0 ;
   2178       ENDIF ;
   2179     I := SQRT(1-SQR(PHSR(1))) ;
   2180     SR PHSP(1)*I 0 0 0 0 0 0 0 1 ; %SR: 2082
   2181     SR 0 PHSP(2)*I 0 0 0 0 0 0 1 ; %SR: 2082
   2182     I := SQRT(1-SQR(PHSR(2))) ;
   2183     SR 0 0 PHSP(3)*I 0 0 0 0 0 1 ; %SR: 2082
   2184     SR 0 0 0 PHSP(4)*I 0 0 0 0 1 ; %SR: 2082
   2185     SR 0 0 0 0 0 PHSP(6) 0 0 2 ; %SR: 2082
   2186     ERAY(1) := PHSP(1) ;
   2187     EMAX(1) := PHSP(1) ;
   2188     ERAY(2) := PHSR(1)*PHSP(2) ;
   2189     ERAY(3) := PHSP(3) ;
   2190     EMAX(2) := PHSP(3) ;
   2191     ERAY(4) := PHSR(2)*PHSP(4) ;
   2192     LOOP I 1 4 ;
   2193       ERSC(I) := ERAY(I) ;
   2194       ENDLOOP ;
   2195     LENV := 1 ;
   2196     ENDPROCEDURE ;
   2197   PROCEDURE SSR X Y Z ;
   2198     VARIABLE SCR 3 ;
   2199     VARIABLE I 1 ;
   2200     IF LOV=0 ;
   2201       WRITE 6 ' *** ERROR, call OV before SSR' ;
   2202       QUIT 0 ;
   2203       ENDIF ;
   2204     IF LPI=1 ;
   2205       WRITE 6 ' *** ERROR, call SSR before BP' ;
   2206       QUIT 0 ;
   2207       ENDIF ;
   2208     NSPN := NSPN + 1 ;
   2209     IF NSPN=1 ;
   2210       NSPN := 2 ;
   2211       ENDIF ;
   2212     SCR := X&Y&Z ;
   2213     IF NSPN#NRAY ;
   2214       WRITE 6 ' *** ERROR, call SSR after each matching SR' ;
   2215       QUIT 0 ;
   2216       ENDIF ;
   2217     IF CONS(SCR)=0 ;
   2218       WRITE 6 ' *** ERROR in SSR, give non zero spin vector.' ;
   2219       QUIT 0 ;
   2220       ENDIF ;
   2221     VEUNIT SCR SCR ;
   2222     LOOP I 1 3 ;
   2223       SPI(I) := SPI(I)&(SCR|I) ;
   2224       SSC(I) := SPI(I) ;
   2225       ENDLOOP ;
   2226     ENDPROCEDURE ;
   2227   PROCEDURE ER NX NA NY NB NT ND NG NZ ;
   2228     VARIABLE IX 1 ;
   2229     VARIABLE IA 1 ;
   2230     VARIABLE IY 1 ;
   2231     VARIABLE IB 1 ;
   2232     VARIABLE IT 1 ;
   2233     VARIABLE ID 1 ;
   2234     VARIABLE IG 1 ;
   2235     VARIABLE IZ 1 ;
   2236     VARIABLE VX 1 ;
   2237     VARIABLE VA 1 ;
   2238     VARIABLE VY 1 ;
   2239     VARIABLE VB 1 ;
   2240     VARIABLE VT 1 ;
   2241     VARIABLE VD 1 ;
   2242     VARIABLE VG 1 ;
   2243     VARIABLE VZ 1 ;
   2244     VARIABLE I  1 ;
   2245     VARIABLE COL 1 ND ;
   2246     IF LOV=0 ;
   2247       WRITE 6 ' *** ERROR, call OV before ER' ;
   2248       QUIT 0 ;
   2249       ENDIF ;
   2250     IF LPI=1 ;
   2251       WRITE 6 ' *** ERROR, call ER before BP' ;
   2252       QUIT 0 ;
   2253       ENDIF ;
   2254     IF LPS=0 ;
   2255       WRITE 6 ' *** ERROR, call SB before ER ' ;
   2256       QUIT 0 ;
   2257       ENDIF ;
   2258     IF INT(ND/2)#ND/2 ;
   2259       COL((ND+1)/2) := 5 ;
   2260       ENDIF ;
   2261     LOOP I 1 ND/2 ;
   2262       COL(I) := 3 ;
   2263       ENDLOOP ;
   2264     LOOP I ND ND/2+1 -1 ;
   2265       COL(I) :=  2 ;
   2266       ENDLOOP ;
   2267     LOOP IX 1 NX ;
   2268       LOOP IA 1 NA ;
   2269         LOOP IY 1 NY ;
   2270           LOOP IB 1 NB ;
   2271             LOOP IT 1 NT ;
   2272               LOOP ID 1 ND ;
   2273                 LOOP IG 1 NG ;
   2274                   LOOP IZ 1 NZ ;
   2275                     VX := PHSP(1)*(2*IX-NX-1)/MAX(1,NX-1) ; %MAX:  204

   2276                     VA := PHSP(2)*(2*IA-NA-1)/MAX(1,NA-1) ; %MAX:  204

   2277                     VY := PHSP(3)*(2*IY-NY-1)/MAX(1,NY-1) ; %MAX:  204

   2278                     VB := PHSP(4)*(2*IB-NB-1)/MAX(1,NB-1) ; %MAX:  204

   2279                     VT := PHSP(5)*(2*IT-NT-1)/MAX(1,NT-1) ; %MAX:  204

   2280                     VD := PHSP(6)*(2*ID-ND-1)/MAX(1,ND-1) ; %MAX:  204

   2281                     VG := PHSP(7)*(2*IG-NG-1)/MAX(1,NG-1) ; %MAX:  204

   2282                     VZ := PHSP(8)*(2*IZ-NZ-1)/MAX(1,NZ-1) ; %MAX:  204

   2283                     SR VX VA VY VB VT VD VG VZ COL(ID) ; %SR: 2082
   2284                     ENDLOOP ;
   2285                   ENDLOOP ;
   2286                 ENDLOOP ;
   2287               ENDLOOP ;
   2288             ENDLOOP ;
   2289           ENDLOOP ;
   2290         ENDLOOP ;
   2291       ENDLOOP ;
   2292     ENDPROCEDURE ;
   2293   PROCEDURE PR IU ;
   2294     VARIABLE I 1 ;
   2295     LOOP I 1 8 ;
   2296       WRITE IU RAY(I) ;
   2297       ENDLOOP ;
   2298     ENDPROCEDURE ;
   2299   PROCEDURE PRAY IU ;
   2300     VARIABLE NR 1 ;
   2301     VARIABLE STR 150 ;
   2302     VARIABLE I 1 ;
   2303     VARIABLE J 1 ;
   2304     NR := LENGTH(RAY(1)) ;
   2305     IF NR=1 ;
   2306       NR := 0 ;
   2307       ENDIF ;
   2308     WRITE IU '# number of rays:'&SF(NR,'(I8)')&'  (including the refer
                  ence)' ; %SF:  285
   2309     IF NR>0 ;
   2310       WRITE IU ('#   ray              X              A              Y 
                               B'&         '              T              D    
                            G              Z'&         '    REMAIN    REMOVE')
                   ;
   2311       LOOP J 1 NR ;
   2312         I := 1 ;
   2313         STR := SF(J-1, '(I7)')&SF((RAY(I)|J),'(E15.7)') ; %SF:  285 %S
                  F:  285
   2314         LOOP I 2 8 ;
   2315           STR := STR&SF((RAY(I)|J),'(E15.7)') ; %SF:  285
   2316           ENDLOOP ;
   2317         STR := STR&SF(REMAIN|J,'(I10)')&SF(REMOVE|J,'(I10)') ; %SF:  2
                  85 %SF:  285
   2318         WRITE IU STR ;
   2319         ENDLOOP ;
   2320       ENDIF ;
   2321     ENDPROCEDURE ;
   2322   PROCEDURE WRAY IU ;
   2323     VARIABLE NR 1 ;
   2324     VARIABLE LABL 1 8 ;
   2325     VARIABLE I 1 ;
   2326     VARIABLE J 1 ;
   2327     LABL(1) := 'X' ;
   2328     LABL(2) := 'A' ;
   2329     LABL(3) := 'Y' ;
   2330     LABL(4) := 'B' ;
   2331     LABL(5) := 'T' ;
   2332     LABL(6) := 'D' ;
   2333     LABL(7) := 'G' ;
   2334     LABL(8) := 'Z' ;
   2335     NR := LENGTH(RAY(1)) ;
   2336     IF NR=1 ;
   2337       NR := 0 ;
   2338       ENDIF ;
   2339     WRITE IU '# number of rays:'&SF(NR,'(I8)')&'  (including the refer
                  ence)' ; %SF:  285
   2340     IF NR>0 ;
   2341       LOOP I 1 8 ;
   2342         WRITE IU '# '&LABL(I) ;
   2343         LOOP J 1 NR ;
   2344           WRITE IU RAY(I)|J ;
   2345           ENDLOOP ;
   2346         WRITE IU '' ;
   2347         ENDLOOP ;
   2348       WRITE IU '#   REMAIN    REMOVE' ;
   2349       LOOP J 1 NR ;
   2350         WRITE IU SF(REMAIN|J,'(I10)')&SF(REMOVE|J,'(I10)') ; %SF:  285
                   %SF:  285
   2351         ENDLOOP ;
   2352       WRITE IU '' ;
   2353       ENDIF ;
   2354     ENDPROCEDURE ;
   2355   PROCEDURE RRAY IU ;
   2356     VARIABLE STR 200 ;
   2357     VARIABLE LABL 1 8 ;
   2358     VARIABLE I 1 ;
   2359     VARIABLE J 1 ;
   2360     VARIABLE LHEAD 1 ;
   2361     VARIABLE LRR 1 ;
   2362     READ IU STR ;
   2363     NRAY := R(STR,18,25) ; %R:  279
   2364     LRR := LO(0) ;
   2365     IF NRAY>0 ;
   2366       READS IU STR ;
   2367       LHEAD := LENGTH(STR) ;
   2368       IF LHEAD>3 ;
   2369         IF (STR|((LHEAD-3)&(LHEAD)))='MOVE' ;
   2370           LRR := LO(1) ;
   2371           ENDIF ;
   2372         READ IU STR ;
   2373         LOOP I 1 8 ;
   2374           RAY(I) := R(STR,15*(I-1)+1,15*I) ; %R:  279
   2375           ENDLOOP ;
   2376         IF LRR ;
   2377           REMAIN := R(STR,121,130) ; %R:  279
   2378           REMOVE := R(STR,131,140) ; %R:  279
   2379           ENDIF ;
   2380         LOOP J 2 NRAY ;
   2381           READ IU STR ;
   2382           LOOP I 1 8 ;
   2383             RAY(I) := RAY(I)&R(STR,15*(I-1)+1,15*I) ; %R:  279
   2384             ENDLOOP ;
   2385           IF LRR ;
   2386             REMAIN := REMAIN&R(STR,121,130) ; %R:  279
   2387             REMOVE := REMOVE&R(STR,131,140) ; %R:  279
   2388             ENDIF ;
   2389           ENDLOOP ;
   2390         ELSEIF LO(1) ;
   2391         LABL(1) := 'X' ;
   2392         LABL(2) := 'A' ;
   2393         LABL(3) := 'Y' ;
   2394         LABL(4) := 'B' ;
   2395         LABL(5) := 'T' ;
   2396         LABL(6) := 'D' ;
   2397         LABL(7) := 'G' ;
   2398         LABL(8) := 'Z' ;
   2399         IF STR#('# '&LABL(1)) ;
   2400           WRITE 6 (' *** ERROR in RRAY, '&               'the wrong li
                  ne is input:') STR ;
   2401           QUIT 0 ;
   2402           ENDIF ;
   2403         LOOP I 1 8 ;
   2404           IF I>1 ;
   2405             READS IU STR ;
   2406             IF STR#('# '&LABL(I)) ;
   2407               WRITE 6 (' *** ERROR in RRAY, '&                     'th
                  e wrong line is input:') STR ;
   2408               QUIT 0 ;
   2409               ENDIF ;
   2410             ENDIF ;
   2411           READ IU STR ;
   2412           RAY(I) := STR ;
   2413           LOOP J 2 NRAY ;
   2414             READ IU STR ;
   2415             RAY(I) := RAY(I)&STR ;
   2416             ENDLOOP ;
   2417           READ IU STR ;
   2418           ENDLOOP ;
   2419         READS IU STR ;
   2420         IF STR='#   REMAIN    REMOVE' ;
   2421           LRR := LO(1) ;
   2422           READS IU STR ;
   2423           REMAIN := R(STR,1,10) ; %R:  279
   2424           REMOVE := R(STR,11,20) ; %R:  279
   2425           LOOP J 2 NRAY ;
   2426             READS IU STR ;
   2427             REMAIN := REMAIN&R(STR,1,10) ; %R:  279
   2428             REMOVE := REMOVE&R(STR,11,20) ; %R:  279
   2429             ENDLOOP ;
   2430           ENDIF ;
   2431         ENDIF ;
   2432       ENDIF ;
   2433     IF NOT(LRR) ;
   2434       REMOVE := 0*RAY(1) ;
   2435       REMAIN := 1+REMOVE ;
   2436       ENDIF ;
   2437     LOOP I 1 8 ;
   2438       RSC(I) := RAY(I) ;
   2439       ENDLOOP ;
   2440     RCOL := 1+0*RAY(1) ;
   2441     ENDPROCEDURE ;
   2442   PROCEDURE SRAY R ;
   2443     VARIABLE I 1 ;
   2444     LOOP I 1 8 ;
   2445       R(I) := RAY(I) ;
   2446       ENDLOOP ;
   2447     ENDPROCEDURE ;
   2448   PROCEDURE LRAY R ;
   2449     VARIABLE I 1 ;
   2450     NRAY := LENGTH(R(1)) ;
   2451     IF NRAY=1 ;
   2452       NRAY := 0 ;
   2453       ENDIF ;
   2454     LOOP I 1 8 ;
   2455       RAY(I) := R(I) ;
   2456       RSC(I) := R(I) ;
   2457       ENDLOOP ;
   2458     REMOVE := 0*RAY(1) ;
   2459     REMAIN := 1+REMOVE ;
   2460     RCOL := REMAIN ;
   2461     ENDPROCEDURE ;
   2462   PROCEDURE DRAY IU RAYA RAYB AC ;
   2463     VARIABLE I 1 ;
   2464     VARIABLE SCR LENGTH(RAYA(1)) ;
   2465     LOOP I 1 TWOND ;
   2466       SCR := RAYA(I)-RAYB(I) ;
   2467       IF ABS(SCR)>AC ;
   2468         WRITE IU SCR ;
   2469         ELSEIF LO(1) ;
   2470         WRITE IU '    ---' ;
   2471         ENDIF ;
   2472       ENDLOOP ;
   2473     ENDPROCEDURE ;
   2474   PROCEDURE ARAY IU ;
   2475     VARIABLE NRAY0 1 ;
   2476     VARIABLE I 1 ;
   2477     VARIABLE RANGE 2 ;
   2478     VARIABLE RAY0 NRAY+1 8 ;
   2479     VARIABLE RSC0 NRAY+1 8 ;
   2480     VARIABLE RCOL0 NRAY+1 ;
   2481     VARIABLE REMAIN0 NRAY+1 ;
   2482     VARIABLE REMOVE0 NRAY+1 ;
   2483     NRAY0 := NRAY ;
   2484     RCOL0 := RCOL ;
   2485     REMAIN0 := REMAIN ;
   2486     REMOVE0 := REMOVE ;
   2487     LOOP I 1 8 ;
   2488       RAY0(I) := RAY(I) ;
   2489       RSC0(I) := RSC(I) ;
   2490       ENDLOOP ;
   2491     RRAY IU ; %RRAY: 2355
   2492     IF NRAY=0 ;
   2493       NRAY := NRAY0 ;
   2494       LOOP I 1 8 ;
   2495         RAY(I) := RAY0(I) ;
   2496         RSC(I) := RSC0(I) ;
   2497         ENDLOOP ;
   2498       RCOL := RCOL0 ;
   2499       REMAIN := REMAIN0 ;
   2500       REMOVE := REMOVE0 ;
   2501       ELSEIF LO(1) ;
   2502       IF NRAY0>0 ;
   2503         NRAY := NRAY+NRAY0-1 ;
   2504         RANGE := 2&NRAY0 ;
   2505         LOOP I 1 8 ;
   2506           RAY(I) := RAY(I)&(RAY0(I)|RANGE) ;
   2507           RSC(I) := RSC(I)&(RSC0(I)|RANGE) ;
   2508           ENDLOOP ;
   2509         RCOL := RCOL&(RCOL0|RANGE) ;
   2510         REMAIN := REMAIN&(REMAIN0|RANGE) ;
   2511         REMOVE := REMOVE&(REMOVE0|RANGE) ;
   2512         ENDIF ;
   2513       ENDIF ;
   2514     ENDPROCEDURE ;
   2515   PROCEDURE ADDRAYS FN1 FN2 FN ;
   2516     CR ; %CR:  947
   2517     OPENF 77 FN2 'OLD' ;
   2518     RRAY 77 ; %RRAY: 2355
   2519     CLOSEF 77 ;
   2520     OPENF 77 FN1 'OLD' ;
   2521     ARAY 77 ; %ARAY: 2474
   2522     CLOSEF 77 ;
   2523     OPENF 77 FN 'UNKNOWN' ;
   2524     PRAY 77 ; %PRAY: 2299
   2525     CLOSEF 77 ;
   2526     ENDPROCEDURE ;
   2527   PROCEDURE PSPI IU ;
   2528     VARIABLE NS 1 ;
   2529     VARIABLE STR 55 ;
   2530     VARIABLE I 1 ;
   2531     VARIABLE J 1 ;
   2532     NS := LENGTH(SPI(1)) ;
   2533     IF NS=1 ;
   2534       NS := 0 ;
   2535       ENDIF ;
   2536     WRITE IU ('# number of spin vectors:'&SF(NS,'(I8)')&              
                    '  (including the reference)') ; %SF:  285
   2537     IF NS>0 ;
   2538       WRITE IU '#   vector  S_X            S_Y            S_Z' ;
   2539       LOOP J 1 NS ;
   2540         I := 1 ;
   2541         STR := SF(J-1, '(I10)')&SF((SPI(I)|J),'(E15.7)') ; %SF:  285 %
                  SF:  285
   2542         LOOP I 2 3 ;
   2543           STR := STR&SF((SPI(I)|J),'(E15.7)') ; %SF:  285
   2544           ENDLOOP ;
   2545         WRITE IU STR ;
   2546         ENDLOOP ;
   2547       ENDIF ;
   2548     ENDPROCEDURE ;
   2549   PROCEDURE WSPI IU ;
   2550     VARIABLE NS 1 ;
   2551     VARIABLE LABL 1 3 ;
   2552     VARIABLE I 1 ;
   2553     VARIABLE J 1 ;
   2554     LABL(1) := 'X' ;
   2555     LABL(2) := 'Y' ;
   2556     LABL(3) := 'Z' ;
   2557     NS := LENGTH(SPI(1)) ;
   2558     IF NS=1 ;
   2559       NS := 0 ;
   2560       ENDIF ;
   2561     WRITE IU ('# number of spin vectors:'&SF(NS,'(I8)')&              
                    '  (including the reference)') ; %SF:  285
   2562     IF NS>0 ;
   2563       LOOP I 1 3 ;
   2564         WRITE IU '# S_'&LABL(I) ;
   2565         LOOP J 1 NS ;
   2566           WRITE IU SPI(I)|J ;
   2567           ENDLOOP ;
   2568         WRITE IU '' ;
   2569         ENDLOOP ;
   2570       ENDIF ;
   2571     ENDPROCEDURE ;
   2572   PROCEDURE RSPI IU ;
   2573     VARIABLE STR 45 ;
   2574     VARIABLE LABL 1 3 ;
   2575     VARIABLE I 1 ;
   2576     VARIABLE J 1 ;
   2577     READ IU STR ;
   2578     NSPN := R(STR,26,33) ; %R:  279
   2579     IF NSPN>0 ;
   2580       READ IU STR ;
   2581       IF LENGTH(STR)>5 ;
   2582         READ IU STR ;
   2583         LOOP I 1 3 ;
   2584           SPI(I) := R(STR,15*(I-1)+1,15*I) ; %R:  279
   2585           ENDLOOP ;
   2586         LOOP J 2 NSPN ;
   2587           READ IU STR ;
   2588           LOOP I 1 3 ;
   2589             SPI(I) := SPI(I)&R(STR,15*(I-1)+1,15*I) ; %R:  279
   2590             ENDLOOP ;
   2591           ENDLOOP ;
   2592         ELSEIF TRUE ;
   2593         LABL(1) := 'X' ;
   2594         LABL(2) := 'Y' ;
   2595         LABL(3) := 'Z' ;
   2596         IF STR#('# S_'&LABL(1)) ;
   2597           WRITE 6 (' *** ERROR in RSPI, '&               'the wrong li
                  ne is input:') STR ;
   2598           QUIT 0 ;
   2599           ENDIF ;
   2600         LOOP I 1 3 ;
   2601           IF I>1 ;
   2602             READ IU STR ;
   2603             IF STR#('# S_'&LABL(I)) ;
   2604               WRITE 6 (' *** ERROR in RSPI, '&                     'th
                  e wrong line is input:') STR ;
   2605               QUIT 0 ;
   2606               ENDIF ;
   2607             ENDIF ;
   2608           READ IU STR ;
   2609           SPI(I) := STR ;
   2610           LOOP J 2 NSPN ;
   2611             READ IU STR ;
   2612             SPI(I) := SPI(I)&STR ;
   2613             ENDLOOP ;
   2614           IF I<3 ;
   2615             READ IU STR ;
   2616             ENDIF ;
   2617           ENDLOOP ;
   2618         ENDIF ;
   2619       ENDIF ;
   2620     LOOP I 1 3 ;
   2621       SSC(I) := SPI(I) ;
   2622       ENDLOOP ;
   2623     ENDPROCEDURE ;
   2624   PROCEDURE SSPI S ;
   2625     VARIABLE I 1 ;
   2626     LOOP I 1 3 ;
   2627       S(I) := SPI(I) ;
   2628       ENDLOOP ;
   2629     ENDPROCEDURE ;
   2630   PROCEDURE LSPI S ;
   2631     VARIABLE I 1 ;
   2632     NSPN := LENGTH(S(1)) ;
   2633     IF NSPN=1 ;
   2634       NSPN := 0 ;
   2635       ENDIF ;
   2636     LOOP I 1 3 ;
   2637       SPI(I) := S(I) ;
   2638       SSC(I) := S(I) ;
   2639       ENDLOOP ;
   2640     ENDPROCEDURE ;
   2641   PROCEDURE DSPI IU SA SB AC ;
   2642     VARIABLE I 1 ;
   2643     VARIABLE SCR LENGTH(SA(1)) ;
   2644     LOOP I 1 3 ;
   2645       SCR := SA(I)-SB(I) ;
   2646       IF ABS(SCR)>AC ;
   2647         WRITE IU SCR ;
   2648         ELSEIF LO(1) ;
   2649         WRITE IU '    ---' ;
   2650         ENDIF ;
   2651       ENDLOOP ;
   2652     ENDPROCEDURE ;
   2653   PROCEDURE ASPI IU ;
   2654     VARIABLE NSPN0 1 ;
   2655     VARIABLE I 1 ;
   2656     VARIABLE RANGE 2 ;
   2657     VARIABLE SPI0 NSPN+1 3 ;
   2658     VARIABLE SSC0 NSPN+1 3 ;
   2659     NSPN0 := NSPN ;
   2660     LOOP I 1 3 ;
   2661       SPI0(I) := SPI(I) ;
   2662       SSC0(I) := SSC(I) ;
   2663       ENDLOOP ;
   2664     RSPI IU ; %RSPI: 2572
   2665     IF NSPN=0 ;
   2666       NSPN := NSPN0 ;
   2667       LOOP I 1 3 ;
   2668         SPI(I) := SPI0(I) ;
   2669         SSC(I) := SSC0(I) ;
   2670         ENDLOOP ;
   2671       ELSEIF LO(1) ;
   2672       IF NSPN0>0 ;
   2673         NSPN := NSPN+NSPN0-1 ;
   2674         RANGE := 2&NSPN0 ;
   2675         LOOP I 1 3 ;
   2676           SPI(I) := SPI(I)&(SPI0(I)|RANGE) ;
   2677           SSC(I) := SSC(I)&(SSC0(I)|RANGE) ;
   2678           ENDLOOP ;
   2679         ENDIF ;
   2680       ENDIF ;
   2681     ENDPROCEDURE ;
   2682   PROCEDURE ADDSPIS FN1 FN2 FN ;
   2683     CR ; %CR:  947
   2684     OPENF 77 FN2 'OLD' ;
   2685     RSPI 77 ; %RSPI: 2572
   2686     CLOSEF 77 ;
   2687     OPENF 77 FN1 'OLD' ;
   2688     ASPI 77 ; %ASPI: 2653
   2689     CLOSEF 77 ;
   2690     OPENF 77 FN 'UNKNOWN' ;
   2691     PSPI 77 ; %PSPI: 2527
   2692     CLOSEF 77 ;
   2693     ENDPROCEDURE ;
   2694   PROCEDURE FG PIC XL XR YB YT DX DY TITLE I ;
   2695     VARIABLE N 1 ;
   2696     CLEAR PIC ;
   2697     IF I=1 ;
   2698       GRMOVE XL*1.5 YB 0 PIC ;
   2699       GRMOVE XR*1.5 YT 0 PIC ;
   2700       ENDIF ;
   2701     GRMOVE XL YB 0 PIC ;
   2702     GRDRAW XL YT 0 PIC ;
   2703     GRDRAW XR YT 0 PIC ;
   2704     GRDRAW XR YB 0 PIC ;
   2705     GRDRAW XL YB 0 PIC ;
   2706     N := INT(XR/DX) ;
   2707     IF N<0 ;
   2708       N := N-1 ;
   2709       ENDIF ;
   2710     WHILE (N*DX)>XL ;
   2711       GRMOVE N*DX YB 0 PIC ;
   2712       GRDRAW N*DX ABS(YT-YB)/100+YB 0 PIC ;
   2713       GRMOVE N*DX YT 0 PIC ;
   2714       GRDRAW N*DX -ABS(YT-YB)/100+YT 0 PIC ;
   2715       N := N-1 ;
   2716       ENDWHILE ;
   2717     N := INT(YT/DY) ;
   2718     IF N<0 ;
   2719       N := N-1 ;
   2720       ENDIF ;
   2721     WHILE (N*DY)>YB ;
   2722       GRMOVE XL N*DY 0 PIC ;
   2723       GRDRAW  ABS(XR-XL)/100+XL N*DY 0 PIC ;
   2724       GRMOVE XR N*DY 0 PIC ;
   2725       GRDRAW -ABS(XR-XL)/100+XR N*DY 0 PIC ;
   2726       N := N-1 ;
   2727       ENDWHILE ;
   2728     IF (YT>0)*(YB<0) ;
   2729       GRMOVE XL 0 0 PIC ;
   2730       GRDRAW XR 0 0 PIC ;
   2731       N := INT(XR/DX) ;
   2732       IF N<0 ;
   2733         N := N-1 ;
   2734         ENDIF ;
   2735       WHILE (N*DX)>XL ;
   2736         GRMOVE N*DX 0 0 PIC ;
   2737         GRDRAW N*DX (YT-YB)/100 0 PIC ;
   2738         N := N-1 ;
   2739         ENDWHILE ;
   2740       ENDIF ;
   2741     IF (XR>0)*(XL<0) ;
   2742       GRMOVE 0 YB 0 PIC ;
   2743       GRDRAW 0 YT 0 PIC ;
   2744       N := INT(YT/DY) ;
   2745       IF N<0 ;
   2746         N := N-1 ;
   2747         ENDIF ;
   2748       WHILE N*DY>YB ;
   2749         GRMOVE 0 N*DY 0 PIC ;
   2750         GRDRAW (XL-XR)/100 N*DY 0 PIC ;
   2751         N := N-1 ;
   2752         ENDWHILE ;
   2753       ENDIF ;
   2754     GRMOVE XL YT-(YT-YB)/10 0 PIC ;
   2755     GRCHAR TITLE PIC ;
   2756     GRMOVE 0 0 0 PIC ;
   2757     ENDPROCEDURE ;
   2758   PROCEDURE PTY X ;
   2759     IF LOV=0 ;
   2760       WRITE 6 ' *** ERROR, call OV before PTY' ;
   2761       QUIT 0 ;
   2762       ENDIF ;
   2763     IF LPI#0 ;
   2764       WRITE 6 ' --- WARNING, BP before PTY --> No effect' ;
   2765       ELSEIF TRUE ;
   2766       LPG := X ;
   2767       ENDIF ;
   2768     ENDPROCEDURE ;
   2769   PROCEDURE BP ;
   2770     VARIABLE PIC 8 ;
   2771     VARIABLE I 1 ;
   2772     VARIABLE XF 1 ;
   2773     VARIABLE YF 1 ;
   2774     VARIABLE ZF 1 ;
   2775     VARIABLE COD 1 3 ;
   2776     PROCEDURE CTR X Y Z ;
   2777       COD(1) := X ;
   2778       COD(2) := Y ;
   2779       COD(3) := Z ;
   2780       POLVAL -1 GTRA 3 COD 3 COD 3 ;
   2781       XF := COD(1) ;
   2782       YF := COD(2) ;
   2783       ZF := COD(3) ;
   2784       ENDPROCEDURE ;
   2785     PROCEDURE POS X2 Y2 PIC ;
   2786       IF LPG#0 ;
   2787         CTR X2*LPG Y2*LPG 0 ; %CTR: 2776
   2788         ELSEIF TRUE ;
   2789         XF := X2 ;
   2790         YF := Y2 ;
   2791         ZF := SPOS ;
   2792         ENDIF ;
   2793       GRMOVE ZF XF YF PIC ;
   2794       ENDPROCEDURE ;
   2795     LPI := 1 ;
   2796     CLEAR SYS ;
   2797     GRCOLR 1 SYS ;
   2798     POLVAL 101 GTRA 3 COD 3 COD 3 ;
   2799     NRAYTRA := MIN(NRAY,NRAYTRA0) ; %MIN:  207
   2800     IF NRAY>NRAYTRA0 ;
   2801       WRITE 6 (' --- WARNING in BP, only the first '&         SI(NRAYT
                  RA0)&' rays, including the reference, will be drawn') ; %SI:
                    288
   2802       ENDIF ;
   2803     RAY(1) := RAY(1)*LCB ;
   2804     LOOP I 1 NRAYTRA ;
   2805       CLEAR PIC ;
   2806       GRCOLR RCOL|I PIC ;
   2807       POS RAY(1)|I RAY(3)|I PIC ; %POS: 2785
   2808       TRA(I) := PIC ;
   2809       ENDLOOP ;
   2810     RAY(1) := RAY(1)*LCB ;
   2811     IF LENV=1 ;
   2812       CLEAR ETRA ;
   2813       GRCOLR 3 ETRA ;
   2814       POS ERAY(1) ERAY(3) ETRA ; %POS: 2785
   2815       ENDIF;
   2816     LOOP I 1 8 ;
   2817       RSC(I) := RAY(I) ;
   2818       ENDLOOP ;
   2819     LOOP I 1 4 ;
   2820       ERSC(I) := ERAY(I) ;
   2821       ENDLOOP ;
   2822     IF NSPN>0 ;
   2823       LOOP I 1 3 ;
   2824         SSC(I) := SPI(I) ;
   2825         ENDLOOP ;
   2826       ENDIF ;
   2827     ENDPROCEDURE ;
   2828   PROCEDURE EP ;
   2829     LPI := 0 ;
   2830     ENDPROCEDURE ;
   2831   PROCEDURE PP IU PHI THETA ;
   2832     VARIABLE PICLEN 1 ;
   2833     VARIABLE I 1 ;
   2834     PROCEDURE PRPI ;
   2835       VARIABLE PICTURE PICLEN ;
   2836       PICTURE := SYS ;
   2837       LOOP I 1 NRAYTRA ;
   2838         PICTURE := PICTURE&TRA(I) ;
   2839         ENDLOOP ;
   2840       IF LENV#0 ;
   2841         PICTURE := PICTURE&ETRA ;
   2842         ENDIF ;
   2843       IF LAX=2 ;
   2844         PICTURE := PICTURE&SYS0 ;
   2845         IF (PHI=0)*(THETA=0) ;
   2846           GRCHAR 'X-motion' PICTURE ;
   2847           ELSEIF (PHI=0)*(THETA=90) ;
   2848           GRCHAR 'Y-motion' PICTURE ;
   2849           ENDIF ;
   2850         ENDIF ;
   2851       GRPROJ PHI THETA PICTURE ;
   2852       WRITE IU PICTURE ;
   2853       ENDPROCEDURE ;
   2854     PICLEN := 0 ;
   2855     LOOP I 1 NRAYTRA ;
   2856       PICLEN := PICLEN + LENGTH(TRA(I)) ;
   2857       ENDLOOP ;
   2858     SVSCR ; %SVSCR:  316
   2859     PICLEN := PICLEN + LENGTH(SYS) + LENGTH(ETRA) + 200 ;
   2860     PICLEN := MAX(PICLEN,LSCR) ; %MAX:  204
   2861     SCRLEN PICLEN ;
   2862     PRPI ; %PRPI: 2834
   2863     SCRLEN LSCR ;
   2864     ENDPROCEDURE ;
   2865   PROCEDURE PPT IU TR PHI THETA ;
   2866     VARIABLE PICLEN 1 ;
   2867     PROCEDURE PRPI ;
   2868       VARIABLE PICTURE PICLEN ;
   2869       PICTURE := SYS ;
   2870       PICTURE := PICTURE&TR ;
   2871       IF NRAY>0 ;
   2872         PICTURE := PICTURE&TRA(1) ;
   2873         ENDIF ;
   2874       IF LAX=2 ;
   2875         PICTURE := PICTURE&SYS0 ;
   2876         IF (PHI=0)*(THETA=0) ;
   2877           GRCHAR 'X-motion' PICTURE ;
   2878           ELSEIF (PHI=0)*(THETA=90) ;
   2879           GRCHAR 'Y-motion' PICTURE ;
   2880           ENDIF ;
   2881         ENDIF ;
   2882       GRPROJ PHI THETA PICTURE ;
   2883       WRITE IU PICTURE ;
   2884       ENDPROCEDURE ;
   2885     SVSCR ; %SVSCR:  316
   2886     PICLEN := 2*LENGTH(TR)+LENGTH(SYS)+500 ;
   2887     PICLEN := MAX(PICLEN,LSCR) ; %MAX:  204
   2888     SCRLEN PICLEN ;
   2889     PRPI ; %PRPI: 2867
   2890     SCRLEN LSCR ;
   2891     ENDPROCEDURE ;
   2892   PROCEDURE PG I1 I2 ;
   2893     VARIABLE XA 1 ;
   2894     VARIABLE XB 1 ;
   2895     VARIABLE YA 1 ;
   2896     VARIABLE YB 1 ;
   2897     VARIABLE ZA 1 ;
   2898     VARIABLE ZB 1 ;
   2899     VARIABLE DX 1 ;
   2900     VARIABLE XC 1 ;
   2901     VARIABLE DY 1 ;
   2902     VARIABLE YC 1 ;
   2903     VARIABLE DZ 1 ;
   2904     VARIABLE ZC 1 ;
   2905     VARIABLE F 1 ;
   2906     VARIABLE LAXO 1 ;
   2907     CLEAR SYS0 ;
   2908     IF LSYS#0 ;
   2909       GRMIMA SYS XA XB YA YB ZA ZB ;
   2910       ELSEIF TRUE ;
   2911       GRMIMA TRA(1) XA XB YA YB ZA ZB ;
   2912       ENDIF ;
   2913     F := 1.2 ;
   2914     DX := XB-XA ;
   2915     DY := YB-YA ;
   2916     DZ := ZB-ZA ;
   2917     XC := (XB+XA)/2 ;
   2918     YC := (YB+YA)/2 ;
   2919     ZC := (ZB+ZA)/2 ;
   2920     IF    LPG#0 ;
   2921       DZ := MAX(DX,MAX(DY,DZ))/2*F ; %MAX:  204 %MAX:  204
   2922       DY := DZ ;
   2923       DX := DZ*1.5 ;
   2924       ELSEIF TRUE ;
   2925       DZ := DZ/2*F ;
   2926       DY := DY/2*F ;
   2927       DX := DX/2*F ;
   2928       ENDIF ;
   2929     GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2930     GRMOVE XC-DX YC-DY ZC-DZ SYS0 ;
   2931     IF    LPG#0 ;
   2932       DZ := DZ/F ;
   2933       DY := DZ ;
   2934       DX := DZ ;
   2935       ELSEIF TRUE ;
   2936       DZ := DZ/F ;
   2937       DY := DY/F ;
   2938       DX := DX/F ;
   2939       ENDIF ;
   2940     IF LAX#0 ;
   2941       GRCOLR 3 SYS0 ;
   2942       GRMOVE XC+DX YC-DY ZC-DZ SYS0 ;
   2943       GRCHAR SF(XB-XA,'(G8.2)') SYS0 ; %SF:  285
   2944       GRMOVE XC-DX YC+DY ZC-DZ SYS0 ;
   2945       GRCHAR SF(YB-YA,'(G8.2)') SYS0 ; %SF:  285
   2946       GRMOVE XC-DX YC-DY ZC+DZ SYS0 ;
   2947       GRCHAR SF(ZB-ZA,'(G8.2)') SYS0 ; %SF:  285
   2948       GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2949       ENDIF ;
   2950     LAXO := LAX ;
   2951     LAX := 2 ;
   2952     PP I1 0 0 ; %PP: 2831
   2953     PP I2 0 90 ; %PP: 2831
   2954     LAX := LAXO ;
   2955     ENDPROCEDURE ;
   2956   PROCEDURE PGE I1 I2 ;
   2957     VARIABLE XA 1 ;
   2958     VARIABLE XB 1 ;
   2959     VARIABLE YA 1 ;
   2960     VARIABLE YB 1 ;
   2961     VARIABLE ZA 1 ;
   2962     VARIABLE ZB 1 ;
   2963     VARIABLE DX 1 ;
   2964     VARIABLE XC 1 ;
   2965     VARIABLE DY 1 ;
   2966     VARIABLE YC 1 ;
   2967     VARIABLE DZ 1 ;
   2968     VARIABLE ZC 1 ;
   2969     VARIABLE LAXO 1 ;
   2970     IF LENV=0 ;
   2971       WRITE 6 ' *** ERROR, call ENVEL or SCDE before PGE' ;
   2972       QUIT 0 ;
   2973       ENDIF ;
   2974     CLEAR SYS0 ;
   2975     IF LSYS#0 ;
   2976       GRMIMA SYS XA XB YA YB ZA ZB ;
   2977       ELSEIF TRUE ;
   2978       GRMIMA TRA(1) XA XB YA YB ZA ZB ;
   2979       ENDIF ;
   2980     DX := XB-XA ;
   2981     DY := YB-YA ;
   2982     DZ := ZB-ZA ;
   2983     XC := (XB+XA)/2 ;
   2984     YC := (YB+YA)/2 ;
   2985     ZC := (ZB+ZA)/2 ;
   2986     DX := MAX(DX,MAX(DY,DZ))/2 ; %MAX:  204 %MAX:  204
   2987     DY := DX*1.2 ;
   2988     DZ := DX ;
   2989     GRMOVE XC+DY*1.5 YC+DY ZC+DY SYS0 ;
   2990     GRMOVE XC-DY*1.5 YC-DY ZC-DY SYS0 ;
   2991     GRCOLR 3 SYS0 ;
   2992     GRMOVE XC+DZ YC-DZ ZC-DZ SYS0 ;
   2993     GRCHAR SF(XB-XA,'(G8.2)') SYS0 ; %SF:  285
   2994     GRMOVE XC-DZ YC+DZ ZC-DZ SYS0 ;
   2995     GRCHAR SF(YB-YA,'(G8.2)') SYS0 ; %SF:  285
   2996     GRMOVE XC-DZ YC-DZ ZC+DZ SYS0 ;
   2997     GRCHAR SF(ZB-ZA,'(G8.2)') SYS0 ; %SF:  285
   2998     GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2999     LAXO := LAX ;
   3000     LAX := 2 ;
   3001     PPT I1 ETRA 0 0 ; %PPT: 2865
   3002     PPT I2 ETRA 0 90 ; %PPT: 2865
   3003     LAX := LAXO ;
   3004     ENDPROCEDURE ;
   3005   PROCEDURE STW I MU ALPHA BETA GAMMA ;
   3006     VARIABLE COSMU 1 ;
   3007     VARIABLE SINMU 1 ;
   3008     VARIABLE I1 1 ;
   3009     VARIABLE I2 1 ;
   3010     I1 := 2*I-1 ;
   3011     I2 := 2*I ;
   3012     COSMU := COS(MU) ;
   3013     SINMU := SIN(MU) ;
   3014     MAP(I1) := (COSMU + ALPHA*SINMU)*DD(I1) + BETA *SINMU*DD(I2) ;
   3015     MAP(I2) := (COSMU - ALPHA*SINMU)*DD(I2) - GAMMA*SINMU*DD(I1) ;
   3016     ENDPROCEDURE ;
   3017   FUNCTION SE M ;
   3018     VARIABLE I 1 ;
   3019     VARIABLE J 1 ;
   3020     VARIABLE K 1 ;
   3021     VARIABLE X NM1 ;
   3022     VARIABLE Y 1 ;
   3023     Y := -1 ;
   3024     SE := 0 ;
   3025     LOOP I 1 TWOND ;
   3026       LOOP J 1 TWOND ;
   3027         IF Y*(I-J)=1 ;
   3028           X:= Y ;
   3029           ELSEIF TRUE ;
   3030           X := 0 ;
   3031           ENDIF ;
   3032         LOOP K 2 TWOND 2 ;
   3033           X := X+DER(K-1,M(I))*DER(K,M(J))-DER(K-1,M(J))*DER(K,M(I)) ;
                   %DER:  307 %DER:  307 %DER:  307 %DER:  307
   3034           ENDLOOP ;
   3035         CO NOC-1 ; %CO:  965
   3036         SE := SE+WABS(X,WAF) ; %WABS:  304
   3037         CO NOC+1 ; %CO:  965
   3038         ENDLOOP ;
   3039       Y := -Y ;
   3040       ENDLOOP ;
   3041     SE := SE/TWOND/TWOND ;
   3042     ENDFUNCTION ;
   3043   FUNCTION OE A ;
   3044     VARIABLE X NM1 ;
   3045     VARIABLE I 1 ;
   3046     VARIABLE J 1 ;
   3047     VARIABLE K 1 ;
   3048     OE := 0 ;
   3049     LOOP I 1 3 ;
   3050       LOOP J 1 3 ;
   3051         IF I=J ;
   3052           X := -1 ;
   3053           ELSEIF TRUE ;
   3054           X :=  0 ;
   3055           ENDIF ;
   3056         LOOP K 1 3 ;
   3057           X := X+A(I,K)*A(J,K) ;
   3058           ENDLOOP ;
   3059         OE := OE + WABS(X, WAF) ; %WABS:  304
   3060         ENDLOOP ;
   3061       ENDLOOP ;
   3062     X := A(1,1)*(A(2,2)*A(3,3)-A(3,2)*A(2,3))-           A(1,2)*(A(2,1
                  )*A(3,3)-A(3,1)*A(2,3))+           A(1,3)*(A(2,1)*A(3,2)-A(3
                  ,1)*A(2,2)) ;
   3063     OE := OE/9+WABS(X-1,WAF) ; %WABS:  304
   3064     ENDFUNCTION ;
   3065   PROCEDURE LFM MF C M F IT ;
   3066     VARIABLE NOM 1 ;
   3067     VARIABLE I 1 ;
   3068     VARIABLE J 1 ;
   3069     VARIABLE K 1 ;
   3070     VARIABLE H1 1 ;
   3071     VARIABLE H2 1 ;
   3072     VARIABLE H3 1 ;
   3073     VARIABLE NF 1 ;
   3074     NOM := NOC ;
   3075     IF ABS(IT)=1 ;
   3076       NF := 1 ;
   3077       ELSEIF ABS(IT)=2 ;
   3078       NF := NOM-1 ;
   3079       ELSEIF ABS(IT)=3 ;
   3080       NF := INT(LOG(NOC-1)/LOG(2))+1 ;
   3081       ELSEIF TRUE ;
   3082       WRITE 6 ' *** ERROR in LFM, wrong mode' ;
   3083       QUIT 0 ;
   3084       ENDIF ;
   3085     CO NOM+1 ; %CO:  965
   3086     H1 := 1 ;
   3087     H2 := 0 ;
   3088     H3 := 1 ;
   3089     LOOP I 1 TWOND ;
   3090       IF IT=1 ;
   3091         MF(I) := LEXP(F,DD(I)) ; %LEXP:  546
   3092         ELSEIF IT=-1 ;
   3093         MF(I) := LEXP(F,M(I)) ; %LEXP:  546
   3094         ELSEIF IT>1 ;
   3095         MF(I) := LEXP(F(NF),DD(I)) ; %LEXP:  546
   3096         H1 := NF-1 ;
   3097         H2 := 1 ;
   3098         H3 := -1 ;
   3099         ELSEIF IT<-1 ;
   3100         MF(I) := LEXP(F(1),M(I)) ; %LEXP:  546
   3101         H1 := 2 ;
   3102         H2 := NF ;
   3103         H3 := 1 ;
   3104         ENDIF ;
   3105       LOOP J H1 H2 H3 ;
   3106         MF(I) := LEXP(F(J),MF(I)) ; %LEXP:  546
   3107         ENDLOOP ;
   3108       ENDLOOP ;
   3109     CO NOM ; %CO:  965
   3110     IF IT>0 ;
   3111       ANM MF M MF ; %ANM: 1563
   3112       ENDIF ;
   3113     LOOP J 1 TWOND ;
   3114       MF(J) := MF(J) + C(J) ;
   3115       ENDLOOP ;
   3116     ENDPROCEDURE ;
   3117   PROCEDURE MLF MF C M F IT ;
   3118     VARIABLE P NM1 NOC-1 ;
   3119     VARIABLE IE 1 ;
   3120     VARIABLE L NM1 TWOND ;
   3121     VARIABLE NL NM1 TWOND ;
   3122     VARIABLE PL NM1 ;
   3123     VARIABLE SN NM1 NV ;
   3124     VARIABLE N NM1 NV ;
   3125     VARIABLE FF NM1 ;
   3126     VARIABLE NF 1 ;
   3127     VARIABLE I 1 ;
   3128     VARIABLE J 1 ;
   3129     VARIABLE K 2 ;
   3130     VARIABLE NOM 1 ;
   3131     PROCEDURE PBO J I PL ;
   3132       VARIABLE A 1 2^(I-1) I ;
   3133       VARIABLE B 1 I 2 ;
   3134       VARIABLE Z1 1 ;
   3135       VARIABLE Z2 1 ;
   3136       VARIABLE Z3 1 ;
   3137       VARIABLE Z4 1 ;
   3138       VARIABLE Z5 1 ;
   3139       VARIABLE NEN 1 ;
   3140       VARIABLE PH NM1 ;
   3141       Z1 := 1 ;
   3142       A(1,1) := I ;
   3143       B(1,1) := 1 ;
   3144       B(1,2) := 1 ;
   3145       PL := 0 ;
   3146       NEN := 1 ;
   3147       LOOP Z2 2 I ;
   3148         NEN := NEN*Z2 ;
   3149         B(Z2,1) := Z1 + 1 ;
   3150         LOOP Z3 1 I-Z2+1 ;
   3151           LOOP Z4 0 B(Z2-1,2)-1 ;
   3152             IF (A(B(Z2-1,1)+Z4,1)-Z3)>0 ;
   3153               Z1 := Z1 + 1 ;
   3154               A(Z1,1) := Z3 ;
   3155               A(Z1,2) := A(B(Z2-1,1)+Z4,1)-Z3 ;
   3156               LOOP Z5 2 Z2-1 ;
   3157                 A(Z1,Z5+1) := A(B(Z2-1,1)+Z4,Z5) ;
   3158                 ENDLOOP ;
   3159               PH := PB(P(A(Z1,Z2)),DD(J)) ; %PB:  539
   3160               LOOP Z5 Z2-1 1 -1 ;
   3161                 PH := PB(P(A(Z1,Z5)),PH) ; %PB:  539
   3162                 ENDLOOP ;
   3163               PL := PL + PH/NEN ;
   3164               ENDIF ;
   3165             ENDLOOP ;
   3166           ENDLOOP ;
   3167         B(Z2,2) := Z1 - B(Z2,1) + 1 ;
   3168         ENDLOOP ;
   3169       ENDPROCEDURE ;
   3170     NOM := NOC ;
   3171     IF ABS(IT)=1 ;
   3172       NF := 1 ;
   3173       ELSEIF ABS(IT)=2 ;
   3174       NF := NOM-1 ;
   3175       ELSEIF ABS(IT)=3 ;
   3176       NF := INT(LOG(NOC-1)/LOG(2))+1 ;
   3177       ELSEIF TRUE ;
   3178       WRITE 6 ' *** ERROR in MLF, wrong mode' ;
   3179       QUIT 0 ;
   3180       ENDIF ;
   3181     IF TWOND=NV ;
   3182       LOOP I 1 TWOND ;
   3183         C(I) := CONS(MF(I)) ;
   3184         N(I) := MF(I)-C(I) ;
   3185         ENDLOOP ;
   3186       CO 1 ; %CO:  965
   3187       LOOP I 1 TWOND ;
   3188         M(I) := N(I) ;
   3189         ENDLOOP ;
   3190       MI M SN NV IE NOC NV NM1 ; %MI:  430
   3191       CO NOM ; %CO:  965
   3192       ELSEIF TRUE ;
   3193       LOOP I 1 TWOND ;
   3194         SN(I) := 0*DD(I) ;
   3195         M(I) := 0 ;
   3196         ENDLOOP ;
   3197       LOOP I TWOND+1 NV ;
   3198         SN(I) := DD(I) ;
   3199         ENDLOOP ;
   3200       POLVAL 1 MF TWOND SN NV C TWOND ;
   3201       LOOP I 1 TWOND ;
   3202         N(I) := MF(I)-C(I) ;
   3203         LOOP J 1 TWOND ;
   3204           L(J) := DER(J,N(I)) ; %DER:  307
   3205           ENDLOOP ;
   3206         POLVAL 1 L TWOND SN NV L TWOND ;
   3207         LOOP J 1 TWOND ;
   3208           M(I) := M(I)+L(J)*DD(J) ;
   3209           ENDLOOP ;
   3210         ENDLOOP ;
   3211       LOOP I 1 TWOND ;
   3212         SN(I) := M(I) ;
   3213         ENDLOOP ;
   3214       MI SN SN NV IE NOC NV NM1 ; %MI:  430
   3215       ENDIF ;
   3216     IF IE#0 ;
   3217       WRITE 6 ' *** ERROR in MLF, map singular' ;
   3218       QUIT 0 ;
   3219       ENDIF ;
   3220     IF ABS(IT)=1 ;
   3221       IF IT=1 ;
   3222         POLVAL 1 N TWOND SN NV SN TWOND ;
   3223         ELSEIF IT=-1 ;
   3224         LOOP I TWOND+1 NV ;
   3225           N(I) := DD(I) ;
   3226           ENDLOOP ;
   3227         POLVAL 1 SN TWOND N NV SN TWOND ;
   3228         ENDIF ;
   3229       LOOP I 1 TWOND ;
   3230         N(I) := SN(I) - DD(I) ;
   3231         L(I) := 0*DD(I) ;
   3232         ENDLOOP ;
   3233       LOOP I 2 NOM ;
   3234         LOOP J 1 TWOND ;
   3235           PBO J I-1 PL ; %PBO: 3131
   3236           CO I ; %CO:  965
   3237           NL(J) := N(J) - L(J) - PL ;
   3238           ENDLOOP ;
   3239         LOOP J 1 TWOND 2 ;
   3240           SN(J) := NL(J+1) ;
   3241           SN(J+1) := -NL(J) ;
   3242           ENDLOOP ;
   3243         LOOP J 1 TWOND ;
   3244           L(J) := N(J) ;
   3245           ENDLOOP ;
   3246         CO I+1 ; %CO:  965
   3247         POTI SN TWOND FF ; %POTI:  586
   3248         P(I-1) := FF ;
   3249         ENDLOOP ;
   3250       CO NOM+1 ; %CO:  965
   3251       F := 0*DD(1) ;
   3252       LOOP J 1 NOM-1 ;
   3253         F := F + P(J) ;
   3254         ENDLOOP ;
   3255       CO NOM ; %CO:  965
   3256       ELSEIF IT>1 ;
   3257       POLVAL 1 N TWOND SN NV N TWOND ;
   3258       LOOP I 1 NF ;
   3259         IF IT=2 ;
   3260           K := I+1 ;
   3261           ELSEIF IT=3 ;
   3262           K := MIN(NOM,2^I) ; %MIN:  207
   3263           ENDIF ;
   3264         CO K ; %CO:  965
   3265         LOOP J 1 TWOND 2 ;
   3266           SN(J) := N(J+1)-DD(J+1) ;
   3267           SN(J+1) := -N(J)+DD(J) ;
   3268           ENDLOOP ;
   3269         CO K+1 ; %CO:  965
   3270         POTI SN TWOND FF ; %POTI:  586
   3271         F(I) := FF ;
   3272         CO NOM+1 ; %CO:  965
   3273         LOOP J 1 TWOND ;
   3274           N(J) := LEXP(-FF,N(J)) ; %LEXP:  546
   3275           ENDLOOP ;
   3276         ENDLOOP ;
   3277       CO NOM ; %CO:  965
   3278       ELSEIF IT<-1 ;
   3279       LOOP I TWOND+1 NV ;
   3280         N(I) := DD(I) ;
   3281         ENDLOOP ;
   3282       POLVAL 1 SN TWOND N NV N TWOND ;
   3283       LOOP J TWOND+1 NV ;
   3284         N(J) := DD(J) ;
   3285         ENDLOOP ;
   3286       LOOP I 1 NF ;
   3287         IF IT=-2 ;
   3288           K := I+1 ;
   3289           ELSEIF IT=-3 ;
   3290           K := MIN(NOM,2^I) ; %MIN:  207
   3291           ENDIF ;
   3292         CO K ; %CO:  965
   3293         LOOP J 1 TWOND 2 ;
   3294           SN(J) := N(J+1)-DD(J+1) ;
   3295           SN(J+1) := -N(J)+DD(J) ;
   3296           ENDLOOP ;
   3297         CO K+1 ; %CO:  965
   3298         POTI SN TWOND FF ; %POTI:  586
   3299         F(I) := FF ;
   3300         CO NOM+1 ; %CO:  965
   3301         LOOP J 1 TWOND ;
   3302           SN(J) := LEXP(-FF,DD(J)) ; %LEXP:  546
   3303           ENDLOOP ;
   3304         CO NOM ; %CO:  965
   3305         POLVAL 1 SN TWOND N NV N TWOND ;
   3306         ENDLOOP ;
   3307       ENDIF ;
   3308     ENDPROCEDURE ;
   3309   PROCEDURE LFLF C M F P IA IT ;
   3310     VARIABLE ML NM1 NV ;
   3311     LFM ML C M F IA ; %LFM: 3065
   3312     MLF ML C M P IT ; %MLF: 3117
   3313     ENDPROCEDURE ;
   3314   PROCEDURE GFM MM F IT ;
   3315     VARIABLE N NM1 NV ;
   3316     VARIABLE M NM1 NV ;
   3317     VARIABLE I 1 ;
   3318     IF ABS(IT-1.5)=0.5 ;
   3319       LOOP I 1 TWOND 2 ;
   3320         M(I) := DD(I) ;
   3321         M(I+1) := DER(I,F) ; %DER:  307
   3322         ENDLOOP ;
   3323       ELSEIF ABS(IT-3.5)=0.5 ;
   3324       LOOP I 1 TWOND 2 ;
   3325         M(I) := -DER(I,F) ; %DER:  307
   3326         M(I+1) := DD(I) ;
   3327         ENDLOOP ;
   3328       ELSEIF TRUE ;
   3329       WRITE 6 ' *** ERROR in GFM, wrong type' ;
   3330       QUIT 0 ;
   3331       ENDIF ;
   3332     LOOP I TWOND+1 NV ;
   3333       M(I) := DD(I) ;
   3334       ENDLOOP ;
   3335     MI M N NV I NOC NV NM1 ; %MI:  430
   3336     IF I#0 ;
   3337       WRITE 6 ' *** ERROR in GFM, no inverse' ;
   3338       QUIT 0 ;
   3339       ENDIF ;
   3340     IF ABS(IT-2)=1 ;
   3341       LOOP I 1 TWOND 2 ;
   3342         M(I) := DD(I+1) ;
   3343         M(I+1) := -DER(I+1,F) ; %DER:  307
   3344         ENDLOOP ;
   3345       ELSEIF ABS(IT-3)=1 ;
   3346       LOOP I 1 TWOND 2 ;
   3347         M(I) := DER(I+1,F) ; %DER:  307
   3348         M(I+1) := DD(I+1) ;
   3349         ENDLOOP ;
   3350       ENDIF ;
   3351     ANM M N MM ; %ANM: 1563
   3352     ENDPROCEDURE ;
   3353   PROCEDURE MGF MM F IT IE ;
   3354     PROCEDURE MGFF IE ;
   3355       VARIABLE N NM1 NV ;
   3356       VARIABLE M NM1 NV ;
   3357       VARIABLE AM 1 ND ND ;
   3358       VARIABLE A 1 4 ;
   3359       VARIABLE B 1 4 ;
   3360       VARIABLE C 1 ;
   3361       VARIABLE D 1 ;
   3362       VARIABLE I 1 ;
   3363       VARIABLE J 1 ;
   3364       VARIABLE K 1 ;
   3365       PROCEDURE SUBDET K D ;
   3366         LOOP I 1 ND ;
   3367           LOOP J 1 ND ;
   3368             AM(I,J) := COEF(MM(2*I-A(K)),2*J-B(K)) ; %COEF:  301
   3369             ENDLOOP ;
   3370           ENDLOOP ;
   3371         LDET AM ND ND D ;
   3372         ENDPROCEDURE ;
   3373       IE := 0 ;
   3374       C := 0 ;
   3375       LOOP I 1 TWOND ;
   3376         C := C+ABS(CONS(MM(I))) ;
   3377         ENDLOOP ;
   3378       IF C#0 ;
   3379         WRITE 6 ' *** ERROR in MGF, map not 0-0 ' ;
   3380         QUIT 0 ;
   3381         ENDIF ;
   3382       A(1) := 1 ;
   3383       A(2) := 0 ;
   3384       A(3) := 1 ;
   3385       A(4) := 0 ;
   3386       B(1) := 0 ;
   3387       B(2) := 0 ;
   3388       B(3) := 1 ;
   3389       B(4) := 1 ;
   3390       IF IT>0 ;
   3391         SUBDET IT C ; %SUBDET: 3365
   3392         ELSEIF IT=-1 ;
   3393         LOOP K 1 4 ;
   3394           SUBDET K D ; %SUBDET: 3365
   3395           IF C<ABS(D) ;
   3396             C := ABS(D) ;
   3397             IT := K ;
   3398             ENDIF ;
   3399           ENDLOOP ;
   3400         ELSEIF TRUE ;
   3401         WRITE 6 ' *** ERROR in MGF, wrong type' ;
   3402         QUIT 0 ;
   3403         ENDIF ;
   3404       IF C=0 ;
   3405         IE := 1 ;
   3406         ELSEIF C#0 ;
   3407         LOOP I 1 TWOND 2 ;
   3408           N(I) := DD(I+B(IT)) ;
   3409           N(I+1) := MM(I+1-A(IT)) ;
   3410           ENDLOOP ;
   3411         LOOP I TWOND+1 NV ;
   3412           N(I) := DD(I) ;
   3413           ENDLOOP ;
   3414         MI N M NV IE NOC NV NM1 ; %MI:  430
   3415         LOOP I 1 TWOND 2 ;
   3416           N(I) := (1-2*B(IT))*DD(I+1-B(IT)) ;
   3417           N(I+1) := (1-2*A(IT))*MM(I+A(IT)) ;
   3418           ENDLOOP ;
   3419         ANM N M M ; %ANM: 1563
   3420         CO NOC+1 ; %CO:  965
   3421         POTI M TWOND F ; %POTI:  586
   3422         CO NOC-1 ; %CO:  965
   3423         ENDIF ;
   3424       ENDPROCEDURE ;
   3425     PROCEDURE BESTGF IE ;
   3426       VARIABLE NAP NM1 NV ;
   3427       VARIABLE I 1 ;
   3428       VARIABLE J 1 ;
   3429       VARIABLE DIF 1 ;
   3430       VARIABLE G NM1 ;
   3431       VARIABLE ER 1 ;
   3432       IE := 0 ;
   3433       ER := 1E36 ;
   3434       I := 0 ;
   3435       LOOP IT 1 4 ;
   3436         MGFF J ; %MGFF: 3354
   3437         IF J=0 ;
   3438           GFM NAP F IT ; %GFM: 3314
   3439           DIF := 0 ;
   3440           LOOP J 1 TWOND ;
   3441             DIF := DIF+ABS(MM(J)-NAP(J)) ;
   3442             ENDLOOP ;
   3443           IF DIF<ER ;
   3444             I := IT ;
   3445             CO NOC+1 ; %CO:  965
   3446             G := F ;
   3447             CO NOC-1 ; %CO:  965
   3448             ER := DIF ;
   3449             ENDIF ;
   3450           ENDIF ;
   3451         ENDLOOP ;
   3452       IF I=0 ;
   3453         IE := 1 ;
   3454         ENDIF ;
   3455       IT := I ;
   3456       CO NOC+1 ; %CO:  965
   3457       F := G ;
   3458       CO NOC-1 ; %CO:  965
   3459       ENDPROCEDURE ;
   3460     IF IT=-2 ;
   3461       BESTGF IE ; %BESTGF: 3425
   3462       ELSEIF TRUE ;
   3463       MGFF IE ; %MGFF: 3354
   3464       ENDIF ;
   3465     ENDPROCEDURE ;
   3466   PROCEDURE SY MM ;
   3467     VARIABLE IT 1 ;
   3468     VARIABLE IE 1 ;
   3469     VARIABLE F NM1 ;
   3470     IT := -1 ;
   3471     MGF MM F IT IE ; %MGF: 3353
   3472     GFM MM F IT ; %GFM: 3314
   3473     ENDPROCEDURE ;
   3474   PROCEDURE BDEP NAP LGH B ;
   3475     VARIABLE IAP NM1 NV ;
   3476     VARIABLE NT NM1 ;
   3477     VARIABLE NC 1 ;
   3478     VARIABLE F1 NM1 ;
   3479     VARIABLE I 1 ;
   3480     VARIABLE BW NM2 ;
   3481     VARIABLE ZW 2 ;
   3482     VARIABLE AW 2 ;
   3483     VARIABLE NU1 1 ;
   3484     VARIABLE NU2 1 ;
   3485     VARIABLE MC 1 ;
   3486     VARIABLE PW NM2 ;
   3487     FUNCTION WW Q ;
   3488       IF CONS(Q)#0 ;
   3489         WW := Q/CONS(Q) ;
   3490         ELSEIF TRUE ;
   3491         WW := 1 ;
   3492         ENDIF ;
   3493       ENDFUNCTION ;
   3494     NU1 := MIN(TWOND,4) ; %MIN:  207
   3495     NU2 := MIN(TWOND,5) ; %MIN:  207
   3496     MC := CONS(M0) ;
   3497     BW := WW(B) ; %WW: 3487
   3498     ZW := WW(Z0) ; %WW: 3487
   3499     AW := WW(LGH) ; %WW: 3487
   3500     PW := WW(P0) ; %WW: 3487
   3501     NC := CONS(ETA) ;
   3502     BW := BW*ZW*AW/PW ;
   3503     LOOP I 1 NU1 2 ;
   3504       IAP(I) := DD(I)/AW ;
   3505       IAP(I+1) := DD(I+1)/PW ;
   3506       ENDLOOP ;
   3507     LOOP I NU1+1 NV ;
   3508       IAP(I) := DD(I) ;
   3509       ENDLOOP ;
   3510     IF ND>2 ;
   3511       NAP(6) := DD(6) ;
   3512       ENDIF ;
   3513     I := TWOND+1 ;
   3514     IF TYPE(B)=TYPE(DD(1)) ;
   3515       WHILE CONS(DER(I,B))=0 ; %DER:  307
   3516         I := I+1 ;
   3517         ENDWHILE ;
   3518       ENDIF ;
   3519     IAP(I) := 0*IAP(1)+BW-1 ;
   3520     POLVAL 1 NAP NU2 IAP NV NAP NU2 ;
   3521     LOOP I 1 NU1 2 ;
   3522       NAP(I) := NAP(I)*AW ;
   3523       NAP(I+1) := NAP(I+1)*PW ;
   3524       ENDLOOP ;
   3525     IF ND=3 ;
   3526       F1 := CONS(V0)/V0 ;
   3527       NAP(5) := DD(5)+LGH*(1+NC)/(2+NC)*(1-F1)+F1*AW*(NAP(5)-DD(5)) ;
   3528       ENDIF ;
   3529     ENDPROCEDURE ;
   3530   PROCEDURE EDEP NAP LGH B ;
   3531     VARIABLE IAP NM1 NV ;
   3532     VARIABLE NT NM1 ;
   3533     VARIABLE NC 1 ;
   3534     VARIABLE F1 NM1 ;
   3535     VARIABLE I 1 ;
   3536     VARIABLE BW 2 ;
   3537     VARIABLE ZW 2 ;
   3538     VARIABLE AW 2 ;
   3539     VARIABLE NU1 1 ;
   3540     VARIABLE NU2 1 ;
   3541     VARIABLE MC 1 ;
   3542     FUNCTION WW Q ;
   3543       IF CONS(Q)#0 ;
   3544         WW := Q/CONS(Q) ;
   3545         ELSEIF TRUE ;
   3546         WW := 1 ;
   3547         ENDIF ;
   3548       ENDFUNCTION ;
   3549     NU1 := MIN(TWOND,4) ; %MIN:  207
   3550     NU2 := MIN(TWOND,5) ; %MIN:  207
   3551     MC := CONS(M0) ;
   3552     BW := WW(B) ; %WW: 3542
   3553     ZW := WW(Z0) ; %WW: 3542
   3554     AW := WW(LGH) ; %WW: 3542
   3555     NC := CONS(ETA) ;
   3556     NT := SQRT(1+SQR(P0/MC/AMUMEV/BW/ZW/AW))-1 ;
   3557     LOOP I 1 NU1 2 ;
   3558       IAP(I) := DD(I)/AW ;
   3559       NAP(I) := NAP(I)*AW ;
   3560       ENDLOOP ;
   3561     LOOP I 2 NU1 2 ;
   3562       IAP(I) := DD(I)/BW/ZW/AW ;
   3563       NAP(I) := NAP(I)*BW*ZW*AW ;
   3564       ENDLOOP ;
   3565     LOOP I NU1+1 NV ;
   3566       IAP(I) := DD(I) ;
   3567       ENDLOOP ;
   3568     IF ND<3 ;
   3569       I := TWOND+1 ;
   3570       WHILE CONS(DER(I,E0))=0 ; %DER:  307
   3571         I := I+1 ;
   3572         IF I>NV ;
   3573           WRITE 6 ' *** ERROR in EDEP, energy not parameter' ;
   3574           QUIT 0 ;
   3575           ENDIF ;
   3576         ENDWHILE ;
   3577       ELSEIF ND>2 ;
   3578       I := 6 ;
   3579       ENDIF ;
   3580     IAP(I) := 0*IAP(1)+NT/NC-1 ;
   3581     POLVAL 1 NAP NU2 IAP NV NAP NU2 ;
   3582     IF ND=3 ;
   3583       F1 := (1+ETA)/(1+NT)*M0/MC/BW/ZW/AW ;
   3584       NAP(5) := DD(5)+LGH*(1+NC)/(2+NC)*(1-F1)+F1*AW*(NAP(5)-DD(5)) ;
   3585       ENDIF ;
   3586     ENDPROCEDURE ;
   3587   PROCEDURE MCM IAP LGH ALPHA ;
   3588     VARIABLE XF NM1 NV ;
   3589     VARIABLE MF NM1 TWOND ;
   3590     VARIABLE IER 1 ;
   3591     IF ND#3 ;
   3592       WRITE 6 ' *** ERROR in MCM, dimension # 3' ;
   3593       ENDIF ;
   3594     CATR IAP IAP LGH ; %CATR: 1657
   3595     TWOND := 5 ;
   3596     FM IAP XF MF IER ; %FM: 1856
   3597     TWOND := 6 ;
   3598     ALPHA := (XF(5)-DD(5))/LGH ;
   3599     ENDPROCEDURE ;
   3600   PROCEDURE ECM IAP LGH ALPHA ;
   3601     VARIABLE XF NM1 NV ;
   3602     VARIABLE MF NM1 TWOND ;
   3603     VARIABLE IER 1 ;
   3604     IF ND#3 ;
   3605       WRITE 6 ' *** ERROR in ECM, dimension # 3' ;
   3606       ENDIF ;
   3607     TWOND := 5 ;
   3608     FM IAP XF MF IER ; %FM: 1856
   3609     TWOND := 6 ;
   3610     ALPHA := XF(5)-DD(5) ;
   3611     ENDPROCEDURE ;
   3612   PROCEDURE BM M MB A IER ;
   3613     VARIABLE I 1 ;
   3614     VARIABLE J 1 ;
   3615     VARIABLE K 1 ;
   3616     VARIABLE MM 1 NV NV ;
   3617     VARIABLE MA 1 NV NV ;
   3618     VARIABLE MI 1 NV NV ;
   3619     VARIABLE SCR NM1 NV ;
   3620     LOOP I 1 TWOND ;
   3621       LOOP J 1 TWOND ;
   3622         DAPEE M(I) J K ;
   3623         MM(I,J) := K ;
   3624         ENDLOOP ;
   3625       ENDLOOP ;
   3626     MBLOCK MM MA MI NV TWOND ;
   3627     LOOP I 1 TWOND ;
   3628       A(I) := 0 ;
   3629       SCR(I) := 0 ;
   3630       LOOP J 1 TWOND ;
   3631         A(I) := A(I) + MI(I,J)*DD(J) ;
   3632         SCR(I) := SCR(I) + MA(I,J)*DD(J) ;
   3633         ENDLOOP ;
   3634       ENDLOOP ;
   3635     ANM M SCR SCR ; %ANM: 1563
   3636     LOOP I 1 TWOND ;
   3637       MB(I) := 0 ;
   3638       LOOP J 1 TWOND ;
   3639         MB(I) := MB(I) + MI(I,J)*SCR(J) ;
   3640         ENDLOOP ;
   3641       ENDLOOP ;
   3642     ENDPROCEDURE ;
   3643   PROCEDURE GT MM F MU ALPHA BETA GAMMA R ;
   3644     VARIABLE A NMP ;
   3645     VARIABLE B NMP ;
   3646     VARIABLE C NMP ;
   3647     VARIABLE D NMP ;
   3648     VARIABLE COSMU 2*NMP ;
   3649     VARIABLE SINMU 2*NMP ;
   3650     VARIABLE DEN 2*NMP ;
   3651     VARIABLE M NM1 TWOND ;
   3652     VARIABLE I 2 ;
   3653     VARIABLE J 1 ;
   3654     VARIABLE K 1 ;
   3655     VARIABLE L 1 ;
   3656     VARIABLE DET 1 ;
   3657     PROCEDURE OUT ;
   3658       VARIABLE DUM 2*NMP ;
   3659       DUM := R(J)*SINMU ;
   3660       MU(J) := MU(J)/2/PI ;
   3661       ALPHA(J) := (A-D)/2/DUM ;
   3662       BETA(J) := B/DUM ;
   3663       GAMMA(J) := -C/DUM ;
   3664       ENDPROCEDURE ;
   3665     FM MM F M I ; %FM: 1856
   3666     IMUNIT I ;
   3667     LOOP J 1 ND ;
   3668       K := 2*J-1 ;
   3669       L := K+1 ;
   3670       DAPEP M(K) K TWOND A ;
   3671       DAPEP M(K) L TWOND B ;
   3672       DAPEP M(L) K TWOND C ;
   3673       DAPEP M(L) L TWOND D ;
   3674       DET := CONS(A)*CONS(D)-CONS(B)*CONS(C) ;
   3675       CO NOC-1 ; %CO:  965
   3676       IF DET>0 ;
   3677         R(J) := SQRT(A*D-B*C) ;
   3678         COSMU := (A+D)/2/R(J) ;
   3679         IF ABS(ABS(CONS(COSMU))-1)<DEPS ;
   3680           IF ((ABS(B)+ABS(C))=0)*(ABS(COSMU-CONS(COSMU))=0) ;
   3681             ALPHA(J) := 0 ;
   3682             BETA(J) := 1 ;
   3683             GAMMA(J) := 1 ;
   3684             IF CONS(COSMU)<0 ;
   3685               MU(J) := 1/2+0*DD(1) ;
   3686               ELSEIF TRUE ;
   3687               MU(J) := 0*DD(1) ;
   3688               ENDIF ;
   3689             ELSEIF TRUE ;
   3690             WRITE 6 ' *** ERROR in GT, unrepresentable map' ;
   3691             QUIT 0 ;
   3692             ENDIF ;
   3693           ELSEIF ABS(CONS(COSMU))>1 ;
   3694           IF CONS(COSMU)<0 ;
   3695             COSMU := - COSMU ;
   3696             DEN := PI ;
   3697             K := -1 ;
   3698             ELSEIF TRUE ;
   3699             DEN := 0 ;
   3700             K := 1 ;
   3701             ENDIF ;
   3702           SINMU := SQRT(SQR(COSMU)-1) ;
   3703           MU(J) := DEN+I*LOG(COSMU+SINMU) ;
   3704           SINMU := K*I*SINMU ;
   3705           OUT ; %OUT: 3657
   3706           ELSEIF ABS(CONS(COSMU))<1 ;
   3707           MU(J) := ACOS(COSMU) ;
   3708           IF CONS(B)<0 ;
   3709             MU(J) := 2*PI-MU(J) ;
   3710             ENDIF ;
   3711           SINMU := SIN(MU(J)) ;
   3712           OUT ; %OUT: 3657
   3713           ENDIF ;
   3714         ELSEIF DET=0 ;
   3715         IF (ABS(A)=0)*(ABS(B)=0)*(ABS(C)=0)*(ABS(D)=0) ;
   3716           R(J) := 0 ;
   3717           MU(J) := 0 ;
   3718           ALPHA(J) := 0 ;
   3719           BETA(J) := 1 ;
   3720           GAMMA(J) := 1 ;
   3721           ELSEIF TRUE ;
   3722           WRITE 6 ' *** ERROR in GT, DET=0' ;
   3723           QUIT 0 ;
   3724           ENDIF ;
   3725         ELSEIF DET<0 ;
   3726         DEN := SQRT(-(A*D-B*C)) ;
   3727         R(J) := I*DEN ;
   3728         COSMU := (A+D)/2/DEN ;
   3729         IF CONS(COSMU)<0 ;
   3730           COSMU := - COSMU ;
   3731           K := -1 ;
   3732           ELSEIF TRUE ;
   3733           K := 1 ;
   3734           ENDIF ;
   3735         SINMU := SQRT(SQR(COSMU)+1) ;
   3736         MU(J) := PI/2+K*I*LOG(SINMU+COSMU) ;
   3737         OUT ; %OUT: 3657
   3738         ENDIF ;
   3739       CO NOC+1 ; %CO:  965
   3740       ENDLOOP ;
   3741     ENDPROCEDURE ;
   3742   PROCEDURE DANF M MN MA IMA RS EPS ;
   3743     VARIABLE J 1 ;
   3744     VARIABLE K 1 ;
   3745     VARIABLE L 2 ;
   3746     VARIABLE NOM 1 ;
   3747     VARIABLE IER 1 ;
   3748     VARIABLE XF 100 NV ;
   3749     VARIABLE T 2*NM1 ;
   3750     VARIABLE F 100 TWOND ;
   3751     VARIABLE MUU 100 ND ;
   3752     VARIABLE AA 100 ND ;
   3753     VARIABLE BB 100 ND ;
   3754     VARIABLE GG 100 ND ;
   3755     VARIABLE RR 100 ND ;
   3756     VARIABLE MU 2 ;
   3757     VARIABLE A 2 ;
   3758     VARIABLE B 2 ;
   3759     VARIABLE D 2 ;
   3760     VARIABLE PHI 1 TWOND ;
   3761     VARIABLE R 1 TWOND ;
   3762     VARIABLE M1 2*NM1 NV ;
   3763     VARIABLE M2 2*NM1 NV ;
   3764     VARIABLE M3 2*NM1 NV ;
   3765     VARIABLE I 2 ;
   3766     IMUNIT I ;
   3767     NOM := NOC ;
   3768     DSET 1E-14 ; %DSET:  703
   3769     LWNDANF := 0 ;
   3770     FM M  XF MN IER ; %FM: 1856
   3771     BM MN MN M1 IER ; %BM: 3612
   3772     IF IMA#0 ;
   3773       LOOP J 1 TWOND ;
   3774         MA(J) := -XF(J) + DD(J) ;
   3775         ENDLOOP ;
   3776       POLVAL 1 M1 TWOND MA TWOND MA TWOND ;
   3777       ENDIF ;
   3778     GT MN F MUU AA BB GG RR ; %GT: 3643
   3779     LOOP J 1 ND ;
   3780       K:= 2*J-1 ;
   3781       L := K + 1 ;
   3782       MU := CONS(MUU(J))*2*PI ;
   3783       A := CONS(AA(J)) ;
   3784       B := CONS(BB(J)) ;
   3785       D := CONS(RR(J)) ;
   3786       IF TYPE(MU)=TYPE(1) ;
   3787         PHI(K) := MU ;
   3788         PHI(L) := -MU ;
   3789         R(K) := D ;
   3790         R(L) := D ;
   3791         M2(K) :=  (     I*B       *DD(K) +    I*B  *DD(L) )/SQRT(2*I*B
                  ) ;
   3792         M2(L) :=  ( (-1-I*A)      *DD(K) + (1-I*A) *DD(L) )/SQRT(2*I*B
                  ) ;
   3793         M1(K) :=  ( ( 1-I*A)/2/I/B*DD(K) -      1/2*DD(L) )*SQRT(2*I*B
                  ) ;
   3794         M1(L) :=  ( ( 1+I*A)/2/I/B*DD(K) +      1/2*DD(L) )*SQRT(2*I*B
                  ) ;
   3795         ELSEIF TRUE ;
   3796         PHI(K) := 0 ;
   3797         PHI(L) := 0 ;
   3798         MU := IMAG(MU) ;
   3799         IF IMAG(D)#0 ;
   3800           WRITE 6 '$$$ ERROR DANF ' ;
   3801           ENDIF ;
   3802         D := REAL(D) ;
   3803         R(K) := D*EXP(-MU) ;
   3804         R(L) := D*EXP(MU) ;
   3805         M2(K) := DD(K)+0*I ;
   3806         M2(L) := DD(L)+0*I ;
   3807         M1(K) := DD(K)+0*I ;
   3808         M1(L) := DD(L)+0*I ;
   3809         ENDIF ;
   3810       ENDLOOP ;
   3811     ANM MN M2 MN ; %ANM: 1563
   3812     CPOLVAL 1 M1 TWOND MN TWOND MN TWOND ; %CPOLVAL:  555
   3813     IF IMA#0 ;
   3814       CPOLVAL 0 M1 TWOND MA TWOND MA TWOND ; %CPOLVAL:  555
   3815       ENDIF ;
   3816     NOM := NOC ;
   3817     RS := 0 ;
   3818     LOOP J 2 NOM ;
   3819       LOOP K 1 TWOND ;
   3820         CO J ; %CO:  965
   3821         CDNFDA MN(K) R PHI K TWOND EPS T ;
   3822         M3(K) := -T ;
   3823         CO NOM ; %CO:  965
   3824         IF (K/2)=NINT(K/2) ;
   3825           RS := RS + T*DD(K-1) ;
   3826           ENDIF ;
   3827         ENDLOOP ;
   3828       LOOP K 1 TWOND ;
   3829         CDFLO M3 DD(K)+0*I T TWOND ;
   3830         M1(K) := T ;
   3831         ENDLOOP ;
   3832       LOOP K 1 TWOND ;
   3833         M3(K) := -M3(K) ;
   3834         ENDLOOP ;
   3835       LOOP K 1 TWOND ;
   3836         CDFLO M3 DD(K)+0*I T TWOND ;
   3837         M2(K) := T ;
   3838         ENDLOOP ;
   3839       LOOP K TWOND+1 NV ;
   3840         M1(K) := DD(K)+0*M1(1) ;
   3841         M2(K) := DD(K) ;
   3842         ENDLOOP ;
   3843       CPOLVAL 1 MN TWOND M1 NV M3 TWOND ; %CPOLVAL:  555
   3844       LOOP K TWOND+1 NV ;
   3845         M3(K) := M1(K) ;
   3846         ENDLOOP ;
   3847       CPOLVAL 1 M2 TWOND M3 NV MN TWOND ; %CPOLVAL:  555
   3848       IF IMA#0 ;
   3849         LOOP K 1 TWOND ;
   3850           M3(K) := MA(K) ;
   3851           ENDLOOP ;
   3852         LOOP K TWOND+1 NV ;
   3853           M3(K) := DD(K)+0*M3(1) ;
   3854           ENDLOOP ;
   3855         CPOLVAL 1 M2 TWOND M3 NV MA TWOND ; %CPOLVAL:  555
   3856         ENDIF ;
   3857       ENDLOOP ;
   3858     LOOP J 1 ND ;
   3859       K:= 2*J-1 ;
   3860       L := K + 1 ;
   3861       IF PHI(K)#0 ;
   3862         M1(K) := (  DD(K) - I*DD(L))/SQRT(2*I) ;
   3863         M1(L) := (  DD(K) + I*DD(L))/SQRT(2*I) ;
   3864         M2(K) := (  DD(K) +   DD(L))*SQRT(I/2) ;
   3865         M2(L) := (I*DD(K) - I*DD(L))*SQRT(I/2) ;
   3866         ELSEIF TRUE ;
   3867         M1(K) := DD(K)+0*I ;
   3868         M1(L) := DD(L)+0*I ;
   3869         M2(K) := DD(K)+0*I ;
   3870         M2(L) := DD(L)+0*I ;
   3871         ENDIF ;
   3872       ENDLOOP ;
   3873     LOOP K TWOND+1 NV ;
   3874       M1(K) := DD(K)+0*M1(1) ;
   3875       ENDLOOP ;
   3876     CPOLVAL 1 MN TWOND M1 NV M3 TWOND ; %CPOLVAL:  555
   3877     LOOP K TWOND+1 NV ;
   3878       M3(K) := M1(K) ;
   3879       ENDLOOP ;
   3880     CPOLVAL 1 M2 TWOND M3 NV MN TWOND ; %CPOLVAL:  555
   3881     IF IMA#0 ;
   3882       CPOLVAL 1 M2 TWOND MA TWOND MA TWOND ; %CPOLVAL:  555
   3883       LOOP K 1 TWOND ;
   3884         MA(K) := REAL(MA(K)) ;
   3885         ENDLOOP ;
   3886       ENDIF ;
   3887     LOOP K 1 TWOND ;
   3888       IF ABS(IMAG(MN(K)))>1E-6 ;
   3889         LWNDANF := LWNDANF+1;
   3890         ENDIF ;
   3891       MN(K) := REAL(MN(K)) ;
   3892       ENDLOOP ;
   3893     DSET 1E-16 ; %DSET:  703
   3894     ENDPROCEDURE ;
   3895   PROCEDURE NF EPS MA ;
   3896     VARIABLE MN 2*NM1 NV ;
   3897     VARIABLE RES 2*NM1 ;
   3898     DANF MAP MN MA 1 RES EPS ; %DANF: 3742
   3899     ENDPROCEDURE ;
   3900   PROCEDURE TS MU ;
   3901     VARIABLE MN 2*NM1 TWOND ;
   3902     VARIABLE MA 2*NM1 TWOND ;
   3903     VARIABLE S1 2*NM1 ;
   3904     VARIABLE S2 NM1 ;
   3905     VARIABLE I 1 ;
   3906     VARIABLE J 2 ;
   3907     VARIABLE NOM 1 ;
   3908     LWNTS := 0 ;
   3909     DANF MAP MN MA 1 S1 1E-7 ; %DANF: 3742
   3910     NOM := NOC ;
   3911     LOOP I 1 ND ;
   3912       S1 := REAL(MN(2*I-1)) ;
   3913       LOOP J 2 TWOND 2 ;
   3914         DAPLU S1 J 0 S2 ;
   3915         S1 := S2 ;
   3916         ENDLOOP ;
   3917       IF ABS(S1)=0 ;
   3918         S1 := DA(2*I-1) ;
   3919         ENDIF ;
   3920       S2 := 0 ;
   3921       CO NOC+1 ; %CO:  965
   3922       WHILE (ABS(S2)=0)*(NOC>1) ;
   3923         CO NOC-1 ; %CO:  965
   3924         S1 := S1 ;
   3925         DADIU 2*I-1 S1 S2 ;
   3926         ENDWHILE ;
   3927       IF NOC<NOM ;
   3928         CO NOM ; %CO:  965
   3929         LWNTS := LWNTS+1 ;
   3930         ENDIF ;
   3931       J := COEF(REAL(MN(2*I-1)),2*I) ; %COEF:  301
   3932       CO NOC-1 ; %CO:  965
   3933       IF J=0 ;
   3934         IF CONS(S2)<0 ;
   3935           S2 := -S2 ;
   3936           MU(I) := PI ;
   3937           ELSEIF TRUE ;
   3938           MU(I) := 0 ;
   3939           ENDIF ;
   3940         IMUNIT J ;
   3941         MU(I) := MU(I) - J*LOG(S2) ;
   3942         ELSEIF TRUE ;
   3943         MU(I) := ACOS(S2) ;
   3944         IF CONS(MU(I))<0 ;
   3945           MU(I) := -MU(I) ;
   3946           ENDIF ;
   3947         IF J<0 ;
   3948           MU(I) := 2*PI-MU(I) ;
   3949           ENDIF ;
   3950         ENDIF ;
   3951       CO NOM ; %CO:  965
   3952       MU(I) := MU(I)/2/PI ;
   3953       ENDLOOP ;
   3954     ENDPROCEDURE ;
   3955   PROCEDURE TP MU ;
   3956     VARIABLE A NM1 3 ;
   3957     VARIABLE B NM1 3 ;
   3958     VARIABLE G NM1 3 ;
   3959     VARIABLE I 1 ;
   3960     VARIABLE R NM1 3 ;
   3961     VARIABLE F NM1 10 ;
   3962     VARIABLE I 1 ;
   3963     VARIABLE K 1 ;
   3964     VARIABLE I1 1 ;
   3965     VARIABLE I2 1 ;
   3966     VARIABLE LC 1 ;
   3967     VARIABLE S NM1 ;
   3968     LC := 0 ;
   3969     LOOP I 1 ND ;
   3970       I2 := 2*I ;
   3971       I1 := I2-1 ;
   3972       LOOP K I2+1 TWOND ;
   3973         IF     ME(I1,K)#0 ; %ME:  516
   3974           LC := 1 ;
   3975           ELSEIF ME(I2,K)#0 ; %ME:  516
   3976           LC := 1 ;
   3977           ELSEIF ME(K,I1)#0 ; %ME:  516
   3978           LC := 1 ;
   3979           ELSEIF ME(K,I2)#0 ; %ME:  516
   3980           LC := 1 ;
   3981           ENDIF ;
   3982         ENDLOOP ;
   3983       ENDLOOP ;
   3984     IF LC=0 ;
   3985       GT MAP F MU A B G R ; %GT: 3643
   3986       ELSEIF LC=1 ;
   3987       TS MU ; %TS: 3900
   3988       LOOP I 1 ND ;
   3989         LOOP K 1 TWOND ;
   3990           DAPLU MU(I) K 0 S ;
   3991           MU(I) := S ;
   3992           ENDLOOP ;
   3993         ENDLOOP ;
   3994       ENDIF ;
   3995     ENDPROCEDURE ;
   3996   PROCEDURE RS RES ;
   3997     VARIABLE MN 2*NM1 TWOND ;
   3998     VARIABLE MA 2*NM1 TWOND ;
   3999     VARIABLE EPS 1 ;
   4000     EPS := 1E-7 ;
   4001     DANF MAP MN MA 1 RES EPS ; %DANF: 3742
   4002     ENDPROCEDURE ;
   4003   PROCEDURE NORMSU2 UI UO CU NBAR STUNE MN MA EPS ;
   4004     VARIABLE U1 2*NM1 2 ;
   4005     VARIABLE U2 2*NM1 2 ;
   4006     VARIABLE UOO 2*NM1 2 ;
   4007     VARIABLE CUU 2*NM1 2 ;
   4008     VARIABLE XX NM1 1 ;
   4009     VARIABLE YY NM1 1 ;
   4010     VARIABLE NBN NM1 3 ;
   4011     VARIABLE MAI NM1 NV ;
   4012     VARIABLE MNN NM1 NV ;
   4013     VARIABLE MAA NM1 NV ;
   4014     VARIABLE M1 4 NV ;
   4015     VARIABLE M2 4 NV ;
   4016     VARIABLE R 1 TWOND ;
   4017     VARIABLE PHI 1 TWOND ;
   4018     VARIABLE U0 2 2 ;
   4019     VARIABLE IU 2 ;
   4020     VARIABLE K 2 ;
   4021     VARIABLE D 1 ;
   4022     VARIABLE I 1 ;
   4023     VARIABLE L 2 ;
   4024     PROCEDURE IDENSU2 A ;
   4025       VARIABLE IU 2 ;
   4026       IMUNIT IU ;
   4027       A(1) := 1+IU*0 ;
   4028       A(2) := 0+IU*0 ;
   4029       ENDPROCEDURE ;
   4030     PROCEDURE MULASU2 A B C ;
   4031       A(1) := B(1)*C(1)-B(2)*CONJ(C(2)) ;
   4032       A(2) := B(1)*C(2)+B(2)*CONJ(C(1)) ;
   4033       ENDPROCEDURE ;
   4034     PROCEDURE INVRSU2 A B ;
   4035       A(1) := CONJ(B(1)) ;
   4036       A(2) := -B(2) ;
   4037       ENDPROCEDURE ;
   4038     PROCEDURE MEXPSU2 A B ;
   4039       VARIABLE C1 2*NM1 2 ;
   4040       VARIABLE C2 2*NM1 2 ;
   4041       VARIABLE I 1 ;
   4042       I := ABS(CONS(REAL(B(1))))+ABS(CONS(REAL(B(2))))+              A
                  BS(CONS(IMAG(B(1))))+ABS(CONS(IMAG(B(2)))) ;
   4043       IF I#0 ;
   4044         WRITE 6 ' *** ERROR in MEXPSU2' ;
   4045         QUIT 0 ;
   4046         ENDIF ;
   4047       IDENSU2 A ; %IDENSU2: 4024
   4048       IDENSU2 C1 ; %IDENSU2: 4024
   4049       LOOP I 1 NOC ;
   4050         MULASU2 C2 C1 B ; %MULASU2: 4030
   4051         C1(1) := (1/I)*C2(1) ;
   4052         C1(2) := (1/I)*C2(2) ;
   4053         A(1) := A(1)+C1(1) ;
   4054         A(2) := A(2)+C1(2) ;
   4055         ENDLOOP ;
   4056       ENDPROCEDURE ;
   4057     PROCEDURE EHOMSU2 A B J ;
   4058       VARIABLE C 2*NM1 2 ;
   4059       VARIABLE K 1 ;
   4060       K := NOC ;
   4061       CO J ; %CO:  965
   4062       A(1) := B(1) ;
   4063       A(2) := B(2) ;
   4064       CO J-1 ; %CO:  965
   4065       C(1) := B(1) ;
   4066       C(2) := B(2) ;
   4067       CO K ; %CO:  965
   4068       A(1) := A(1)-C(1) ;
   4069       A(2) := A(2)-C(2) ;
   4070       ENDPROCEDURE ;
   4071     PROCEDURE CORRSU2 A ;
   4072       VARIABLE D NM1 ;
   4073       D := SQR(REAL(A(1)))+SQR(REAL(A(2)))+SQR(IMAG(A(1)))+SQR(IMAG(A(
                  2))) ;
   4074       D := ISRT(D) ;
   4075       A(1) := D*A(1) ;
   4076       A(2) := D*A(2) ;
   4077       ENDPROCEDURE ;
   4078     PROCEDURE SOLVSU2 U1 U2 D PHI R M1 M2 EPS ;
   4079       VARIABLE YY 2*NM1 ;
   4080       CPOLVAL 1 U2 2 M2 NV U1 2 ; %CPOLVAL:  555
   4081       CDNFDS U1(1) R PHI 0 2*ND EPS YY ;
   4082       U1(1) := YY ;
   4083       CDNFDS U1(2) R PHI -D 2*ND EPS YY ;
   4084       U1(2) := YY ;
   4085       CPOLVAL 1 U1 2 M1 NV U2 2 ; %CPOLVAL:  555
   4086       U1(1) := U2(1) ;
   4087       U1(2) := U2(2) ;
   4088       ENDPROCEDURE ;
   4089     PROCEDURE ANALMAP MN PHI R M1 M2 ;
   4090       VARIABLE J 1 ;
   4091       VARIABLE K 1 ;
   4092       VARIABLE L 1 ;
   4093       VARIABLE D 1 ;
   4094       VARIABLE A 1 ;
   4095       VARIABLE B 1 ;
   4096       VARIABLE C 1 ;
   4097       VARIABLE IU 2 ;
   4098       IMUNIT IU ;
   4099       LOOP J 1 ND ;
   4100         K := 2*J-1 ;
   4101         L := K+1 ;
   4102         A := COEF(MN(K),K) ; %COEF:  301
   4103         B := COEF(MN(K),L) ; %COEF:  301
   4104         C := COEF(MN(L),K) ; %COEF:  301
   4105         D := COEF(MN(L),L) ; %COEF:  301
   4106         IF 1+B*B+C*C#1 ;
   4107           R(K) := SQRT(A*A+B*B) ;
   4108           R(L) := R(K) ;
   4109           PHI(K) := ACOS(A/R(K))*(B/ABS(B)) ;
   4110           PHI(L) := -PHI(K) ;
   4111           ELSEIF TRUE ;
   4112           PHI(K) := 0 ;
   4113           PHI(L) := 0 ;
   4114           R(K)   := A ;
   4115           R(L)   := D ;
   4116           ENDIF ;
   4117         IF PHI(K)#0 ;
   4118           M1(K) := (DD(K)-IU*DD(L)) ;
   4119           M1(L) := (DD(K)+IU*DD(L)) ;
   4120           M2(K) := (DD(K)+DD(L))/2+0*IU ;
   4121           M2(L) := (IU*DD(K)-IU*DD(L))/2 ;
   4122           ELSEIF TRUE ;
   4123           M1(K) := DD(K)+0*IU ;
   4124           M1(L) := DD(L)+0*IU ;
   4125           M2(K) := DD(K)+0*IU ;
   4126           M2(L) := DD(L)+0*IU ;
   4127           ENDIF ;
   4128         ENDLOOP ;
   4129       LOOP J TWOND+1 NV ;
   4130         M1(J) := DD(J)+0*IU ;
   4131         M2(J) := DD(J)+0*IU ;
   4132         ENDLOOP ;
   4133       ENDPROCEDURE ;
   4134     PROCEDURE MAPINVR M1 M2 ;
   4135       VARIABLE J 1 ;
   4136       MI M1 M2 NV J NOC NV NM1 ; %MI:  430
   4137       IF J#0 ;
   4138         WRITE 6 ' *** ERROR in MAPINVR' ;
   4139         QUIT 0 ;
   4140         ENDIF ;
   4141       ENDPROCEDURE ;
   4142     IMUNIT IU ;
   4143     ANALMAP MN PHI R M1 M2 ; %ANALMAP: 4089
   4144     LOOP I 1 TWOND ;
   4145       MNN(I) := MN(I) ;
   4146       MAA(I) := MA(I) ;
   4147       ENDLOOP ;
   4148     LOOP I TWOND+1 NV ;
   4149       MNN(I) := DD(I)+0*MNN(1) ;
   4150       MAA(I) := DD(I)+0*MAA(1) ;
   4151       ENDLOOP ;
   4152     MAPINVR MAA MAI ; %MAPINVR: 4134
   4153     U1(1) := UI(1) ;
   4154     U1(2) := UI(2) ;
   4155     CPOLVAL 1 U1 2 MAI NV UOO 2 ; %CPOLVAL:  555
   4156     CORRSU2 UOO ; %CORRSU2: 4071
   4157     U0(1) := CONS(UOO(1)) ;
   4158     U0(2) := CONS(UOO(2)) ;
   4159     D := SQR(REAL(U0(2))) + SQR(IMAG(U0(2))) ;
   4160     IF CONS(D)>0 ;
   4161       D := SQRT(D) ;
   4162       ENDIF ;
   4163     IF 1+ABS(D)=1 ;
   4164       L := U0(1) ;
   4165       IDENSU2 CUU ; %IDENSU2: 4024
   4166       ELSEIF TRUE ;
   4167       D := REAL(U0(1)) ;
   4168       L := D+IU*SQRT(1-SQR(D)) ;
   4169       K := U0(2)/(U0(1)-L) ;
   4170       D := ISRT(1+SQR(REAL(K))+SQR(IMAG(K))) ;
   4171       CUU(1) := K*D ;
   4172       CUU(2) := D+0*IU ;
   4173       ENDIF ;
   4174     D := ISRT(SQR(REAL(L))+SQR(IMAG(L))) ;
   4175     L := D*L ;
   4176     MULASU2 U1 UOO CUU ; %MULASU2: 4030
   4177     INVRSU2 U2 CUU ; %INVRSU2: 4034
   4178     MULASU2 UOO U2 U1 ; %MULASU2: 4030
   4179     UOO(1) := UOO(1)-CONS(UOO(1))+L ;
   4180     UOO(2) := UOO(2)-CONS(UOO(2)) ;
   4181     D := ACOS(REAL(L)) ;
   4182     IF IMAG(L)<0 ;
   4183       D := -D ;
   4184       ENDIF ;
   4185     K := -COS(D)+IU*SIN(D) ;
   4186     D := 2*D ;
   4187     IF D<0 ;
   4188       D := D + 2 * PI ;
   4189       ENDIF ;
   4190     LOOP I 1 NOC ;
   4191       EHOMSU2 U1 UOO I ; %EHOMSU2: 4057
   4192       U2(1) := K*U1(1) ;
   4193       U2(2) := K*U1(2) ;
   4194       SOLVSU2 U1 U2 D PHI R M1 M2 EPS ; %SOLVSU2: 4078
   4195       MEXPSU2 U2 U1 ; %MEXPSU2: 4038
   4196       MULASU2 U1 CUU U2 ; %MULASU2: 4030
   4197       CUU(1) := U1(1) ;
   4198       CUU(2) := U1(2) ;
   4199       MULASU2 U1 UOO U2 ; %MULASU2: 4030
   4200       INVRSU2 UOO U2 ; %INVRSU2: 4034
   4201       CPOLVAL 1 UOO 2 MNN NV U2 2 ; %CPOLVAL:  555
   4202       MULASU2 UOO U2 U1 ; %MULASU2: 4030
   4203       ENDLOOP ;
   4204     D := SQR(ABS(REAL(UOO(2)))+ABS(IMAG(UOO(2)))) ;
   4205     IF 1+D=1 ;
   4206       STUNE := 2*ACOS(REAL(UOO(1))) ;
   4207       NBN(1) := -2*(REAL(CUU(1))*REAL(CUU(2)) - IMAG(CUU(1))*IMAG(CUU(
                  2))) ;
   4208       NBN(2) := -2*(REAL(CUU(1))*IMAG(CUU(2)) + REAL(CUU(2))*IMAG(CUU(
                  1))) ;
   4209       NBN(3) := SQR(REAL(CUU(1)))+SQR(IMAG(CUU(1)))-                  
                   SQR(REAL(CUU(2)))-SQR(IMAG(CUU(2))) ;
   4210       POLVAL 1 NBN 3 MAA NV NBAR 3 ;
   4211       IF CONS(IMAG(UOO(1)))<0 ;
   4212         NBN(1) := -NBN(1) ;
   4213         NBN(2) := -NBN(2) ;
   4214         NBN(3) := -NBN(3) ;
   4215         ENDIF ;
   4216       XX(1) := STUNE ;
   4217       POLVAL 1 XX 1 MNN NV YY 1 ;
   4218       D := ABS(STUNE - YY(1)) ;
   4219       IF 1+D*D#1 ;
   4220         WRITE 6            ' --- WARNING in NORMSU2, spin tune is not 
                  an orbital invariant' ;
   4221         ENDIF ;
   4222       POLVAL 1 XX 1 MAA NV YY 1 ;
   4223       STUNE := YY(1) ;
   4224       ELSEIF TRUE ;
   4225       WRITE 6 (' --- WARNING in NORMSU2, spin-orbit resonance. '&     
                      'NBAR and STUNE undefined') ;
   4226       NBAR(1) := 0*DD(1) ;
   4227       NBAR(2) := 0*DD(1) ;
   4228       NBAR(3) := 0*DD(1) ;
   4229       STUNE := 0*DD(1) ;
   4230       ENDIF ;
   4231     INVRSU2 U1 CUU ; %INVRSU2: 4034
   4232     CPOLVAL 1 U1 2 MAA NV CUU 2 ; %CPOLVAL:  555
   4233     CU(1) := REAL(CUU(1)) ;
   4234     CU(2) := IMAG(CUU(1)) ;
   4235     CU(3) := REAL(CUU(2)) ;
   4236     CU(4) := IMAG(CUU(2)) ;
   4237     UO(1) := REAL(UOO(1)) ;
   4238     UO(2) := IMAG(UOO(1)) ;
   4239     UO(3) := REAL(UOO(2)) ;
   4240     UO(4) := IMAG(UOO(2)) ;
   4241     ENDPROCEDURE ;
   4242   PROCEDURE SO3_IN_SU2 A B KEY ;
   4243     VARIABLE X 2*NM1 ;
   4244     VARIABLE D 1 ;
   4245     VARIABLE Y 2*NM1 ;
   4246     VARIABLE C 1 ;
   4247     VARIABLE I 2 ;
   4248     VARIABLE F 1 ;
   4249     FUNCTION COMSQRT X ;
   4250       VARIABLE A NM1 ;
   4251       VARIABLE B NM1 ;
   4252       VARIABLE I 2 ;
   4253       A := SQRT(SQR(REAL(X)) + SQR(IMAG(X))) ;
   4254       IF ABS(CONS(REAL(X)))<ABS(CONS(IMAG(X))) ;
   4255         B := 0.5 * ACOS(REAL(X) / A) ;
   4256         IF CONS(IMAG(X))<0 ;
   4257           B := -B ;
   4258           ENDIF ;
   4259         ELSEIF TRUE ;
   4260         B := 0.5 * ASIN(IMAG(X) / A) ;
   4261         IF CONS(REAL(X))<0 ;
   4262           B := 0.5*PI-B ;
   4263           ENDIF ;
   4264         ENDIF ;
   4265       IMUNIT I ;
   4266       COMSQRT := SQRT(A)*(COS(B)+I*SIN(B)) ;
   4267       ENDFUNCTION ;
   4268     IMUNIT I ;
   4269     X := 0.5 * (A(1,1) + A(2,2) + I * (A(2,1) - A(1, 2))) ;
   4270     Y := 0.5 * (A(2,2) - A(1,1) - I * (A(2,1) + A(1, 2))) ;
   4271     C := SQR(CONS(REAL(X))) + SQR(CONS(IMAG(X))) ;
   4272     D := SQR(CONS(REAL(Y))) + SQR(CONS(IMAG(Y))) ;
   4273     IF KEY=0 ;
   4274       F :=  1 ;
   4275       ELSEIF TRUE ;
   4276       F := -1 ;
   4277       ENDIF ;
   4278     IF 1+C*C+D*D=1 ;
   4279       WRITE 6 ' *** ERROR in SO3_IN_SU2' ;
   4280       QUIT 0 ;
   4281       ELSEIF C>D ;
   4282       B(1) := F*COMSQRT(X) ; %COMSQRT: 4249
   4283       B(2) := -0.5*(A(1,3)+I*A(2,3))/B(1) ;
   4284       ELSEIF TRUE ;
   4285       B(2) := F*COMSQRT(Y) ; %COMSQRT: 4249
   4286       B(1) := -0.5*(A(1,3)+I*A(2,3))/B(2) ;
   4287       ENDIF ;
   4288     ENDPROCEDURE ;
   4289   PROCEDURE TSS ST NBAR KEY ;
   4290     VARIABLE MN 2*NM1 TWOND ;
   4291     VARIABLE MA 2*NM1 TWOND ;
   4292     VARIABLE S1 2*NM1 ;
   4293     VARIABLE UO NM1 4 ;
   4294     VARIABLE CU NM1 4 ;
   4295     VARIABLE I 1 ;
   4296     VARIABLE EPS 1 ;
   4297     VARIABLE US 2*NM1 2 ;
   4298     VARIABLE XF NM1 NV ;
   4299     VARIABLE MF NM1 NV ;
   4300     EPS := 1E-7 ;
   4301     DANF MAP MN MA 1 S1 EPS ; %DANF: 3742
   4302     EPS := 0 ;
   4303     LOOP I 1 TWOND ;
   4304       EPS := EPS+ABS(IMAG(MN(I)))+ABS(IMAG(MA(I))) ;
   4305       ENDLOOP ;
   4306     IF EPS=0 ;
   4307       EPS := 1E-7 ;
   4308       SO3_IN_SU2 SPNR US 0 ; %SO3_IN_SU2: 4242
   4309       NORMSU2 US UO CU NBAR ST MN MA EPS ; %NORMSU2: 4003
   4310       IF KEY#0 ;
   4311         FM MAP XF MF I ; %FM: 1856
   4312         IF I#0 ;
   4313           WRITE 6               ' *** ERROR in TSS, orbital map has no
                   fixed point' ;
   4314           QUIT 0 ;
   4315           ENDIF ;
   4316         LOOP I 1 TWOND ;
   4317           XF(I) := DD(I)+XF(I) ;
   4318           ENDLOOP ;
   4319         LOOP I TWOND+1 NV ;
   4320           XF(I) := DD(I) ;
   4321           ENDLOOP ;
   4322         CU(1) := ST ;
   4323         CU(2) := NBAR(1) ;
   4324         CU(3) := NBAR(2) ;
   4325         CU(4) := NBAR(3) ;
   4326         POLVAL 1 CU 4 XF NV UO 4 ;
   4327         ST := UO(1) ;
   4328         NBAR(1) := UO(2) ;
   4329         NBAR(2) := UO(3) ;
   4330         NBAR(3) := UO(4) ;
   4331         ENDIF ;
   4332       ELSEIF TRUE ;
   4333       WRITE 6 ' --- WARNING in TSS, orbital normal form is not real' ;

   4334       ST := 0*DD(1) ;
   4335       NBAR(1) := 0*DD(1) ;
   4336       NBAR(2) := 0*DD(1) ;
   4337       NBAR(3) := 0*DD(1) ;
   4338       ENDIF ;
   4339     ST := ST/PI/2 ;
   4340     ENDPROCEDURE ;
   4341   PROCEDURE TSP ST NBAR KEY ;
   4342     VARIABLE B 2*NM1 2 ;
   4343     VARIABLE BF 2*NM1 2 ;
   4344     VARIABLE IU  2 ;
   4345     VARIABLE U1 2*NMON(NOC,NP+1) 2 ; %NMON:  617
   4346     VARIABLE CU  2*NMON(NOC,NP+1) 2 ; %NMON:  617
   4347     VARIABLE K 2*NMON(NOC,NP+1) ; %NMON:  617
   4348     VARIABLE L 2*NMON(NOC,NP+1) ; %NMON:  617
   4349     VARIABLE D NMON(NOC,NP+1) ; %NMON:  617
   4350     VARIABLE TPI 1 ;
   4351     VARIABLE I 1 ;
   4352     VARIABLE J 1 ;
   4353     VARIABLE A1 NMON(NOC,NP+1) 3 3 ; %NMON:  617
   4354     VARIABLE A2 NMON(NOC,NP+1) 3 3 ; %NMON:  617
   4355     VARIABLE XF NMON(NOC,NP+1) NV ; %NMON:  617
   4356     VARIABLE MF NM1 NV ;
   4357     VARIABLE N1 NM1 3 ;
   4358     VARIABLE T1 NM1 ;
   4359     FUNCTION PARASU2 B ;
   4360       VARIABLE D NM1 ;
   4361       VARIABLE C NM1 ;
   4362       VARIABLE I 1 ;
   4363       D := B ;
   4364       LOOP I 1 TWOND ;
   4365         DAPLU D I 0.0 C ;
   4366         D := C ;
   4367         ENDLOOP ;
   4368       PARASU2 := D ;
   4369       ENDFUNCTION ;
   4370     PROCEDURE CPARSU2 B ;
   4371       VARIABLE D NMON(NOC,NP+1) ; %NMON:  617
   4372       D := SQR(REAL(B(1)))+SQR(REAL(B(2)))+SQR(IMAG(B(1)))+SQR(IMAG(B(
                  2))) ;
   4373       D := ISRT(D) ;
   4374       B(1) := D*B(1) ;
   4375       B(2) := D*B(2) ;
   4376       ENDPROCEDURE ;
   4377     IF KEY=0 ;
   4378       TSS T1 N1 0 ; %TSS: 4289
   4379       ST := PARASU2(T1) ; %PARASU2: 4359
   4380       NBAR(1) := PARASU2(N1(1)) ; %PARASU2: 4359
   4381       NBAR(2) := PARASU2(N1(2)) ; %PARASU2: 4359
   4382       NBAR(3) := PARASU2(N1(3)) ; %PARASU2: 4359
   4383       ELSEIF TRUE ;
   4384       FM MAP XF MF J ; %FM: 1856
   4385       IF J#0 ;
   4386         WRITE 6 ' *** ERROR in TSP, orbital map has no fixed point' ;
   4387         QUIT 0 ;
   4388         ENDIF ;
   4389       LOOP I 1 TWOND ;
   4390         XF(I) := DD(I)+XF(I) ;
   4391         ENDLOOP ;
   4392       LOOP I TWOND+1 NV ;
   4393         XF(I) := DD(I) ;
   4394         ENDLOOP ;
   4395       SO3_IN_SU2 SPNR BF 0 ; %SO3_IN_SU2: 4242
   4396       CPOLVAL 1 BF 2 XF NV B 2 ; %CPOLVAL:  555
   4397       IMUNIT IU ;
   4398       U1(1) := PARASU2(REAL(B(1))) + IU*PARASU2(IMAG(B(1))) ; %PARASU2
                  : 4359 %PARASU2: 4359
   4399       U1(2) := PARASU2(REAL(B(2))) + IU*PARASU2(IMAG(B(2))) ; %PARASU2
                  : 4359 %PARASU2: 4359
   4400       CPARSU2 U1 ; %CPARSU2: 4370
   4401       D := SQR(REAL(U1(2))) + SQR(IMAG(U1(2))) ;
   4402       IF CONS(D)>0 ;
   4403         D := SQRT(D) ;
   4404         ENDIF ;
   4405       IF 1+ABS(D)=1 ;
   4406         L := U1(1) ;
   4407         CU(1) := 1+IU*0 ;
   4408         CU(2) := 0+IU*0 ;
   4409         ELSEIF 1+ABS(ABS(CONS(REAL(U1(1))))-1)=1 ;
   4410         WRITE 6 ' *** ERROR in TSP, multiple eigenvalues. Try to use T
                  SS' ;
   4411         QUIT 0 ;
   4412         ELSEIF TRUE ;
   4413         D := REAL(U1(1)) ;
   4414         L := D+IU*SQRT(1-SQR(D)) ;
   4415         K := U1(2)/(U1(1)-L) ;
   4416         D := ISRT(1+SQR(REAL(K))+SQR(IMAG(K))) ;
   4417         CU(1) := K*D ;
   4418         CU(2) := D+0*IU ;
   4419         ENDIF ;
   4420       D := ISRT(SQR(REAL(L))+SQR(IMAG(L))) ;
   4421       L := D*L ;
   4422       ST := 2*ACOS(REAL(L)) ;
   4423       NBAR(1) := -2*(REAL(CU(1))*REAL(CU(2))-IMAG(CU(1))*IMAG(CU(2))) 
                  ;
   4424       NBAR(2) := -2*(REAL(CU(1))*IMAG(CU(2))+REAL(CU(2))*IMAG(CU(1))) 
                  ;
   4425       NBAR(3) := SQR(REAL(CU(1)))+SQR(IMAG(CU(1)))-                   
                   SQR(REAL(CU(2)))-SQR(IMAG(CU(2))) ;
   4426       IF CONS(IMAG(L))<0 ;
   4427         NBAR(1) := -NBAR(1) ;
   4428         NBAR(2) := -NBAR(2) ;
   4429         NBAR(3) := -NBAR(3) ;
   4430         ENDIF ;
   4431       ST := ST/PI/2 ;
   4432       ENDIF ;
   4433     ENDPROCEDURE ;
   4434   PROCEDURE RCT X ;
   4435     VARIABLE I 1 ;
   4436     VARIABLE RCE 1 TWOND ;
   4437     VARIABLE TMP NM1 TWOND ;
   4438     LOOP I 1 ND ;
   4439       TMP(I) := X(2*I-1) ;
   4440       TMP(ND+I) := X(2*I) ;
   4441       ENDLOOP ;
   4442     LOOP I 1 ND ;
   4443       RCE(2*I-1) := DA(I) ;
   4444       RCE(2*I) := DA(ND+I) ;
   4445       ENDLOOP ;
   4446     POLVAL 2 TMP TWOND RCE TWOND X TWOND ;
   4447     ENDPROCEDURE ;
   4448   PROCEDURE RET X ;
   4449     VARIABLE I 1 ;
   4450     VARIABLE REC 1 TWOND ;
   4451     VARIABLE TMP NM1 TWOND ;
   4452     LOOP I 1 ND ;
   4453       TMP(2*I-1) := X(I) ;
   4454       TMP(2*I) := X(ND+I) ;
   4455       ENDLOOP ;
   4456     LOOP I 1 ND ;
   4457       REC(I) := DA(2*I-1) ;
   4458       REC(ND+I) := DA(2*I) ;
   4459       ENDLOOP ;
   4460     POLVAL 2 TMP TWOND REC TWOND X TWOND ;
   4461     ENDPROCEDURE ;
   4462   PROCEDURE RETF F ;
   4463     VARIABLE I 1 ;
   4464     VARIABLE REC 1 TWOND ;
   4465     VARIABLE X NM1 1 ;
   4466     LOOP I 1 ND ;
   4467       REC(I) := DA(2*I-1) ;
   4468       REC(ND+I) := DA(2*I) ;
   4469       ENDLOOP ;
   4470     X(1) := F ;
   4471     POLVAL 2 X 1 REC TWOND X 1 ;
   4472     F := X(1) ;
   4473     ENDPROCEDURE ;
   4474   PROCEDURE CGF TY MAP CL F NG ;
   4475     VARIABLE SC1 MAX(100,2*NM1) TWOND ; %MAX:  204
   4476     VARIABLE SC2 MAX(100,2*NM1) TWOND ; %MAX:  204
   4477     VARIABLE SC3 2*NM1 TWOND ;
   4478     VARIABLE I 1 ;
   4479     VARIABLE J 1 ;
   4480     VARIABLE IER 1 ;
   4481     VARIABLE AL TWOND TWOND ;
   4482     VARIABLE BL TWOND TWOND ;
   4483     VARIABLE DL TWOND TWOND ;
   4484     VARIABLE NOM 1 ;
   4485     VARIABLE DUM NM1 ;
   4486     VARIABLE M NM1 TWOND ;
   4487     VARIABLE ML NV TWOND ;
   4488     VARIABLE MLI NV TWOND ;
   4489     PROCEDURE SETTYPE ;
   4490       VARIABLE SSL TWOND TWOND ;
   4491       VARIABLE J2N TWOND TWOND ;
   4492       PROCEDURE SETS ;
   4493         VARIABLE SS 1 TWOND TWOND ;
   4494         PROCEDURE CONVS ;
   4495           LOOP I 1 ND ;
   4496             CL(I) := 0*DA(1) ;
   4497             DL(ND+I) := CL(I) ;
   4498             ENDLOOP ;
   4499           IF     TY=1 ;
   4500             LOOP I 1 ND ;
   4501               CL(ND+I) := DA(I) ;
   4502               DL(I) := DA(I) ;
   4503               ENDLOOP ;
   4504             ELSEIF TY=2 ;
   4505             LOOP I 1 ND ;
   4506               CL(ND+I) := DA(ND+I) ;
   4507               DL(I) := DA(I) ;
   4508               ENDLOOP ;
   4509             ELSEIF TY=3 ;
   4510             LOOP I 1 ND ;
   4511               CL(ND+I) := DA(I) ;
   4512               DL(I) := DA(ND+I) ;
   4513               ENDLOOP ;
   4514             ELSEIF TY=4 ;
   4515             LOOP I 1 ND ;
   4516               CL(ND+I) := DA(ND+I) ;
   4517               DL(I) := DA(ND+I) ;
   4518               ENDLOOP ;
   4519             ENDIF ;
   4520           POLVAL 2 CL TWOND ML TWOND SC1 TWOND ;
   4521           LOOP I 1 TWOND ;
   4522             SC1(I) := SC1(I)+DL(I) ;
   4523             ENDLOOP ;
   4524           MI SC1 SC2 TWOND IER NOC NV NM1 ; %MI:  430
   4525           IF IER#0 ;
   4526             WRITE 6 '*** ERROR in TR, no gen. fct.' ;
   4527             QUIT 0 ;
   4528             ENDIF ;
   4529           POLVAL 2 CL TWOND ML TWOND SC1 TWOND ;
   4530           LOOP I 1 TWOND ;
   4531             SC1(I) := SC1(I)-DL(I) ;
   4532             ENDLOOP ;
   4533           POLVAL 2 SC2 TWOND SC1 TWOND SC2 TWOND ;
   4534           POLVAL 2 J2N TWOND SC2 TWOND SC2 TWOND ;
   4535           LOOP I 1 TWOND ;
   4536             SC2(I) := -SC2(I) ;
   4537             ENDLOOP ;
   4538           LOOP I 1 TWOND ;
   4539             LOOP J 1 TWOND ;
   4540               SS(I,J) := CONS(DER(J,SC2(I))) ; %DER:  307
   4541               ENDLOOP ;
   4542             ENDLOOP ;
   4543           ENDPROCEDURE ;
   4544         IF TY=0 ;
   4545           LOOP I 1 TWOND ;
   4546             LOOP J 1 TWOND ;
   4547               SS(I,J) := 0 ;
   4548               ENDLOOP ;
   4549             ENDLOOP ;
   4550           ELSEIF (0<TY)*(TY<5) ;
   4551           CONVS ; %CONVS: 4494
   4552           ELSEIF TRUE;
   4553           WRITE 6 ' *** ERROR in TR, invalid typ' ;
   4554           QUIT 0 ;
   4555           ENDIF ;
   4556         LOOP I 1 TWOND ;
   4557           LOOP J 1 TWOND ;
   4558             SSL(I) := SSL(I) + DA(J)*SS(I,J) ;
   4559             ENDLOOP ;
   4560           ENDLOOP ;
   4561         ENDPROCEDURE ;
   4562       LOOP I 1 ND ;
   4563         J2N(I) := DA(ND+I) ;
   4564         J2N(ND+I) := -DA(I) ;
   4565         ENDLOOP ;
   4566       SETS ; %SETS: 4492
   4567       LOOP I 1 TWOND ;
   4568         AL(I) := -J2N(I) ;
   4569         BL(I) := J2N(I) ;
   4570         ENDLOOP ;
   4571       POLVAL 2 J2N TWOND SSL TWOND SC1 TWOND ;
   4572       LOOP I 1 TWOND ;
   4573         CL(I) := (DA(I)+SC1(I))/2 ;
   4574         DL(I) := (DA(I)-SC1(I))/2 ;
   4575         ENDLOOP ;
   4576       POLVAL 2 AL TWOND MLI TWOND AL TWOND ;
   4577       POLVAL 2 CL TWOND MLI TWOND CL TWOND ;
   4578       ENDPROCEDURE ;
   4579     LOOP I 1 TWOND ;
   4580       M(I) := MAP(I) ;
   4581       ENDLOOP ;
   4582     RCT M ; %RCT: 4434
   4583     NOM := NOC ;
   4584     CO 1 ; %CO:  965
   4585     LOOP I 1 TWOND ;
   4586       ML(I) := M(I) ;
   4587       ENDLOOP ;
   4588     MI ML MLI TWOND IER NOC NV NM1 ; %MI:  430
   4589     CO NOM ; %CO:  965
   4590     IF IER#0 ;
   4591       WRITE 6 ' *** ERROR in TR, no inverse' ;
   4592       QUIT 0 ;
   4593       ENDIF ;
   4594     SETTYPE ; %SETTYPE: 4489
   4595     POLVAL 2 AL TWOND M TWOND SC1 TWOND ;
   4596     LOOP I 1 TWOND ;
   4597       SC1(I) := SC1(I) + BL(I) ;
   4598       ENDLOOP ;
   4599     POLVAL 2 CL TWOND M TWOND SC2 TWOND ;
   4600     LOOP I 1 TWOND ;
   4601       SC2(I) := SC2(I) + DL(I) ;
   4602       ENDLOOP ;
   4603     MI SC2 SC3 TWOND IER NOC NV NM1 ; %MI:  430
   4604     IF IER#0 ;
   4605       WRITE 6 '*** ERROR in TR, no gen. fct.' ;
   4606       QUIT 0 ;
   4607       ENDIF ;
   4608     POLVAL 2 SC1 TWOND SC3 TWOND SC1 TWOND ;
   4609     CO NOC+1 ; %CO:  965
   4610     POTI SC1 TWOND F ; %POTI:  586
   4611     LOOP I 1 TWOND ;
   4612       NG(I) := DER(I,F) ; %DER:  307
   4613       ENDLOOP ;
   4614     RETF F ; %RETF: 4462
   4615     CO NOM ; %CO:  965
   4616     LOOP I 1 ND ;
   4617       DUM := NG(I) ;
   4618       NG(I) := NG(ND+I) ;
   4619       NG(ND+I) := -DUM ;
   4620       ENDLOOP ;
   4621     POLVAL 2 ML TWOND NG TWOND NG TWOND ;
   4622     RET CL ; %RET: 4448
   4623     RET NG ; %RET: 4448
   4624     ENDPROCEDURE ;
   4625   PROCEDURE SYMP0 F G H ;
   4626     VARIABLE I 1 ;
   4627     VARIABLE J 1 ;
   4628     VARIABLE ID 1 ;
   4629     VARIABLE JD 1 ;
   4630     LOOP I 1 TWOND ;
   4631       G(I) := DER(I,F) ; %DER:  307
   4632       ENDLOOP ;
   4633     LOOP ID 1 ND ;
   4634       I := 2*ID-1 ;
   4635       LOOP JD 1 ND ;
   4636         J := 2*JD ;
   4637         H(ID,JD) := DER(J,G(I)) ; %DER:  307
   4638         ENDLOOP ;
   4639       ENDLOOP ;
   4640     ENDPROCEDURE ;
   4641   PROCEDURE SYMP AM AN G H TY IE ;
   4642     VARIABLE A 1 TWOND ;
   4643     VARIABLE GI 1 ND ;
   4644     VARIABLE D 1 ND ;
   4645     VARIABLE ID 1 ;
   4646     VARIABLE JD 1 ;
   4647     VARIABLE I 1 ;
   4648     VARIABLE F 1 ;
   4649     VARIABLE GM NM1 TWOND ;
   4650     VARIABLE GA 1 TWOND ;
   4651     VARIABLE DIF 1 ;
   4652     VARIABLE HM NM1 ND ND ;
   4653     VARIABLE HA 1 ND ND ;
   4654     VARIABLE IER 1 ;
   4655     VARIABLE TRY 1 ;
   4656     VARIABLE SCR NM1 ;
   4657     VARIABLE K 1 ;
   4658     PROCEDURE PLUA PIN K1 P ;
   4659       P := PIN ;
   4660       LOOP K K1 TWOND 2 ;
   4661         DAPLU P K A(K) P ;
   4662         ENDLOOP ;
   4663       ENDPROCEDURE ;
   4664     LOOP ID 1 ND ;
   4665       F := 2*ID ;
   4666       I := F-1 ;
   4667       IF     TY=1 ;
   4668         A(I) := AN(I) ;
   4669         A(F) := AM(I) ;
   4670         GI(ID) :=  AN(F) ;
   4671         ELSEIF TY=2 ;
   4672         A(I) := AN(I) ;
   4673         A(F) := AM(F) ;
   4674         GI(ID) :=  AN(F) ;
   4675         ELSEIF TY=3 ;
   4676         A(I) := AN(F) ;
   4677         A(F) := AM(I) ;
   4678         GI(ID) := -AN(I) ;
   4679         ELSEIF TY=4 ;
   4680         A(I) := AN(F) ;
   4681         A(F) := AM(F) ;
   4682         GI(ID) := -AN(I) ;
   4683         ENDIF;
   4684       PLUA G(I) 1 SCR ; %PLUA: 4658
   4685       GM(I) := SCR ;
   4686       PLUA G(F) 1 SCR ; %PLUA: 4658
   4687       GM(F) := SCR ;
   4688       LOOP JD 1 ND ;
   4689         PLUA H(ID,JD) 1 SCR ; %PLUA: 4658
   4690         HM(ID,JD) := SCR ;
   4691         ENDLOOP ;
   4692       PLUA GM(I) 2 SCR ; %PLUA: 4658
   4693       GA(I) := CONS(SCR) ;
   4694       D(ID) := GI(ID)-GA(I) ;
   4695       ENDLOOP ;
   4696     TRY := 0 ;
   4697     IE := 0 ;
   4698     DIF := 1 ;
   4699     WHILE (DIF>10*DEPS)*(IE=0) ;
   4700       TRY := TRY+1 ;
   4701       IF TRY>100 ;
   4702         LWNTR := LWNTR+1 ;
   4703         IE := 1 ;
   4704         ENDIF ;
   4705       LOOP ID 1 ND ;
   4706         LOOP JD 1 ND ;
   4707           PLUA HM(ID,JD) 2 SCR ; %PLUA: 4658
   4708           HA(ID,JD) := CONS(SCR) ;
   4709           ENDLOOP ;
   4710         ENDLOOP ;
   4711       LINV HA HA ND ND IER ;
   4712       IF IER#0 ;
   4713         WRITE 6 ' --- WARNING in SYMP, no inverse' ;
   4714         ENDIF ;
   4715       LOOP ID 1 ND ;
   4716         F := 2*ID ;
   4717         LOOP JD 1 ND ;
   4718           A(F) := A(F)+HA(ID,JD)*D(JD) ;
   4719           ENDLOOP ;
   4720         ENDLOOP ;
   4721       DIF := 0 ;
   4722       LOOP ID 1 ND ;
   4723         I := 2*ID-1 ;
   4724         PLUA GM(I) 2 SCR ; %PLUA: 4658
   4725         GA(I) := CONS(SCR) ;
   4726         D(ID) := GI(ID)-GA(I) ;
   4727         DIF := DIF+ABS(D(ID)) ;
   4728         ENDLOOP ;
   4729       ENDWHILE ;
   4730     LOOP ID 1 ND ;
   4731       F := 2*ID ;
   4732       I := F-1 ;
   4733       PLUA GM(F) 2 SCR ; %PLUA: 4658
   4734       GA(F) := CONS(SCR) ;
   4735       IF     TY=1 ;
   4736         AN(I) :=  A(F) ;
   4737         AN(F) := -GA(F) ;
   4738         ELSEIF TY=2 ;
   4739         AN(I) := GA(F) ;
   4740         AN(F) :=   A(F) ;
   4741         ELSEIF TY=3 ;
   4742         AN(I) :=  A(F) ;
   4743         AN(F) := -GA(F) ;
   4744         ELSEIF TY=4 ;
   4745         AN(I) := GA(F) ;
   4746         AN(F) :=   A(F) ;
   4747         ENDIF ;
   4748       ENDLOOP ;
   4749     ENDPROCEDURE ;
   4750   PROCEDURE TRSC E ;
   4751     E := ESC ;
   4752     ENDPROCEDURE ;
   4753   PROCEDURE TRNC E ;
   4754     E := ENC ;
   4755     ENDPROCEDURE ;
   4756   PROCEDURE TR N NP IID1 IID2 D1 D2 TY NF IU ;
   4757     VARIABLE PLOT 10000 ;
   4758     VARIABLE IS 1 ;
   4759     VARIABLE IMP 1 ;
   4760     VARIABLE TYS 1 ;
   4761     VARIABLE AN 1 TWOND ;
   4762     VARIABLE AM 1 TWOND ;
   4763     VARIABLE DUM MAX(NRAY,NM1) ; %MAX:  204
   4764     VARIABLE G NM1 TWOND ;
   4765     VARIABLE H NM1 ND ND ;
   4766     VARIABLE F NM1 ;
   4767     VARIABLE IE 1 ;
   4768     VARIABLE NOM 1 ;
   4769     VARIABLE ML NV+1 TWOND ;
   4770     VARIABLE LIM 1 ;
   4771     VARIABLE MLI NV+1 TWOND ;
   4772     VARIABLE NN 2*NM1 TWOND ;
   4773     VARIABLE IT 1 ;
   4774     VARIABLE TMAP 2*NM1 TWOND+9 ;
   4775     VARIABLE AL 1 TWOND TWOND ;
   4776     VARIABLE DD1 1 ;
   4777     VARIABLE DD2 1 ;
   4778     VARIABLE ID1 1 ;
   4779     VARIABLE ID2 1 ;
   4780     VARIABLE PART NRAY TWOND+MAX(9,1+NCCT) ; %MAX:  204
   4781     VARIABLE PARI NRAY TWOND ;
   4782     VARIABLE ERAY NRAY TWOND ;
   4783     VARIABLE I 1 ;
   4784     VARIABLE J 1 ;
   4785     VARIABLE IC 1 ;
   4786     VARIABLE XP NRAY ;
   4787     VARIABLE YP NRAY ;
   4788     VARIABLE X 1 ;
   4789     VARIABLE Y 1 ;
   4790     VARIABLE NG 2*NM1 TWOND ;
   4791     VARIABLE CL TWOND TWOND ;
   4792     VARIABLE DFCT 1 ;
   4793     VARIABLE KK NRAY TWOND ;
   4794     VARIABLE TMP NRAY TWOND ;
   4795     VARIABLE SCR 1 ;
   4796     VARIABLE M1 NRAY TWOND ;
   4797     VARIABLE M2 NRAY TWOND ;
   4798     VARIABLE II 1 ;
   4799     VARIABLE TSPI NRAY 3 ;
   4800     VARIABLE TSSC NRAY 3 ;
   4801     VARIABLE NR 1 ;
   4802     VARIABLE NS 1 ;
   4803     VARIABLE STR 120 ;
   4804     VARIABLE DERR 1 ;
   4805     VARIABLE LPL 1 ;
   4806     VARIABLE LPLH 1 ;
   4807     VARIABLE APART NRAY 2*MAX(1,NCT) ; %MAX:  204
   4808     VARIABLE CLIM 1 ;
   4809     VARIABLE CLIM0 1 ;
   4810     VARIABLE PERCENT 1;
   4811     PROCEDURE PREAP ;
   4812       PROCEDURE APCOPY IB IE ;
   4813         VARIABLE CMAP NM1 LPL ;
   4814         VARIABLE CPART NRAY LPL ;
   4815         VARIABLE K 1 ;
   4816         VARIABLE NK 1 ;
   4817         NK := IE-IB+1 ;
   4818         LOOP K 1 NK ;
   4819           CMAP(K) := MCT(IB-1+K) ;
   4820           ENDLOOP ;
   4821         POLVAL 1 CMAP NK PART TWOND CPART NK ;
   4822         LOOP K 1 NK ;
   4823           APART(IB-1+K) := CPART(K) ;
   4824           ENDLOOP ;
   4825         ENDPROCEDURE ;
   4826       IC := MIN(NCT,LPLH) ; %MIN:  207
   4827       POLVAL 1 MCT 2*IC PART TWOND APART 2*IC ;
   4828       IC := LPLH ;
   4829       WHILE NCT>IC ;
   4830         APCOPY 2*IC+1 2*MIN(NCT,IC+LPLH) ; %APCOPY: 4812 %MIN:  207
   4831         IC := IC+LPLH ;
   4832         ENDWHILE ;
   4833       ENDPROCEDURE ;
   4834     PROCEDURE CUT ;
   4835       PROCEDURE CUTCND LCND X Y XC YC CADD ;
   4836         IC := IC+1 ;
   4837         IF TWOND=2 ;
   4838           PART(IC) := SQR(X/XC)+CADD ;
   4839           ELSEIF TWOND>2 ;
   4840           IF LCND=1 ;
   4841             PART(IC) := SQR(X/XC)+SQR(Y/YC)+CADD ;
   4842             ELSEIF LCND=2 ;
   4843             PART(IC) := SQR(X/XC)+CADD ;
   4844             IC := IC+1 ;
   4845             PART(IC) := SQR(Y/YC)+CADD ;
   4846             ENDIF ;
   4847           ENDIF ;
   4848         ENDPROCEDURE ;
   4849       IC := TWOND+1 ;
   4850       PART(IC) := REMAIN ;
   4851       CLIM := 1 ;
   4852       LOOP I 1 TWOND ;
   4853         CLIM := MAX(CLIM,CONS(PART(I))) ; %MAX:  204
   4854         ENDLOOP ;
   4855       CLIM := MIN(CLIM,CLIM0)+1 ; %MIN:  207
   4856       IF NCT>0 ;
   4857         LOOP I 1 NCT ;
   4858           CUTCND LCT(I) APART(2*I-1) APART(2*I) XCT(1,I) XCT(2,I) CLIM
                  -1 ; %CUTCND: 4835
   4859           ENDLOOP ;
   4860         ELSEIF LO(1) ;
   4861         CUTCND ABS(LCUT) PART(1) PART(3) XCUT(1) XCUT(2) CLIM-1 ; %CUT
                  CND: 4835
   4862         ENDIF ;
   4863       VEZERO PART IC CLIM ;
   4864       REMOVE := REMOVE+LTRI*(REMAIN-PART(TWOND+1)) ;
   4865       REMAIN := PART(TWOND+1) ;
   4866       ENDPROCEDURE ;
   4867     PROCEDURE WTRPRAY IT;
   4868       IF IT=0 ;
   4869         NR := LENGTH(PART(1)) ;
   4870         IF NR=1 ;
   4871           NR := 0 ;
   4872           ENDIF ;
   4873         WRITE LTRPRAYU '# number of rays:'&SF(NR,'(I8)') ; %SF:  285
   4874         IF NR>0 ;
   4875           STR := '# iteration   ray    X              A' ;
   4876           IF TWOND>2 ;
   4877             STR := STR&'              Y              B' ;
   4878             ENDIF ;
   4879           IF TWOND>4 ;
   4880             STR := STR&'              T              D' ;
   4881             ENDIF ;
   4882           IF TWOND>6 ;
   4883             STR := STR&'              G              Z' ;
   4884             ENDIF ;
   4885           WRITE LTRPRAYU STR ;
   4886           ENDIF ;
   4887         ELSEIF LO(1) ;
   4888         WRITE LTRPRAYU '' ;
   4889         ENDIF ;
   4890       LOOP J 1 NR ;
   4891         STR := SF(IT,'(I10)')&' '&SF(J-1,'(I6)') ; %SF:  285 %SF:  285

   4892         LOOP I 1 TWOND ;
   4893           STR := STR&SF((PART(I)|J),'(E15.7)') ; %SF:  285
   4894           ENDLOOP ;
   4895         WRITE LTRPRAYU STR ;
   4896         ENDLOOP ;
   4897       ENDPROCEDURE;
   4898     PROCEDURE WTRPSPI IT;
   4899       IF IT=0 ;
   4900         NS := LENGTH(TSPI(1)) ;
   4901         IF NS=1 ;
   4902           NS := 0 ;
   4903           ENDIF ;
   4904         WRITE LTRPSPIU '# number of spin vectors:'&SF(NS,'(I8)') ; %SF
                  :  285
   4905         IF NS>0 ;
   4906           WRITE LTRPSPIU ('# iteration vector   S_X'&                 
                           '            S_Y            S_Z') ;
   4907           ENDIF ;
   4908         ELSEIF LO(1) ;
   4909         WRITE LTRPSPIU '' ;
   4910         ENDIF ;
   4911       LOOP J 1 NS ;
   4912         STR := SF(IT,'(I10)')&' '&SF(J-1,'(I6)') ; %SF:  285 %SF:  285

   4913         LOOP I 1 3 ;
   4914           STR := STR&SF((TSPI(I)|J),'(E15.7)') ; %SF:  285
   4915           ENDLOOP ;
   4916         WRITE LTRPSPIU STR ;
   4917         ENDLOOP ;
   4918       ENDPROCEDURE;
   4919     PROCEDURE OUTPIC IT ;
   4920       IF NF=1 ;
   4921         POLVAL 2 NN TWOND PART TWOND PARI TWOND ;
   4922         XP := PARI(ID1) ;
   4923         YP := PARI(ID2) ;
   4924         ELSEIF TRUE ;
   4925         XP := PART(ID1) ;
   4926         YP := PART(ID2) ;
   4927         ENDIF ;
   4928       IF IID1<0 ;
   4929         XP := TSPI(-IID1) ;
   4930         ENDIF ;
   4931       IF IID2<0 ;
   4932         YP := TSPI(-IID2) ;
   4933         ENDIF ;
   4934       IF (LTRPRAY+LTRPSPI)>0 ;
   4935         IF LTRPRAY=1 ;
   4936           WTRPRAY IT; %WTRPRAY: 4867
   4937           ENDIF;
   4938         IF LTRPSPI=1 ;
   4939           WTRPSPI IT; %WTRPSPI: 4898
   4940           ENDIF ;
   4941         ENDIF;
   4942       ENDPROCEDURE ;
   4943     LIM := 1000*MAX(D1,D2) ; %MAX:  204
   4944     DERR := 1E5 ;
   4945     LPL := 16 ;
   4946     LPLH := INT(LPL/2) ;
   4947     NOM := NOC ;
   4948     IMP := TWOND ;
   4949     ESC := 0 ;
   4950     ENC := 0 ;
   4951     LWNTR := 0 ;
   4952     ID1 := IID1 ;
   4953     ID2 := IID2 ;
   4954     CLEAR PLOT ;
   4955     GRCOLR 1 PLOT ;
   4956     TYS := TY ;
   4957     IF (ID1<0)+(ID2<0) ;
   4958       IF NSPN#NRAY ;
   4959         WRITE 6 (' *** ERROR in TR, the number of SSR''s '&           
                   'disagrees with SR''s.') ;
   4960         QUIT 0 ;
   4961         ELSEIF NF#0 ;
   4962         WRITE 6 (' *** ERROR in TR, spin tracking is not '&           
                   'supported for NF.') ;
   4963         QUIT 0 ;
   4964         ENDIF ;
   4965       IS := 1 ;
   4966       IMP := TWOND+9 ;
   4967       IF ID1<0 ;
   4968         ID1 := TWOND-ID1 ;
   4969         ENDIF ;
   4970       IF ID2<0 ;
   4971         ID2 := TWOND-ID2 ;
   4972         ENDIF ;
   4973       LOOP I 1 3 ;
   4974         TSPI(I) := SPI(I) ;
   4975         LOOP J 1 3 ;
   4976           TMAP(TWOND+3*(I-1)+J) := SPNR(I,J)+0*DD(1) ;
   4977           ENDLOOP ;
   4978         ENDLOOP ;
   4979       ENDIF ;
   4980     LOOP I 1 IMP ;
   4981       PART(I) := 0 ;
   4982       ENDLOOP ;
   4983     IF NF=1 ;
   4984       DANF MAP TMAP NN 1 DUM 1E-12 ; %DANF: 3742
   4985       CO 1 ; %CO:  965
   4986       IF TYPE(NN(1))#TYPE(DD(1)) ;
   4987         LOOP I 1 TWOND ;
   4988           NN(I) := XX(I) ;
   4989           ENDLOOP ;
   4990         ENDIF ;
   4991       PART(ID1) := D1 ;
   4992       PART(ID2) := D2 ;
   4993       POLVAL 2 NN TWOND PART TWOND PARI TWOND ;
   4994       I := SQR(PARI(ID1))+SQR(PARI(ID2)) ;
   4995       PART(ID2) := -D2 ;
   4996       POLVAL -2 NN TWOND PART TWOND PARI TWOND ;
   4997       J := SQR(PARI(ID1))+SQR(PARI(ID2)) ;
   4998       DD1 := SQRT(MAX(I,J)) ; %MAX:  204
   4999       DD2 := DD1 ;
   5000       CO NOM ; %CO:  965
   5001       GRMOVE -DD1*1.5 -DD2 0 PLOT ;
   5002       GRMOVE DD1*1.5 DD2 0 PLOT ;
   5003       ELSEIF TRUE ;
   5004       DD1 := D1 ;
   5005       DD2 := D2 ;
   5006       GRMOVE -D1 -D2 0 PLOT ;
   5007       GRMOVE D1 D2 0 PLOT ;
   5008       ENDIF ;
   5009     LOOP I 1 TWOND ;
   5010       TMAP(I) := MAP(I) ;
   5011       ENDLOOP ;
   5012     IF (TY=-12)+(TY=-13) ;
   5013       TYS := TY+10 ;
   5014       CO 1 ; %CO:  965
   5015       I := -1 ;
   5016       MGF MAP F I J ; %MGF: 3353
   5017       GFM ML F I ; %GFM: 3314
   5018       MI ML MLI TWOND IE NOC NV NM1 ; %MI:  430
   5019       CO NOM ; %CO:  965
   5020       IF IE#0 ;
   5021         WRITE 6 ' *** ERROR in TR, no inverse' ;
   5022         QUIT 0 ;
   5023         ENDIF ;
   5024       LOOP I 1 TWOND ;
   5025         TMAP(I) := 0 ;
   5026         LOOP J 1 TWOND ;
   5027           AL(I,J) := COEF(ML(I),J) ; %COEF:  301
   5028           TMAP(I) := TMAP(I)+COEF(MLI(I),J)*MAP(J) ; %COEF:  301
   5029           ENDLOOP ;
   5030         ENDLOOP ;
   5031       ENDIF ;
   5032     IF TY>-1 ;
   5033       CGF TY TMAP CL F NG ; %CGF: 4474
   5034       CO 1 ; %CO:  965
   5035       LOOP I 1 TWOND ;
   5036         ML(I) := TMAP(I) ;
   5037         ENDLOOP ;
   5038       CO NOM ; %CO:  965
   5039       POLVAL 103 CL TWOND AN TWOND AN TWOND ;
   5040       POLVAL 104 NG TWOND AN TWOND AN TWOND ;
   5041       ELSEIF TY#-21 ;
   5042       MGF TMAP F ABS(TYS) IE ; %MGF: 3353
   5043       IF IE#0 ;
   5044         WRITE 6 ' *** ERROR in TR, no generating function.' ;
   5045         QUIT 0 ;
   5046         ENDIF ;
   5047       SYMP0 F G H ; %SYMP0: 4625
   5048       ENDIF ;
   5049     LOOP I 1 TWOND ;
   5050       PART(I) := RAY(I) ;
   5051       PARI(I) := PART(I) ;
   5052       ENDLOOP ;
   5053     LOOP I TWOND+1 IMP ;
   5054       PART(I) := 0*PART(1) ;
   5055       ENDLOOP ;
   5056     POLVAL 105 TMAP IMP PART TWOND PART IMP ;
   5057     IF LTRR=0 ;
   5058       LTRI := 0 ;
   5059       IF (LCUT>0)*(NCT=0) ;
   5060         CUT ; %CUT: 4834
   5061         ENDIF ;
   5062       IF NP>0 ;
   5063         OUTPIC 0 ; %OUTPIC: 4919
   5064         ENDIF ;
   5065       ELSEIF LO(1);
   5066       NS := LENGTH(TSPI(1)) ;
   5067       IF NS=1 ;
   5068         NS := 0 ;
   5069         ENDIF ;
   5070       ENDIF ;
   5071     IF (LCUT#0)+(NCT>0) ;
   5072       CLIM0 := 0 ;
   5073       LOOP I 1 TWOND ;
   5074         CLIM0 := MAX(CLIM0,CONS(PART(I))) ; %MAX:  204
   5075         ENDLOOP ;
   5076       CLIM0 := CLIM0+10*DERR ;
   5077       ENDIF ;
   5078     LOOP IT 1 N ;
   5079       LTRI := LTRI+1 ;
   5080       IF (LCUT=0)*(NCT=0) ;
   5081         VEZERO PART TWOND LIM ;
   5082         ELSEIF NCT>0 ;
   5083         PREAP ; %PREAP: 4811
   5084         ENDIF ;
   5085       LOOP I 1 TWOND ;
   5086         PARI(I) := PART(I) ;
   5087         ENDLOOP ;
   5088       POLVAL -5 TMAP IMP PART TWOND PART IMP ;
   5089       LOOP I 1 TWOND ;
   5090         ERAY(I) := PART(I) ;
   5091         ENDLOOP ;
   5092       IF TY>-1 ;
   5093         POLVAL 2 ML TWOND PARI TWOND KK TWOND ;
   5094         LOOP I 1 TWOND ;
   5095           M2(I) := PART(I)-KK(I) ;
   5096           ENDLOOP ;
   5097         II := 0 ;
   5098         DFCT := 1 ;
   5099         WHILE (DFCT>10*DEPS)*(DFCT<DERR)*(II<101) ;
   5100           II := II+1 ;
   5101           POLVAL -3 CL TWOND M2 TWOND TMP TWOND ;
   5102           LOOP I 1 TWOND ;
   5103             TMP(I) := TMP(I)+PARI(I) ;
   5104             ENDLOOP ;
   5105           POLVAL -4 NG TWOND TMP TWOND M1 TWOND ;
   5106           DFCT := 0 ;
   5107           LOOP I 1 TWOND ;
   5108             DFCT := MAX(DFCT,CONS(M1(I)-M2(I))) ; %MAX:  204
   5109             M2(I) := M1(I) ;
   5110             ENDLOOP ;
   5111           ENDWHILE ;
   5112         IF DFCT>100*DEPS ;
   5113           LWNTR := LWNTR+1 ;
   5114           ENDIF ;
   5115         LOOP I 1 TWOND ;
   5116           PART(I) := M2(I)+KK(I) ;
   5117           ENDLOOP ;
   5118         ELSEIF TY#-21 ;
   5119         LOOP J 2 NRAY ;
   5120           LOOP I 1 TWOND ;
   5121             AM(I) := PARI(I)|J ;
   5122             AN(I) := AM(I) ;
   5123             ENDLOOP ;
   5124           SYMP AM AN G H ABS(TYS) IE ; %SYMP: 4641
   5125           IF IE=0 ;
   5126             LOOP I 1 TWOND ;
   5127               DUM := PART(I) ;
   5128               VELSET DUM J AN(I) ;
   5129               PART(I) := DUM ;
   5130               ENDLOOP ;
   5131             ENDIF ;
   5132           ENDLOOP ;
   5133         IF TY>-5 ;
   5134           LOOP I 1 TWOND ;
   5135             PARI(I) := PART(I) ;
   5136             ENDLOOP ;
   5137           ELSEIF (TY=-12)+(TY=-13) ;
   5138           LOOP I 1 TWOND ;
   5139             PARI(I) := 0 ;
   5140             LOOP J 1 TWOND ;
   5141               PARI(I) := PARI(I)+AL(I,J)*PART(J) ;
   5142               ENDLOOP ;
   5143             ENDLOOP ;
   5144           LOOP I 1 TWOND ;
   5145             PART(I) := PARI(I) ;
   5146             ENDLOOP ;
   5147           ENDIF ;
   5148         ENDIF ;
   5149       IF IS=1 ;
   5150         DUM := 0 ;
   5151         LOOP I 1 3 ;
   5152           TSSC(I) := 0 ;
   5153           LOOP J 1 3 ;
   5154             TSSC(I) := TSSC(I)+PART(TWOND+3*(I-1)+J)*TSPI(J) ;
   5155             ENDLOOP ;
   5156           DUM := DUM+SQR(TSSC(I)) ;
   5157           ENDLOOP ;
   5158         DUM := SQRT(DUM) ;
   5159         VELSET DUM 1 1 ;
   5160         ENC := ABS(DUM-1) ;
   5161         LOOP I 1 3 ;
   5162           TSPI(I) := TSSC(I)/DUM ;
   5163           ENDLOOP ;
   5164         ENDIF ;
   5165       LOOP I 1 TWOND ;
   5166         ESC := ESC+ABS(PART(I)-ERAY(I)) ;
   5167         ENDLOOP ;
   5168       IF (LCUT#0)+(NCT>0) ;
   5169         CUT ; %CUT: 4834
   5170         ENDIF ;
   5171       IF MOD(IT,ABS(NP))=0 ; %MOD:  210
   5172         OUTPIC IT ; %OUTPIC: 4919
   5173         ENDIF ;
   5174       PERCENT := 100*IT/N;
   5175       IF MOD(PERCENT, 10)=0; %MOD:  210
   5176         WRITE 6 'Complete: '&SF(PERCENT, '(I4)')&' %'; %SF:  285
   5177         ENDIF ;
   5178       ENDLOOP ;
   5179     ESC := ESC/N/(NRAY-1)/TWOND ;
   5180     ENC := ENC/N/(NRAY-1) ;
   5181     IF LTRR>0 ;
   5182       LOOP I 1 TWOND ;
   5183         RAY(I) := PART(I) ;
   5184         ENDLOOP ;
   5185       LOOP I 1 3 ;
   5186         SPI(I) := TSPI(I) ;
   5187         ENDLOOP ;
   5188       ENDIF ;
   5189     IF (LTRPRAY+LTRPSPI)>0 ;
   5190       LTRPRAY := 0 ;
   5191       LTRPSPI := 0 ;
   5192       ENDIF ;
   5193     ENDPROCEDURE ;
   5194   PROCEDURE TRT LIN ;
   5195     LTR := 1 ;
   5196     TRTST := LIN ;
   5197     ENDPROCEDURE ;
   5198   PROCEDURE TRAP X Y I ;
   5199     XCUT(1) := ABS(X) ;
   5200     XCUT(2) := ABS(Y) ;
   5201     LCUT := I ;
   5202     ENDPROCEDURE ;
   5203   PROCEDURE AP X Y I ;
   5204     IF (I=1)+(I=2) ;
   5205       NCT := NCT+1 ;
   5206       NCCT := NCCT+I ;
   5207       LCT(NCT) := I ;
   5208       XCT(1,NCT) := ABS(X) ;
   5209       XCT(2,NCT) := ABS(Y) ;
   5210       MCT(2*NCT-1) := MAP(1) ;
   5211       MCT(2*NCT) := MAP(3) ;
   5212       DR := ABS(Y) ;
   5213       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   5214       UPDATE 0 0 ; %UPDATE: 1261
   5215       ENDIF ;
   5216     ENDPROCEDURE ;
   5217   PROCEDURE TRAPN N ;
   5218     N := ABS(REMAIN)-1 ;
   5219     ENDPROCEDURE ;
   5220   PROCEDURE TRAPHIST FN LT ;
   5221     VARIABLE HIST LENGTH(REMAIN) ;
   5222     VARIABLE L 1 ;
   5223     PROCEDURE PROCESS ;
   5224       VARIABLE I 1 ;
   5225       VARIABLE J 1 ;
   5226       VARIABLE K 1 ;
   5227       VARIABLE DATA 1 L+2 ;
   5228       LOOP J 1 L+2 ;
   5229         DATA(J) := 0 ;
   5230         ENDLOOP ;
   5231       LOOP I 2 NRAY ;
   5232         J := (-HIST)|I ;
   5233         DATA(J+2) := DATA(J+2)+1 ;
   5234         ENDLOOP ;
   5235       OPENF 77 FN 'UNKNOWN' ;
   5236       K := NRAY-1 ;
   5237       WRITE 77 ('#     step   number of survived particles    '&      
                               '(the intial number at step=-1)') ;
   5238       WRITE 77 SF(-1,'(I10)')&' '&SF(K,'(I10)') ; %SF:  285 %SF:  285
   5239       LOOP J 2 L+2 ;
   5240         IF DATA(J)>0 ;
   5241           K := K-DATA(J) ;
   5242           WRITE 77 SF(J-2,'(I10)')&' '&SF(K,'(I10)') ; %SF:  285 %SF: 
                   285
   5243           ENDIF ;
   5244         ENDLOOP ;
   5245       IF L<LT ;
   5246         WRITE 77 SF(LTRI,'(I10)')&' '&SF(K,'(I10)') ; %SF:  285 %SF:  
                  285
   5247         ENDIF ;
   5248       CLOSEF 77 ;
   5249       ENDPROCEDURE ;
   5250     IF NRAY<2 ;
   5251       WRITE 6 ' *** ERROR in TRAPHIST, no rays.' ;
   5252       QUIT 0 ;
   5253       ENDIF ;
   5254     HIST := REMAIN-REMOVE ;
   5255     L := VMAX(-HIST) ;
   5256     PROCESS ; %PROCESS: 5223
   5257     ENDPROCEDURE ;
   5258   PROCEDURE TRAYPAC ;
   5259     VARIABLE L0 1 ;
   5260     VARIABLE L 1 ;
   5261     VARIABLE SPIN 1 ;
   5262     VARIABLE PART NRAY TWOND ;
   5263     VARIABLE TSPI NRAY 3 ;
   5264     VARIABLE REMAIN0 NRAY ;
   5265     VARIABLE I 1 ;
   5266     VARIABLE J 1 ;
   5267     VARIABLE K 1 ;
   5268     L0 := LENGTH(RAY(1)) ;
   5269     IF L0#NRAY ;
   5270       WRITE 6            ' *** ERROR in TRAYPAC, RAY length wrong.' ;
   5271       QUIT 0 ;
   5272       ENDIF ;
   5273     L := ABS(REMAIN) ;
   5274     IF L<NRAY ;
   5275       REMAIN0 := REMAIN ;
   5276       REMAIN := 1 ;
   5277       LOOP I 1 TWOND ;
   5278         PART(I) := RAY(I) ;
   5279         RAY(I) := PART(I)|1 ;
   5280         ENDLOOP ;
   5281       SPIN := LO(0) ;
   5282       IF LENGTH(SPI(1))=L0 ;
   5283         SPIN := LO(1) ;
   5284         ENDIF ;
   5285       IF SPIN ;
   5286         LOOP I 1 3 ;
   5287           TSPI(I) := SPI(I) ;
   5288           SPI(I) := TSPI(I)|1 ;
   5289           ENDLOOP ;
   5290         ENDIF;
   5291       K := 1 ;
   5292       LOOP J 2 L0 ;
   5293         IF (REMAIN0|J)=1 ;
   5294           K := K+1 ;
   5295           REMAIN := REMAIN&1 ;
   5296           LOOP I 1 TWOND ;
   5297             RAY(I) := RAY(I)&(PART(I)|J) ;
   5298             ENDLOOP ;
   5299           IF SPIN ;
   5300             LOOP I 1 3 ;
   5301               SPI(I) := SPI(I)&(TSPI(I)|J) ;
   5302               ENDLOOP ;
   5303             ENDIF ;
   5304           ENDIF ;
   5305         ENDLOOP ;
   5306       ENDIF ;
   5307     IF K#L ;
   5308       WRITE 6 ' *** ERROR in TRAYPAC, REMAIN length wrong.' ;
   5309       QUIT 0 ;
   5310       ENDIF;
   5311     NRAY := L ;
   5312     IF SPIN ;
   5313       NSPN := L ;
   5314       ENDIF ;
   5315     REMOVE := 0*REMAIN ;
   5316     ENDPROCEDURE ;
   5317   PROCEDURE TRR L ;
   5318     IF LOV=0 ;
   5319       WRITE 6 ' *** ERROR, call OV before TRR' ;
   5320       QUIT 0 ;
   5321       ENDIF ;
   5322     IF (LTRR=0)+(L=0) ;
   5323       LTRI := 0 ;
   5324       ENDIF ;
   5325     LTRR := L ;
   5326     ENDPROCEDURE ;
   5327   PROCEDURE TRPRAY IU ;
   5328     LTRPRAY := 1 ;
   5329     LTRPRAYU := IU ;
   5330     IF LTRPSPI=1 ;
   5331       IF LTRPRAYU=LTRPSPIU ;
   5332         WRITE 6         ' *** ERROR in TRPRAY, avoid the same unit num
                  ber with TRPSPI''s' ;
   5333         QUIT 0 ;
   5334         ENDIF ;
   5335       ENDIF ;
   5336     ENDPROCEDURE ;
   5337   PROCEDURE TRPSPI IU ;
   5338     LTRPSPI := 1 ;
   5339     LTRPSPIU := IU ;
   5340     IF LTRPRAY=1 ;
   5341       IF LTRPRAYU=LTRPSPIU ;
   5342         WRITE 6         ' *** ERROR in TRPSPI, avoid the same unit num
                  ber with TRPRAY''s' ;
   5343         QUIT 0 ;
   5344         ENDIF ;
   5345       ENDIF ;
   5346     ENDPROCEDURE ;
   5347   PROCEDURE SYSCFL IU AA FF LL INOR ;
   5348     VARIABLE MIS NM1 ;
   5349     VARIABLE NOR 1 ;
   5350     VARIABLE J 1 ;
   5351     VARIABLE LIN 80 ;
   5352     READ IU LIN ;
   5353     J := R(LIN,8,10) ; %R:  279
   5354     READ IU LIN ;
   5355     AA(4) := R(LIN,8,30) ; %R:  279
   5356     AA(5) := R(LIN,31,53) ; %R:  279
   5357     AA(6) := R(LIN,54,76) ; %R:  279
   5358     IF INOR<0 ;
   5359       NOR := J+1 ;
   5360       ELSEIF TRUE ;
   5361       NOR := INOR ;
   5362       ENDIF ;
   5363     IF J+1<NOR ;
   5364       WRITE 6 ' --- WARNING in SYSCFL, order not saved' ;
   5365       NOR := J+1 ;
   5366       ENDIF ;
   5367     AA(8) := NOR ;
   5368     READ IU LIN ;
   5369     J := R(LIN,13,15) ; %R:  279
   5370     READ IU LIN ;
   5371     AA(1) := R(LIN,8,30) ; %R:  279
   5372     AA(2) := R(LIN,31,53) ; %R:  279
   5373     AA(3) := R(LIN,54,76) ; %R:  279
   5374     IF J<0 ;
   5375       AA(1) := 0 ;
   5376       ENDIF ;
   5377     READ IU LIN ;
   5378     READ IU LIN ;
   5379     AA(7) := R(LIN,35,36) ; %R:  279
   5380     READ IU LIN ;
   5381     CO NOC+1 ; %CO:  965
   5382     LOOP J 0 NOR ;
   5383       DAREA IU MIS TWOND ;
   5384       FF(J+1) := MIS ;
   5385       DAREA IU MIS TWOND ;
   5386       LL(J+1) := MIS ;
   5387       ENDLOOP ;
   5388     CO NOC-1 ; %CO:  965
   5389     AA(9) := 0 ;
   5390     AA(10) := 0 ;
   5391     LOOP J NOR+2 10 ;
   5392       LL(J) := 0*DD(1) ;
   5393       FF(J) := 0*DD(1) ;
   5394       ENDLOOP ;
   5395     ENDPROCEDURE ;
   5396   PROCEDURE FC2 POL IEE FILE ;
   5397     VARIABLE J 1 ;
   5398     VARIABLE AA 1 10 ;
   5399     VARIABLE FF NM1 10 ;
   5400     VARIABLE LL NM1 10 ;
   5401     OPENF 99 FILE 'OLD' ;
   5402     SYSCFL 99 AA FF LL -1 ; %SYSCFL: 5347
   5403     CLOSEF 99 ;
   5404     CO NOC+1 ; %CO:  965
   5405     LOOP J 1 10 ;
   5406       GFF2(IEE,POL,J) := FF(J) ;
   5407       LFF2(IEE,POL,J) := LL(J) ;
   5408       DATFF2(IEE,POL,J) := AA(J) ;
   5409       ENDLOOP ;
   5410     CO NOC-1 ; %CO:  965
   5411     ENDPROCEDURE ;
   5412   PROCEDURE FD2 ;
   5413     VARIABLE I 1 ;
   5414     VARIABLE J 1 ;
   5415     VARIABLE K 1 ;
   5416     VARIABLE AA 1 10 ;
   5417     VARIABLE FF NM1 10 ;
   5418     VARIABLE LL NM1 10 ;
   5419     CO NOC+1 ; %CO:  965
   5420     OPENF 99 'SYSCA.DAT' 'OLD' ;
   5421     LOOP I 1 6 ;
   5422       LOOP J 1 2 ;
   5423         SYSCFL 99 AA FF LL -1 ; %SYSCFL: 5347
   5424         LOOP K 1 10 ;
   5425           GFF2(J,I,K) := FF(K) ;
   5426           LFF2(J,I,K) := LL(K) ;
   5427           DATFF2(J,I,K) := AA(K) ;
   5428           ENDLOOP ;
   5429         ENDLOOP ;
   5430       ENDLOOP ;
   5431     CLOSEF 99 ;
   5432     CO NOC-1 ; %CO:  965
   5433     ENDPROCEDURE ;
   5434   PROCEDURE FR I ;
   5435     IF LOV=0 ;
   5436       WRITE 6 ' *** ERROR, call OV before FR' ;
   5437       QUIT 0 ;
   5438       ENDIF ;
   5439     LFR := I ;
   5440     IF (I<3)*(I>0)*(LFR2=0) ;
   5441       FD2 ; %FD2: 5412
   5442       LFR2 := 1 ;
   5443       ENDIF ;
   5444     ENDPROCEDURE ;
   5445   PROCEDURE KC I ;
   5446     LKC := I ;
   5447     IF I=1 ;
   5448       WRITE 6 ' --- WARNING in KC, effects only in ODE and DLACT' ;
   5449       ENDIF ;
   5450     ENDPROCEDURE ;
   5451   PROCEDURE WAS I ;
   5452     LWA := -I ;
   5453     ENDPROCEDURE ;
   5454   FUNCTION LEN2 X Y ;
   5455     VARIABLE XY2 NM1+1 ;
   5456     VARIABLE LENC 1 ;
   5457     VARIABLE TYP 1 ;
   5458     XY2 := SQR(X)+SQR(Y) ;
   5459     LENC := SQRT(CONS(XY2)) ;
   5460     TYP := TYPE(XY2) ;
   5461     IF TYP=TYPE(1) ;
   5462       LEN2 := LENC ;
   5463       ELSEIF TYP=TYPE(DA(1)) ;
   5464       IF LENC<1.D-8 ;
   5465         LEN2 := LENC+0*DA(1) ;
   5466         ELSEIF LO(1) ;
   5467         LEN2 := SQRT(XY2) ;
   5468         ENDIF ;
   5469       ELSEIF LO(1) ;
   5470       WRITE 6 ' *** ERROR in LEN2, only RE or DA supported.' ;
   5471       QUIT 0 ;
   5472       ENDIF ;
   5473     ENDFUNCTION ;
   5474   PROCEDURE NORMAL X Z X0 Z0 X1 Z1 DIS XS ZS ;
   5475     VARIABLE NX 1 ;
   5476     VARIABLE NZ 1 ;
   5477     VARIABLE SCR 1 ;
   5478     NX := -(Z1-Z0) ;
   5479     NZ := X1-X0 ;
   5480     SCR := SQRT(SQR(NX)+SQR(NZ)) ;
   5481     NX := NX/SCR ;
   5482     NZ := NZ/SCR ;
   5483     DIS := (X-X0)*NX+(Z-Z0)*NZ ;
   5484     XS := X-DIS*NX ;
   5485     ZS := Z-DIS*NZ ;
   5486     ENDPROCEDURE ;
   5487   PROCEDURE EDGESEC X Z IB IE XS ZS DIS ;
   5488     VARIABLE X0 1 ;
   5489     VARIABLE Z0 1 ;
   5490     VARIABLE X1 1 ;
   5491     VARIABLE Z1 1 ;
   5492     VARIABLE XC 1 ;
   5493     VARIABLE ZC 1 ;
   5494     VARIABLE T NM1+1 ;
   5495     VARIABLE IS 1 ;
   5496     VARIABLE SIDE 1 ;
   5497     VARIABLE N 1 ;
   5498     N := BX1BOXPN(IB,IE) ;
   5499     IF N=1 ;
   5500       IS := IE+1 ;
   5501       IF IS>4 ;
   5502         IS := 1 ;
   5503         ENDIF ;
   5504       X0 := BX1BOXP(IB,IE,1,1) ;
   5505       Z0 := BX1BOXP(IB,IE,2,1) ;
   5506       X1 := BX1BOXP(IB,IS,1,1) ;
   5507       Z1 := BX1BOXP(IB,IS,2,1) ;
   5508       T := ( (X-X0)*(X1-X0)+(Z-Z0)*(Z1-Z0) )/( SQR(X1-X0)+SQR(Z1-Z0) )
                   ;
   5509       IF     CONS(T)<0 ;
   5510         T := 0 ;
   5511         XS := X0 ;
   5512         ZS := Z0 ;
   5513         XC := CONS(X) ;
   5514         ZC := CONS(Z) ;
   5515         SIDE := SIG(-(XC-XS)*(Z1-Z0)+(ZC-ZS)*(X1-X0)) ; %SIG:  213
   5516         DIS := SIDE*LEN2(X-XS,Z-ZS) ; %LEN2: 5454
   5517         ELSEIF CONS(T)>1 ;
   5518         T := 1 ;
   5519         XS := X1 ;
   5520         ZS := Z1 ;
   5521         XC := CONS(X) ;
   5522         ZC := CONS(Z) ;
   5523         SIDE := SIG(-(XC-XS)*(Z1-Z0)+(ZC-ZS)*(X1-X0)) ; %SIG:  213
   5524         DIS := SIDE*LEN2(X-XS,Z-ZS) ; %LEN2: 5454
   5525         ELSEIF LO(1) ;
   5526         NORMAL X Z X0 Z0 X1 Z1 DIS XS ZS ; %NORMAL: 5474
   5527         ENDIF ;
   5528       ELSEIF LO(1) ;
   5529       WRITE 6 '*** ERROR in EDGESEC, N#1 -- not supported.' ;
   5530       QUIT 0 ;
   5531       ENDIF ;
   5532     ENDPROCEDURE ;
   5533   PROCEDURE PTBOX X Z IB INSIDE DISE SIDE ;
   5534     VARIABLE XC 1 ;
   5535     VARIABLE ZC 1 ;
   5536     VARIABLE I 1 ;
   5537     VARIABLE XS 1 ;
   5538     VARIABLE ZS 1 ;
   5539     VARIABLE DIS 1 ;
   5540     XC := CONS(X) ;
   5541     ZC := CONS(Z) ;
   5542     INSIDE := 0 ;
   5543     LOOP I 1 4 ;
   5544       EDGESEC XC ZC IB I XS ZS DIS ; %EDGESEC: 5487
   5545       DISE(I) := ABS(DIS) ;
   5546       SIDE(I) := SIG(DIS) ; %SIG:  213
   5547       INSIDE := INSIDE+SIDE(I) ;
   5548       ENDLOOP ;
   5549     IF NINT(INSIDE)=4 ;
   5550       INSIDE := 1 ;
   5551       ELSEIF LO(1) ;
   5552       INSIDE := 0 ;
   5553       ENDIF ;
   5554     ENDPROCEDURE ;
   5555   FUNCTION MCSDIST X Z ;
   5556     VARIABLE IM 1 ;
   5557     VARIABLE IM0 1 ;
   5558     VARIABLE INSIDE 1 ;
   5559     VARIABLE R NM1+1 ;
   5560     VARIABLE DISE 1 4 ;
   5561     VARIABLE SDIS 1 ;
   5562     VARIABLE SIE 1 ;
   5563     VARIABLE SIDE 1 4 ;
   5564     VARIABLE IE 1 ;
   5565     VARIABLE LHE 1 ;
   5566     VARIABLE BY NM1+1 ;
   5567     VARIABLE DH NM1+1 ;
   5568     VARIABLE DIS NM1+1 ;
   5569     VARIABLE XS NM1+1 ;
   5570     VARIABLE ZS NM1+1 ;
   5571     VARIABLE RS NM1+1 ;
   5572     FUNCTION POLB X P IB N ;
   5573       VARIABLE I 1 ;
   5574       POLB := P(IB,N+1) ;
   5575       LOOP I N 1 -1 ;
   5576         POLB := POLB*X+P(IB,I) ;
   5577         ENDLOOP ;
   5578       ENDFUNCTION ;
   5579     MCSDIST := 0*DA(1) ;
   5580     LHE := 0 ;
   5581     IF LHE=0 ;
   5582       LOOP IM 1 BXIBOX ;
   5583         PTBOX X Z IM INSIDE DISE SIDE ; %PTBOX: 5533
   5584         IF INSIDE=1 ;
   5585           IM0 := BXBOXID(IM) ;
   5586           R := LEN2(X,Z) ; %LEN2: 5454
   5587           BY := POLB(R,BXBDT,IM0,BXNOB(IM0)) ; %POLB: 5572
   5588           LOOP IE 1 4 ;
   5589             EDGESEC X Z IM IE XS ZS DIS ; %EDGESEC: 5487
   5590             RS := LEN2(XS,ZS) ; %LEN2: 5454
   5591             DH := POLB(RS,BXDDT,IM0,BXNOD(IM0)) ; %POLB: 5572
   5592             BY := BY*ENGE(1,1,1,-DIS/(2*DH)) ; %ENGE:  714
   5593             ENDLOOP ;
   5594           ELSEIF LO(1) ;
   5595           SDIS := -SIDE(1)*DISE(1) ;
   5596           LOOP IE 2 4 ;
   5597             SDIS := MAX(SDIS,-SIDE(IE)*DISE(IE)) ; %MAX:  204
   5598             ENDLOOP ;
   5599           IF SDIS>10*DMAX ;
   5600             BY := 0 ;
   5601             ELSEIF LO(1) ;
   5602             IM0 := BXBOXID(IM) ;
   5603             LOOP IE 1 4 ;
   5604               IF IE=1 ;
   5605                 SDIS := DISE(IE) ;
   5606                 SIE := IE ;
   5607                 ELSEIF DISE(IE)<SDIS ;
   5608                 SDIS := DISE(IE) ;
   5609                 SIE := IE ;
   5610                 ENDIF ;
   5611               ENDLOOP ;
   5612             EDGESEC X Z IM SIE XS ZS DIS ; %EDGESEC: 5487
   5613             RS := LEN2(XS,ZS) ; %LEN2: 5454
   5614             BY := POLB(RS,BXBDT,IM0,BXNOB(IM0)) ; %POLB: 5572
   5615             LOOP IE 1 4 ;
   5616               IF SIDE(IE)*DISE(IE)<6*DMAX ;
   5617                 EDGESEC X Z IM IE XS ZS DIS ; %EDGESEC: 5487
   5618                 RS := LEN2(XS,ZS) ; %LEN2: 5454
   5619                 DH := POLB(RS,BXDDT,IM0,BXNOD(IM0)) ; %POLB: 5572
   5620                 BY := BY*ENGE(1,1,1,-DIS/(2*DH)) ; %ENGE:  714
   5621                 ENDIF ;
   5622               ENDLOOP ;
   5623             ENDIF ;
   5624           ENDIF ;
   5625         MCSDIST := MCSDIST+BY ;
   5626         ENDLOOP ;
   5627       ELSEIF LHE=1 ;
   5628       LOOP IM 1 BXIBOX ;
   5629         PTBOX X Z IM INSIDE DISE SIDE ; %PTBOX: 5533
   5630         IF INSIDE=1 ;
   5631           IM0 := BXBOXID(IM) ;
   5632           R := LEN2(X,Z) ; %LEN2: 5454
   5633           MCSDIST := POLB(R,BXBDT,IM0,BXNOB(IM0))+0*DA(1) ; %POLB: 557
                  2
   5634           ENDIF ;
   5635         ENDLOOP ;
   5636       ENDIF ;
   5637     ENDFUNCTION ;
   5638   FUNCTION FOURIERGAUSS X Z ;
   5639     VARIABLE RAD NM1+1 ;
   5640     VARIABLE PHI NM1+1 ;
   5641     VARIABLE IB 1;
   5642     VARIABLE IL 1;
   5643     VARIABLE I 1 ;
   5644     VARIABLE NB 1 ;
   5645     VARIABLE R 1 ;
   5646     VARIABLE NS 1 ;
   5647     VARIABLE NL 1 ;
   5648     VARIABLE SIGMA 1 ;
   5649     VARIABLE DX 1 ;
   5650     VARIABLE W NM1+1 ;
   5651     VARIABLE RES NM1+1 ;
   5652     VARIABLE ARG NM1+1 ;
   5653     RAD := SQRT(SQR(X)+SQR(Z)) ;
   5654     PHI := ATAN2(Z,X) ; %ATAN2:  244
   5655     NB := MFD(1,1) ;
   5656     DX := ABS(MFD(3,2)|1-MFD(2,2)|1) ;
   5657     SIGMA := PPOL(1) ;
   5658     FOURIERGAUSS := 0 ;
   5659     LOOP IB 2 NB+1 ;
   5660       NL := MFD(IB,1) ;
   5661       R := MFD(IB,2)|1 ;
   5662       NS := MFD(IB,2)|2 ;
   5663       ARG := (R - RAD)/DX ;
   5664       IF ABS(RE(ARG))<8*SIGMA ;
   5665         W := EXP(-SQR(ARG/SIGMA)) ;
   5666         IF     IB=2 ;
   5667           LOOP I 1 4 ;
   5668             W := W+EXP(-SQR((ARG-I)/SIGMA)) ;
   5669             ENDLOOP ;
   5670           ELSEIF IB=NB+1 ;
   5671           LOOP I 1 4 ;
   5672             W := W+EXP(-SQR((ARG+I)/SIGMA)) ;
   5673             ENDLOOP ;
   5674           ENDIF ;
   5675         RES := MFD(IB,3)|1 ;
   5676         LOOP IL 4 NL+1 ;
   5677           ARG := (IL-3)*NS*PHI+MFD(IB,IL)|2 ;
   5678           RES := RES+MFD(IB,IL)|1*SIN(ARG) ;
   5679           ENDLOOP ;
   5680         FOURIERGAUSS := FOURIERGAUSS+RES*W ;
   5681         ENDIF ;
   5682       ENDLOOP ;
   5683     FOURIERGAUSS := FOURIERGAUSS/(SQRT(PI)*SIGMA) ;
   5684     ENDFUNCTION ;
   5685   PROCEDURE POTFLD X S ;
   5686     VARIABLE I 1 ;
   5687     VARIABLE JPOL 1 ;
   5688     VARIABLE JEM 1 ;
   5689     VARIABLE P NM3 ;
   5690     PROCEDURE POFF P H IX IY IS ;
   5691       VARIABLE HF NM3 ;
   5692       VARIABLE HI NM3 ;
   5693       VARIABLE I 1 ;
   5694       VARIABLE POLD NM3 ;
   5695       HF := 1+H*DA(IX) ;
   5696       HI := 1/HF ;
   5697       POLD := P ;
   5698       LOOP I 2 NOC+2 2 ;
   5699         P := POLD - INTEG(IY,INTEG(IY,            HI*( DER(IX,HF*DER(I
                  X,P)) + DER(IS,HI*DER(IS,P)) ) )) ; %INTEG:  310 %INTEG:  31
                  0 %DER:  307 %DER:  307 %DER:  307 %DER:  307
   5700         ENDLOOP ;
   5701       ENDPROCEDURE ;
   5702     PROCEDURE PMFF P L IX IY IS ;
   5703       VARIABLE S NM3 ;
   5704       VARIABLE R2 NM2 ;
   5705       VARIABLE R2N NM2 ;
   5706       VARIABLE K 1 ;
   5707       R2 := DD(IX)*DD(IX)+DD(IY)*DD(IY) ;
   5708       R2N := 1 ;
   5709       S := P ;
   5710       IF L=20 ;
   5711         L:= 0 ;
   5712         ENDIF ;
   5713       LOOP K L+2 NOC+1 2 ;
   5714         S := DER(IS,DER(IS,S))/(L*L-K*K) ; %DER:  307 %DER:  307
   5715         R2N := R2N*R2 ;
   5716         P := P + S*R2N ;
   5717         ENDLOOP ;
   5718       ENDPROCEDURE ;
   5719     PROCEDURE FCCT ;
   5720       VARIABLE ACCT NM1 8 ;
   5721       VARIABLE X2 NM2 ;
   5722       X2 := X(2) ;
   5723       X(2) := 0*X(2) ;
   5724       ACCT(1) := EFX ;
   5725       ACCT(2) := EFY ;
   5726       ACCT(3) := EFZ ;
   5727       ACCT(4) := V ;
   5728       ACCT(5) := BFX ;
   5729       ACCT(6) := BFY ;
   5730       ACCT(7) := BFZ ;
   5731       ACCT(8) := W ;
   5732       POLVAL 1 ACCT 8    X TWOND    ACCT 8 ;
   5733       EFX := ACCT(1) ;
   5734       EFY := ACCT(2) ;
   5735       EFZ := ACCT(3) ;
   5736       V := ACCT(4) ;
   5737       BFX := ACCT(5) ;
   5738       BFY := ACCT(6) ;
   5739       BFZ := ACCT(7) ;
   5740       W := ACCT(8) ;
   5741       X(2) := X2 ;
   5742       ENDPROCEDURE ;
   5743     PROCEDURE INTERP ;
   5744       VARIABLE AC 100 3 ;
   5745       VARIABLE BC 3 3 ;
   5746       FUNCTION POL X P N ;
   5747         VARIABLE I 1 ;
   5748         POL := P(N+1) ;
   5749         LOOP I N 1 -1 ;
   5750           POL := POL*X+P(I) ;
   5751           ENDLOOP ;
   5752         ENDFUNCTION ;
   5753       LOOP I NN 2 -1 ;
   5754         IF S<SN(I) ;
   5755           INP := I-1 ;
   5756           ENDIF ;
   5757         ENDLOOP ;
   5758       P:=POL((2*(S+DD(2))-SN(INP)-SN(INP+1))/(SN(INP+1)-SN(INP)),PN,2*
                  NPG+1); %POL: 5746
   5759       BC(1) := DD(1) ;
   5760       BC(2) := S-SN(INP)+DD(2) ;
   5761       BC(3) := DD(3) ;
   5762       P := 1-P ;
   5763       AC(1) := HN(INP) + 0*DD(2) ;
   5764       AC(2) := VN(INP) + 0*DD(2) ;
   5765       AC(3) := WN(INP) + 0*DD(2) ;
   5766       POLVAL 1 AC 3 BC 3 AC 3 ;
   5767       H :=    AC(1)*P ;
   5768       V :=    AC(2)*P ;
   5769       W :=    AC(3)*P ;
   5770       BC(1) := DD(1) ;
   5771       BC(2) := S-SN(INP+1)+DD(2) ;
   5772       BC(3) := DD(3) ;
   5773       P := 2-P;
   5774       AC(1) := HN(INP+1) + 0*DD(2) ;
   5775       AC(2) := VN(INP+1) + 0*DD(2) ;
   5776       AC(3) := WN(INP+1) + 0*DD(2) ;
   5777       POLVAL 1 AC 3 BC 3 AC 3 ;
   5778       H := (H+AC(1)*P)/2 ;
   5779       V := (V+AC(2)*P)/2 ;
   5780       W := (W+AC(3)*P)/2 ;
   5781       ENDPROCEDURE ;
   5782     FUNCTION ENGEP IMP IEE IEM S ;
   5783       VARIABLE ENGEPP 100 ;
   5784       ENGEP :=       ENGEC(IMP,IEE,IEM,1) + S*(   ENGEC(IMP,IEE,IEM,2)
                                  + S*(   ENGEC(IMP,IEE,IEM,3) + S*(   ENGEC(I
                  MP,IEE,IEM,4)                + S*(   ENGEC(IMP,IEE,IEM,5) + 
                  S*    ENGEC(IMP,IEE,IEM,6))))) ;
   5785       ENGEPP :=      ENGEC(IMP,IEE,IEM,2) + S*( 2*ENGEC(IMP,IEE,IEM,3)
                                  + S*( 3*ENGEC(IMP,IEE,IEM,4) + S*( 4*ENGEC(I
                  MP,IEE,IEM,5)                + S*  5*ENGEC(IMP,IEE,IEM,6) ))
                  ) ;
   5786       IF     ABS(CONS(ENGEP))>30 ;
   5787         ENGEP := 0 ;
   5788         ELSEIF TRUE ;
   5789         ENGEP := EXP(ENGEP) ;
   5790         ENGEP := -ENGEPP/(2+ENGEP+1/ENGEP) ;
   5791         ENDIF ;
   5792       ENDFUNCTION ;
   5793     FUNCTION EDGE X ;
   5794       VARIABLE I 1 ;
   5795       EDGE := 0 ;
   5796       LOOP I 16 8 -1 ;
   5797         EDGE := (EDGE+PPOL(I))*(-X) ;
   5798         ENDLOOP ;
   5799       EDGE := EDGE+PPOL(7) ;
   5800       IF CONS(EDGE)<-60 ;
   5801         EDGE := -60 ;
   5802         ELSEIF CONS(EDGE)>30 ;
   5803         EDGE := 30 ;
   5804         ENDIF ;
   5805       EDGE := 1/(1+EXP(EDGE)) ;
   5806       ENDFUNCTION ;
   5807     PROCEDURE DIST X Z XP ZP XC ZC H D LEV DIS XS ZS IDS ;
   5808       VARIABLE P 10 ;
   5809       VARIABLE SCR 100 ;
   5810       XS := X ;
   5811       ZS := Z ;
   5812       IDS := 0 ;
   5813       IF CONS(H)#0 ;
   5814         P := (X-XC)*(XP-XC)+(Z-ZC)*(ZP-ZC) ;
   5815         IF CONS(P)>0 ;
   5816           SCR := SQRT(SQR(X-XC)+SQR(Z-ZC)) ;
   5817           DIS := SCR - (ABS(CONS(H))/CONS(H))/H ;
   5818           DIS := DIS*H/ABS(H) ;
   5819           IF LEV=0 ;
   5820             IF CONS(DIS)>0 ;
   5821               IF CONS(H)<0 ;
   5822                 SCR := -SCR ;
   5823                 ENDIF ;
   5824               XS := X-DIS*(X-XC)/SCR ;
   5825               ZS := Z-DIS*(Z-ZC)/SCR ;
   5826               IDS := 1 ;
   5827               ENDIF ;
   5828             ENDIF ;
   5829           ELSEIF TRUE ;
   5830           DIS := -100*D ;
   5831           DIS := DIS*H/ABS(H) ;
   5832           ENDIF ;
   5833         ELSEIF TRUE ;
   5834         DIS := (X-XP)*(XP-XC)+(Z-ZP)*(ZP-ZC) ;
   5835         IF LEV=0 ;
   5836           IF CONS(DIS)>0 ;
   5837             XS := X-DIS*(XP-XC) ;
   5838             ZS := Z-DIS*(ZP-ZC) ;
   5839             IDS := 1 ;
   5840             ENDIF ;
   5841           ENDIF ;
   5842         ENDIF ;
   5843       ENDPROCEDURE ;
   5844     PROCEDURE ENGESIDES X Z D LEV IEM XF ZF ENGES ;
   5845       VARIABLE XS 100 ;
   5846       VARIABLE ZS 100 ;
   5847       VARIABLE IDS 1 ;
   5848       VARIABLE DIS1 100 ;
   5849       VARIABLE DIS2 100 ;
   5850       XF := X ;
   5851       ZF := Z ;
   5852       DIST X Z PPOL(5) PPOL(6)  PPOL(7)  PPOL(8)  PPOL(13) D LEV      
                        DIS1 XS ZS IDS ; %DIST: 5807
   5853       IF IDS=1 ;
   5854         XF := XS ;
   5855         ZF := ZS ;
   5856         ENDIF ;
   5857       DIST X Z PPOL(9) PPOL(10) PPOL(11) PPOL(12) PPOL(14) D LEV      
                        DIS2 XS ZS IDS ; %DIST: 5807
   5858       IF IDS=1 ;
   5859         XF := XS ;
   5860         ZF := ZS ;
   5861         ENDIF ;
   5862       ENGES := ENGE(1,1,IEM,DIS1/D/2)*ENGE(1,2,IEM,DIS2/D/2) ; %ENGE: 
                   714 %ENGE:  714
   5863       ENDPROCEDURE ;
   5864     FUNCTION CENT X Z DR PHI0 ;
   5865       VARIABLE PH 1 ;
   5866       IF CONS(X)=0 ;
   5867         PH := 0.5*PI ;
   5868         IF CONS(Z)<0 ;
   5869           PH := -0.5*PI ;
   5870           ENDIF ;
   5871         ELSEIF CONS(X)>0 ;
   5872         PH := ATAN(CONS(Z)/CONS(X)) ;
   5873         ELSEIF TRUE ;
   5874         PH := ATAN(CONS(Z)/CONS(X))+PI ;
   5875         ENDIF ;
   5876       PH := PH-0.5*PHI0 ;
   5877       CENT := PPOL(21)+PH*(PPOL(22)+PH*(PPOL(23)+PH*PPOL(24)))        
                           +DR*(PPOL(25)+PH*(PPOL(26)+PH*(PPOL(27)+PH*PPOL(28)
                  ))) ;
   5878       CENT := CENT+DR*DR*(PPOL(29)+PH*(PPOL(30)+PH*(PPOL(31)+PH*PPOL(3
                  2))))                 +DR*DR*DR*(PPOL(33)+PH*(PPOL(34)+PH*(P
                  POL(35)+PH*PPOL(36)))) ;
   5879       ENDFUNCTION ;
   5880     FUNCTION BENDIST X Z IC ;
   5881       VARIABLE XR0 100 ;
   5882       VARIABLE XR 100 ;
   5883       VARIABLE XRR 100 ;
   5884       VARIABLE I 1 ;
   5885       VARIABLE XF 100 ;
   5886       VARIABLE ZF 100 ;
   5887       VARIABLE ENGES 100 ;
   5888       VARIABLE IEM 1 ;
   5889       IEM := 1 ;
   5890       IF IC<0 ;
   5891         IEM := 2 ;
   5892         ENDIF ;
   5893       ENGESIDES X Z PPOL(4) 0 IEM XF ZF ENGES ; %ENGESIDES: 5844
   5894       XR0 := SQRT(SQR(XF-PPOL(2))+SQR(ZF-PPOL(3)))-ABS(PPOL(2)) ;
   5895       IF IC=2 ;
   5896         BENDIST := CENT(XF-PPOL(2),ZF-PPOL(3),XR0,PPOL(20)) ; %CENT: 5
                  864
   5897         ELSEIF LO(1) ;
   5898         XR := XR0/ABS(PPOL(2)) ;
   5899         XRR := 1 ;
   5900         BENDIST := 1 ;
   5901         LOOP I 1 PPOL(20) ;
   5902           XRR := XRR*XR ;
   5903           BENDIST := BENDIST-PPOL(20+I)*XRR ;
   5904           ENDLOOP ;
   5905         IF IC=-1 ;
   5906           BENDIST := BENDIST*XR0 ;
   5907           ENDIF ;
   5908         ENDIF ;
   5909       BENDIST := BENDIST*PPOL(1)*ENGES ;
   5910       ENDFUNCTION ;
   5911     PROCEDURE POTS ;
   5912       VARIABLE P1 NM3 ;
   5913       VARIABLE IS 1 ;
   5914       VARIABLE SL 1 ;
   5915       V := 0*DD(1) ;
   5916       W := 0*DD(2) ;
   5917       H := 0 ;
   5918       IF NSDP=20 ;
   5919         INTERP ; %INTERP: 5743
   5920         ENDIF ;
   5921       LOOP I 1 NPOL ;
   5922         JPOL := ABS(MPOL(I)) ;
   5923         JEM := (3-MPOL(I)/JPOL)/2 ;
   5924         IF     NSDP=0 ;
   5925           P := PPOL(I) ;
   5926           ELSEIF NSDP=1 ;
   5927           P := PPOL(I)*ENGE(MOD(JPOL,20),1,JEM,-(S+DD(2))/DR/2) ; %ENG
                  E:  714 %MOD:  210
   5928           ELSEIF NSDP=2 ;
   5929           P := PPOL(I)*ENGE(MOD(JPOL,20),2,JEM,(S+DD(2))/DR/2) ; %ENGE
                  :  714 %MOD:  210
   5930           ELSEIF NSDP=3 ;
   5931           P := PPOL(I)*EXP(-SQR((S+DD(2))/DR)) ;
   5932           ELSEIF NSDP=4 ;
   5933           P := PPOL(I)*(S+DD(2)) ;
   5934           ELSEIF NSDP=5 ;
   5935           P := PPOL(I)*(S+DD(2))*ISRT(1+SQR((S+DD(2))/DR)) ;
   5936           ELSEIF NSDP=6 ;
   5937           P :=     LOG(COSH((S+DD(2))/DR+PPOL(2))/COSH((S+DD(2))/DR+PP
                  OL(3))) ;
   5938           P := P + LOG(COSH((S+DD(2))/DR-PPOL(2))/COSH((S+DD(2))/DR-PP
                  OL(3))) ;
   5939           P := P * PPOL(1) ;
   5940           ELSEIF NSDP=7 ;
   5941           P := PPOL(1)*DR*ATAN((S+DD(2))/DR) ;
   5942           ELSEIF NSDP=8 ;
   5943           IF S<0 ;
   5944             P := LOG((1+EXP( 2/DR*(S+DD(2))))/(1+EXP( 2*(S+DD(2)-PPOL(
                  2))/DR)))         -PPOL(2)/DR ;
   5945             ELSEIF S>PPOL(2) ;
   5946             P := LOG((1+EXP(-2/DR*(S+DD(2))))/(1+EXP(-2*(S+DD(2)-PPOL(
                  2))/DR)))         +PPOL(2)/DR ;
   5947             ELSEIF TRUE ;
   5948             P := LOG((1+EXP(-2/DR*(S+DD(2))))/(1+EXP( 2*(S+DD(2)-PPOL(
                  2))/DR)))+         (2*(S+DD(2))-PPOL(2))/DR ;
   5949             ENDIF ;
   5950           P := PPOL(1)*P ;
   5951           ELSEIF NSDP=9 ;
   5952           P :=     (S+DD(2)+PPOL(3))*ATAN((S+DD(2)+PPOL(3))/DR) ;
   5953           P := P + (S+DD(2)-PPOL(3))*ATAN((S+DD(2)-PPOL(3))/DR) ;
   5954           P := P - (S+DD(2)+PPOL(2))*ATAN((S+DD(2)+PPOL(2))/DR) ;
   5955           P := P - (S+DD(2)-PPOL(2))*ATAN((S+DD(2)-PPOL(2))/DR) ;
   5956           P := P * PPOL(1) ;
   5957           ELSEIF NSDP=10 ;
   5958           P := SQRT(SQR(S+DD(2))+SQR(DR))-SQRT(SQR(S+DD(2)-PPOL(2))+SQ
                  R(DR)) ;
   5959           P := P * PPOL(1) ;
   5960           ELSEIF NSDP=11 ;
   5961           P := PPOL(1)*(S+DD(2)) ;
   5962           ELSEIF NSDP=12 ;
   5963           P := GAUSS1(S+DD(2),PPOL(1),PPOL(2),PPOL(3),I,MFD,IS) ; %GAU
                  SS1:  624
   5964           MFP(1) := MFP(1)+IS ;
   5965           ELSEIF NSDP=13 ;
   5966           P1 := SQRT(SQR(S+DD(2))+SQR(PPOL(4))) ;
   5967           P :=     SQR(S+DD(2))*LOG(PPOL(4)+P1) + PPOL(4)*P1 ;
   5968           P1 := SQRT(SQR(S+DD(2))+SQR(PPOL(3))) ;
   5969           P := P - SQR(S+DD(2))*LOG(PPOL(3)+P1) - PPOL(3)*P1 ;
   5970           P1 := SQRT(SQR(S-PPOL(2)+DD(2))+SQR(PPOL(4))) ;
   5971           P := P - SQR(S-PPOL(2)+DD(2))*LOG(PPOL(4)+P1) - PPOL(4)*P1 ;

   5972           P1 := SQRT(SQR(S-PPOL(2)+DD(2))+SQR(PPOL(3))) ;
   5973           P := P + SQR(S-PPOL(2)+DD(2))*LOG(PPOL(3)+P1) + PPOL(3)*P1 ;

   5974           P := P * PPOL(1) ;
   5975           ELSEIF NSDP=14 ;
   5976           P := 0 ;
   5977           LOOP IS 1 PPOL(1) ;
   5978             SL := S-MFD(IS,5) ;
   5979             P1 := SQRT(SQR(SL+DD(2))+SQR(MFD(IS,4))) ;
   5980             P := P+MFD(IS,1)*(SQR(SL+DD(2))*LOG(MFD(IS,4)+P1)+MFD(IS,4
                  )*P1) ;
   5981             P1 := SQRT(SQR(SL+DD(2))+SQR(MFD(IS,3))) ;
   5982             P := P-MFD(IS,1)*(SQR(SL+DD(2))*LOG(MFD(IS,3)+P1)+MFD(IS,3
                  )*P1) ;
   5983             P1 := SQRT(SQR(SL-MFD(IS,2)+DD(2))+SQR(MFD(IS,4))) ;
   5984             P := P-MFD(IS,1)*                (SQR(SL-MFD(IS,2)+DD(2))*
                  LOG(MFD(IS,4)+P1)+MFD(IS,4)*P1) ;
   5985             P1 := SQRT(SQR(SL-MFD(IS,2)+DD(2))+SQR(MFD(IS,3))) ;
   5986             P := P+MFD(IS,1)*                (SQR(SL-MFD(IS,2)+DD(2))*
                  LOG(MFD(IS,3)+P1)+MFD(IS,3)*P1) ;
   5987             ENDLOOP ;
   5988           ELSEIF TRUE ;
   5989           WRITE 6 ' *** ERROR in POTFLD' ;
   5990           QUIT 0 ;
   5991           ENDIF ;
   5992         IF     MPOL(I)=1  ;
   5993           H := H +      P/CHIM1 ;
   5994           ELSEIF MPOL(I)=-1 ;
   5995           H := H + 1000*P/CHIE1 ;
   5996           ENDIF ;
   5997         IF     LOFF=1 ;
   5998           IF     JEM=1 ;
   5999             P := P*PMM(JPOL) ;
   6000             IF NSDP#0 ;
   6001               PMFF P JPOL 1 3 2 ; %PMFF: 5702
   6002               ENDIF ;
   6003             W := W + P ;
   6004             ELSEIF JEM=2 ;
   6005             P := P*PEM(JPOL) ;
   6006             IF NSDP#0 ;
   6007               PMFF P JPOL 1 3 2 ; %PMFF: 5702
   6008               ENDIF ;
   6009             V := V + P ;
   6010             ENDIF ;
   6011           ELSEIF LOFF=2 ;
   6012           IF     JEM=1 ;
   6013             IF JPOL#1 ;
   6014               P := P*DX(JPOL-1) ;
   6015               ENDIF ;
   6016             P := P*DD(3) ;
   6017             W := W + P ;
   6018             ELSEIF JEM=2 ;
   6019             P := P*DX(JPOL) ;
   6020             V := V + P ;
   6021             ENDIF ;
   6022           ENDIF ;
   6023         ENDLOOP ;
   6024       IF LOFF=2 ;
   6025         POFF V H 1 3 2 ; %POFF: 5690
   6026         POFF W H 1 3 2 ; %POFF: 5690
   6027         ENDIF ;
   6028       H := CONS(H) ;
   6029       ENDPROCEDURE ;
   6030     PROCEDURE POTXZ ;
   6031       VARIABLE CPHI 20 ;
   6032       VARIABLE SPHI 20 ;
   6033       PROCEDURE FIELDXZ X Z T V W ;
   6034         VARIABLE F 100 2 ;
   6035         VARIABLE XPP 200 20 ;
   6036         VARIABLE ZZ 100 ;
   6037         VARIABLE XR0 100 ;
   6038         VARIABLE I 1 ;
   6039         VARIABLE J 1 ;
   6040         VARIABLE R 1 ;
   6041         VARIABLE NM 1 ;
   6042         VARIABLE XR 100 ;
   6043         VARIABLE XF 100 ;
   6044         VARIABLE ZF 100 ;
   6045         VARIABLE ENGES 100 ;
   6046         VARIABLE XS 100 ;
   6047         VARIABLE ZS 100 ;
   6048         VARIABLE IDS 1 ;
   6049         VARIABLE DIS1 100 ;
   6050         VARIABLE DIS2 100 ;
   6051         BFY := 0 ;
   6052         V := 0 ;
   6053         IF (NSDP=-1)+(NSDP=-2) ;
   6054           EFX := 0 ;
   6055           EFZ := 0 ;
   6056           XPP(1) := 1 ;
   6057           LOOP I 2 20 ;
   6058             XPP(I) := XPP(I-1)*X ;
   6059             ENDLOOP ;
   6060           LOOP I 1 NPOL ;
   6061             JPOL := ABS(MPOL(I)) ;
   6062             JEM := (3-MPOL(I)/JPOL)/2 ;
   6063             P := XPP(JPOL)*PPOL(I) ;
   6064             ZZ := Z/DR/2 ;
   6065             IF  NSDP=-1 ;
   6066               ZZ := -ZZ ;
   6067               ENDIF ;
   6068             IF     JEM=1 ;
   6069               BFY := BFY + P*ENGE(1,1,JEM,ZZ) ; %ENGE:  714
   6070               ELSEIF JEM=2 ;
   6071               EFX := EFX-1000*P*JPOL*ENGE(1,1,JEM,ZZ) ; %ENGE:  714
   6072               IF NSDP=-1 ;
   6073                 P := -P ;
   6074                 ENDIF ;
   6075               EFZ := EFZ-1000*P*X*ENGEP(1,1,JEM,ZZ)/DR/2 ; %ENGEP: 578
                  2
   6076               ENDIF ;
   6077             ENDLOOP ;
   6078           F(1) :=  CPHI*EFX+SPHI*EFZ+0*DD(1) ;
   6079           F(2) := -SPHI*EFX+CPHI*EFZ+0*DD(1) ;
   6080           POTI F 2 V ; %POTI:  586
   6081           V := - V*.001 ;
   6082           ELSEIF NSDP=-3 ;
   6083           BFY := PPOL(1)*COS((PPOL(2)+PPOL(5)*Z)*Z) ;
   6084           BFY := EDGE(Z/PPOL(3))*EDGE((-Z+PPOL(4))/PPOL(3))*BFY ; %EDG
                  E: 5793 %EDGE: 5793
   6085           ELSEIF NSDP=-4 ;
   6086           IF MFP(2)=1 ;
   6087             MFP(2) := 0 ;
   6088             LOOP I MFP(3) MFP(4) MFP(5) ;
   6089               LOOP J MFP(6) MFP(7) MFP(8) ;
   6090                 WRITE 98 SF(BENDIST(I,J,1),'(G23.16)') ; %SF:  285 %BE
                  NDIST: 5880
   6091                 ENDLOOP ;
   6092               ENDLOOP ;
   6093             CLOSEF 98 ;
   6094             ENDIF ;
   6095           BFY := BENDIST(X,Z,1) ; %BENDIST: 5880
   6096           ELSEIF NSDP=-5 ;
   6097           BFY := GAUSS(X,Z,PPOL(1),PPOL(2),PPOL(3),PPOL(4),PPOL(5),MFD
                  ,J) ; %GAUSS:  651
   6098           MFP(1) := MFP(1)+J ;
   6099           ELSEIF NSDP=-6 ;
   6100           BFY := FOURIERGAUSS(X,Z) ; %FOURIERGAUSS: 5638
   6101           ELSEIF NSDP=-7 ;
   6102           IF MFP(2)=1 ;
   6103             MFP(2) := 0 ;
   6104             LOOP I MFP(3) MFP(4) MFP(5) ;
   6105               LOOP J MFP(6) MFP(7) MFP(8) ;
   6106                 WRITE 98 SF(BENDIST(I,J,2),'(G23.16)') ; %SF:  285 %BE
                  NDIST: 5880
   6107                 ENDLOOP ;
   6108               ENDLOOP ;
   6109             CLOSEF 98 ;
   6110             ENDIF ;
   6111           BFY := BENDIST(X,Z,2) ; %BENDIST: 5880
   6112           ELSEIF NSDP=-8 ;
   6113           IF MFP(2)=1 ;
   6114             MFP(2) := 0 ;
   6115             LOOP I MFP(3) MFP(4) MFP(5) ;
   6116               LOOP J MFP(6) MFP(7) MFP(8) ;
   6117                 WRITE 98 SF(MCSDIST(I,J),'(G23.16)') ; %SF:  285 %MCSD
                  IST: 5555
   6118                 ENDLOOP ;
   6119               ENDLOOP ;
   6120             CLOSEF 98 ;
   6121             ENDIF ;
   6122           BFY := MCSDIST(X,Z) ; %MCSDIST: 5555
   6123           ELSEIF NSDP=-11 ;
   6124           V := BENDIST(X,Z,-1) ; %BENDIST: 5880
   6125           ELSEIF NSDP=-12 ;
   6126           XR0 := SQRT(SQR(X-PPOL(2))+SQR(Z)) ;
   6127           V := PPOL(1)*LOG(-XR0/PPOL(2)) ;
   6128           ELSEIF NSDP=-13 ;
   6129           XR0 := SQRT(SQR(X-PPOL(2))+SQR(Z)) ;
   6130           V := PPOL(1)*(1+PPOL(2)/XR0) ;
   6131           ELSEIF NSDP=-21 ;
   6132           R := PPOL(NPOL+1) ;
   6133           NM := MPOL(NPOL+1) ;
   6134           XF := X ;
   6135           ZF := Z ;
   6136           DIST X Z 0 0 0 1 0 DR 0 DIS1 XS ZS IDS ; %DIST: 5807
   6137           IF IDS=1 ;
   6138             XF := XS ;
   6139             ZF := ZS ;
   6140             ENDIF ;
   6141           DIST X Z PPOL(NPOL+2) PPOL(NPOL+3) PPOL(NPOL+4) PPOL(NPOL+5)
                   0                  DR 0 DIS2 XS ZS IDS ; %DIST: 5807
   6142           IF IDS=1 ;
   6143             XF := XS ;
   6144             ZF := ZS ;
   6145             ENDIF ;
   6146           J := 2 ;
   6147           XR0 := SQRT(SQR(X+R)+SQR(Z))-R ;
   6148           XR := 1 ;
   6149           BFY := PPOL(1) ;
   6150           LOOP I 2 MPOL(NM) ;
   6151             XR := XR*XR0 ;
   6152             IF I=MPOL(J) ;
   6153               BFY := BFY+PPOL(J)*XR ;
   6154               J := J+1 ;
   6155               ENDIF ;
   6156             ENDLOOP ;
   6157           IF MPOL(NPOL+2)=1 ;
   6158             XR0 := SQRT(SQR(XF+R)+SQR(ZF))-R ;
   6159             XR := XR0 ;
   6160             V := 0 ;
   6161             LOOP I 2 ABS(MPOL(NPOL)) ;
   6162               XR := XR*XR0 ;
   6163               IF I=ABS(MPOL(J)) ;
   6164                 ENGES := ENGE(I,1,2,DIS1/DR/2)*ENGE(I,2,2,DIS2/DR/2) ;
                   %ENGE:  714 %ENGE:  714
   6165                 V := V+PPOL(J)*XR*ENGES ;
   6166                 J := J+1 ;
   6167                 ENDIF ;
   6168               ENDLOOP ;
   6169             ENDIF ;
   6170           ELSEIF TRUE ;
   6171           WRITE 6 ' *** ERROR in FIELDXZ' ;
   6172           QUIT 0 ;
   6173           ENDIF ;
   6174         W := BFY*DD(3) ;
   6175         ENDPROCEDURE ;
   6176       CPHI := COS(X(13)) ;
   6177       SPHI := SIN(X(13)) ;
   6178       FIELDXZ X(11)+CPHI*DD(1)-SPHI*DD(2) X(12)+SPHI*DD(1)+CPHI*DD(2) 
                                                                        0  V W
                   ; %FIELDXZ: 6033
   6179       POFF V 0 1 3 2 ; %POFF: 5690
   6180       POFF W 0 1 3 2 ; %POFF: 5690
   6181       ENDPROCEDURE ;
   6182     IF LM=0 ;
   6183       LM := 1 ;
   6184       CO NOC+1 ; %CO:  965
   6185       JPOL := 1 ;
   6186       DX(1) := DD(1) ;
   6187       LOOP I 2 NOC+1 ;
   6188         DX(I) := DX(I-1)*DD(1) ;
   6189         ENDLOOP ;
   6190       LOOP I 1 NOC+1 ;
   6191         P := JPOL*DD(3) ;
   6192         POFF P 0 1 3 2 ; %POFF: 5690
   6193         PMM(I) := P ;
   6194         PEM(I+20) := P ;
   6195         JPOL := JPOL*DD(1) ;
   6196         P := JPOL ;
   6197         POFF P 0 1 3 2 ; %POFF: 5690
   6198         PEM(I) := P ;
   6199         PMM(I+20) := P ;
   6200         ENDLOOP ;
   6201       PEM(20) := 1 ;
   6202       PMM(20) := 1 ;
   6203       CO NOC-1 ; %CO:  965
   6204       ENDIF ;
   6205     CO NOC+1 ; %CO:  965
   6206     IF NSDP>-1 ;
   6207       POTS ; %POTS: 5911
   6208       ELSEIF NSDP<0 ;
   6209       POTXZ ; %POTXZ: 6030
   6210       ENDIF ;
   6211     EFX := -1000*DER(1,V) ; %DER:  307
   6212     EFY := -1000*DER(3,V) ; %DER:  307
   6213     EFZ := -1000*DER(2,V) ; %DER:  307
   6214     BFX :=       DER(1,W) ; %DER:  307
   6215     BFY :=       DER(3,W) ; %DER:  307
   6216     BFZ :=       DER(2,W) ; %DER:  307
   6217     IF NSDP<0 ;
   6218       H := CONS(BFY)/CHIM1-CONS(EFX)/CHIE1 ;
   6219       ENDIF ;
   6220     CO NOC-1 ; %CO:  965
   6221     IF LCCT=1 ;
   6222       FCCT ; %FCCT: 5719
   6223       ENDIF ;
   6224     ENDPROCEDURE ;
   6225   PROCEDURE ODE X S XP ;
   6226     VARIABLE ETA1 NM2                 ;
   6227     VARIABLE P0PZ NM2         ;
   6228     VARIABLE EPG  NM2          ;
   6229     VARIABLE EPHX NM2            ;
   6230     VARIABLE XP5  NM2      ;
   6231     VARIABLE POP0 1 ;
   6232     VARIABLE ETA10 1 ;
   6233     VARIABLE SCR  NM2 ;
   6234     VARIABLE LAMBDA NM2 ;
   6235     VARIABLE SCR0 NM2 ;
   6236     VARIABLE SCR1 NM2 ;
   6237     VARIABLE SCR2 NM2 ;
   6238     VARIABLE SCR3 NM2 ;
   6239     VARIABLE WX NM2 ;
   6240     VARIABLE WY NM2 ;
   6241     VARIABLE WZ NM2 ;
   6242     IF LRP#1 ;
   6243       WRITE 6 ' *** ERROR, call RP before ODE' ;
   6244       QUIT 0 ;
   6245       ENDIF ;
   6246     ETA10 := (1+0.001*CONS(X(15))/CONS(E0))*CONS(ETA) ;
   6247     IF ETA10<1E-10 ;
   6248       WRITE 6 ' *** VOLTAGE TOO HIGH ' ;
   6249       QUIT 0 ;
   6250       ENDIF ;
   6251     POP0 := SQRT((ETA10/CONS(ETA))*((2+ETA10)/(2+CONS(ETA)))) ;
   6252     TP1 := ((1+ETA10)/(1+CONS(ETA)))/CONS(POP0) ;
   6253     CHIM1 := CONS(CHIM)*POP0 ;
   6254     CHIE1 := CONS(CHIE)*POP0/TP1 ;
   6255     POTFLD X S ; %POTFLD: 5685
   6256     XP(11) := -SIN(X(13)) ;
   6257     XP(12) := COS(X(13)) ;
   6258     XP(14) := TP1/CONS(V0) ;
   6259     XP(13) := H ;
   6260     XP(15) := 0.001*CONS(Z0)*CONS(EFZ) ;
   6261     EPHX := 1+H*X(1) ;
   6262     EPG := 1+X(7) ;
   6263     ETA1 := ( 1+X(6) -0.001*(1+X(8))*(CONS(Z0)*(V-CONS(V))-X(15))/CONS
                  (E0) )              *CONS(ETA)/EPG ;
   6264     SCR := SQR(EPG)*(ETA1/CONS(ETA))*((2+ETA1)/(2+CONS(ETA))) ;
   6265     IF LKC=0 ;
   6266       P0PZ := ISRT(SCR-SQR(X(2))-SQR(X(4))) ;
   6267       ELSEIF LKC=1 ;
   6268       P0PZ := ISRT(SCR) ;
   6269       ENDIF ;
   6270     SCR := EPHX*P0PZ ;
   6271     XP5 := EPHX*EPG*((1+ETA1)/(1+CONS(ETA)))*P0PZ ;
   6272     XP(1) := SCR*X(2) ;
   6273     XP(2) := ( EFX/CONS(CHIE)*XP5               + (-BFY +X(4)*P0PZ*BFZ
                  )/CONS(CHIM)*EPHX )*(1+X(8)) + H/P0PZ ;
   6274     IF ND>1 ;
   6275       XP(3) := SCR*X(4) ;
   6276       XP(4) := ( EFY/CONS(CHIE)*XP5               + ( BFX -X(2)*P0PZ*B
                  FZ)/CONS(CHIM)*EPHX )*(1+X(8)) ;
   6277       ENDIF ;
   6278     IF ND>2 ;
   6279       XP(5) := -(XP5-CONS(XP5))*(1+CONS(ETA))/(2+CONS(ETA)) ;
   6280       ENDIF ;
   6281     XP(6) := 0*DD(6) ;
   6282     XP(7) := 0*DD(7) ;
   6283     XP(8) := 0*DD(8) ;
   6284     IF LSPN=1 ;
   6285       SCR1 := -SCR*(1+G0*(1+ETA1))*(1+X(8))/CONS(CHIM) ;
   6286       SCR0 := CONS(ETA)*(2+CONS(ETA))*(1+X(8))/EPG ;
   6287       LAMBDA := SCR*(X(2)*BFX+X(4)*BFY+BFZ/P0PZ)/CONS(CHIM) ;
   6288       SCR2 := SCR0*G0*LAMBDA/(2+ETA1)/EPG ;
   6289       SCR3 := SCR0*(G0+1/(2+ETA1))/(1+CONS(ETA))/CONS(CHIE)*EPHX ;
   6290       WX := SCR1*BFX + SCR2*X(2) + SCR3*(X(4)*P0PZ*EFZ-EFY) ;
   6291       WY := SCR1*BFY + SCR2*X(4) + SCR3*(EFX-X(2)*P0PZ*EFZ) + H ;
   6292       WZ := SCR1*BFZ + SCR2/P0PZ + SCR3*(X(2)*EFY-X(4)*EFX)*P0PZ ;
   6293       XP(21) := -WZ*X(24) + WY*X(27) ;
   6294       XP(22) := -WZ*X(25) + WY*X(28) ;
   6295       XP(23) := -WZ*X(26) + WY*X(29) ;
   6296       XP(24) :=  WZ*X(21) - WX*X(27) ;
   6297       XP(25) :=  WZ*X(22) - WX*X(28) ;
   6298       XP(26) :=  WZ*X(23) - WX*X(29) ;
   6299       XP(27) := -WY*X(21) + WX*X(24) ;
   6300       XP(28) := -WY*X(22) + WX*X(25) ;
   6301       XP(29) := -WY*X(23) + WX*X(26) ;
   6302       ENDIF ;
   6303     ENDPROCEDURE ;
   6304   FUNCTION HAMILTONIAN A V H ;
   6305     PROCEDURE HFULL ;
   6306       VARIABLE ETA NM2 ;
   6307       VARIABLE PREL NM2 ;
   6308       VARIABLE CHIM NM2 ;
   6309       ETA  := ((E0-.001*Z0*V)/M0)/AMUMEV ;
   6310       PREL := SQRT(ETA*(2+ETA)) ;
   6311       CHIM := (AMU*C/Z0/EZERO)*M0*PREL ;
   6312       HAMILTONIAN := A/CONS(CHIM) - (1+H*DD(1))*            SQRT((CHIM
                  /CONS(CHIM))*(CHIM/CONS(CHIM))-DD(2)*DD(2)-DD(4)*DD(4)) ;
   6313       ENDPROCEDURE ;
   6314     IF LRP#1 ;
   6315       WRITE 6 ' *** ERROR, call RP before HAMILTONIAN ' ;
   6316       QUIT 0 ;
   6317       ENDIF ;
   6318     CO NOC+1 ; %CO:  965
   6319     IF ABS(V)=0 ;
   6320       HAMILTONIAN := A/CONS(CHIM) - (1+H*DD(1))*HFAC ;
   6321       ELSEIF TRUE ;
   6322       HFULL ; %HFULL: 6305
   6323       ENDIF ;
   6324     CO NOC-1 ; %CO:  965
   6325     ENDFUNCTION ;
   6326   PROCEDURE RP E M Z ;
   6327     VARIABLE PHI NM1 ;
   6328     VARIABLE I 1 ;
   6329     VARIABLE NOM 1 ;
   6330     IF LOV#1 ;
   6331       WRITE 6 ' *** ERROR, call OV before RP ' ;
   6332       QUIT 0 ;
   6333       ENDIF ;
   6334     LRP := 1 ;
   6335     NOM := NOC ;
   6336     CO NO+1 ; %CO:  965
   6337     E0 := E ;
   6338     M0 := M ;
   6339     Z0 := Z ;
   6340     IF ND=3 ;
   6341       E0 := CONS(E0)*(1+DD(6)) ;
   6342       ENDIF ;
   6343     LOOP I 1 8 ;
   6344       XX(I) := DD(I) ;
   6345       IF I>TWOND ;
   6346         XX(I) := 0*DD(I) ;
   6347         ENDIF ;
   6348       ENDLOOP ;
   6349     XX(6) := (E0-CONS(E0))/CONS(E0) ;
   6350     XX(7) := (M0-CONS(M0))/CONS(M0) ;
   6351     XX(8) := (Z0-CONS(Z0))/CONS(Z0) ;
   6352     XX(21) := 1 ;
   6353     XX(22) := 0 ;
   6354     XX(23) := 0 ;
   6355     XX(24) := 0 ;
   6356     XX(25) := 1 ;
   6357     XX(26) := 0 ;
   6358     XX(27) := 0 ;
   6359     XX(28) := 0 ;
   6360     XX(29) := 1 ;
   6361     ETA   := E0/M0/AMUMEV ;
   6362     PHI := SQRT(ETA*(2+ETA)) ;
   6363     P0 := (AMUMEV*M0)*PHI ;
   6364     V0  := CLIGHT*(PHI/(1+ETA)) ;
   6365     TFAC := ((1+CONS(ETA))/(2+CONS(ETA)))*CONS(V0) ;
   6366     CHIM  := (AMU*CLIGHT/EZERO)*M0/Z0*PHI ;
   6367     CHIE := CHIM*V0 ;
   6368     HFAC := SQRT(SQR(CHIM/CONS(CHIM))-DD(2)*DD(2)-DD(4)*DD(4)) ;
   6369     CO NOM ; %CO:  965
   6370     ENDPROCEDURE ;
   6371   PROCEDURE RPR  CHI M Z ;
   6372     VARIABLE PHI 100 ;
   6373     VARIABLE ETA 100 ;
   6374     VARIABLE NOM 1 ;
   6375     NOM := NOC ;
   6376     RP 1 1 1 ; %RP: 6326
   6377     CO NO+1 ; %CO:  965
   6378     PHI := CHI/(AMU*CLIGHT/EZERO)/M*Z ;
   6379     ETA := SQRT(1+PHI*PHI) - 1 ;
   6380     RP ETA*M*AMUMEV M Z ; %RP: 6326
   6381     CO NOM ; %CO:  965
   6382     ENDPROCEDURE ;
   6383   PROCEDURE RPM  MEVC M Z ;
   6384     RP 1 1 1 ; %RP: 6326
   6385     RPR MEVC*(1E6/CLIGHT)/Z M Z ; %RPR: 6371
   6386     ENDPROCEDURE ;
   6387   PROCEDURE RPP E    ;
   6388     RP E 1.00727646688   1 ; %RP: 6326
   6389     G0 := 1.792847337 ;
   6390     ENDPROCEDURE ;
   6391   PROCEDURE RPE E    ;
   6392     RP E 5.485799110D-4 -1 ; %RP: 6326
   6393     G0 := 0.001159652187 ;
   6394     ENDPROCEDURE ;
   6395   PROCEDURE RPPI E Z ;
   6396     RP E 0.149834758     Z ; %RP: 6326
   6397     G0 := 0 ;
   6398     ENDPROCEDURE ;
   6399   PROCEDURE RPMU E   ;
   6400     RP E 0.1134289168   -1 ; %RP: 6326
   6401     G0 := 0.0011659160 ;
   6402     ENDPROCEDURE ;
   6403   PROCEDURE RPS LS G ;
   6404     LSPN := LS ;
   6405     IF G#0 ;
   6406       G0 := G ;
   6407       ENDIF ;
   6408     ENDPROCEDURE ;
   6409   PROCEDURE RK N X0 X1 Y0 H0 HS H1 EPS BS Z Y1 ERREST ;
   6410     VARIABLE I 1 ;
   6411     VARIABLE J 1 ;
   6412     VARIABLE K 1 ;
   6413     VARIABLE X 1 ;
   6414     VARIABLE H 1;
   6415     VARIABLE RFNORM 1 ;
   6416     VARIABLE HH0 1 ;
   6417     VARIABLE HH1 1 ;
   6418     VARIABLE ISTP 1 ;
   6419     VARIABLE FORM 10 ;
   6420     VARIABLE STR 400 ;
   6421     VARIABLE SCR 1 ;
   6422     PROCEDURE NORM N X AX ;
   6423       VARIABLE I 1 ;
   6424       AX := 0 ;
   6425       LOOP I 1 N ;
   6426         IF TYPE(X(I))=TYPE(DD(1)) ;
   6427           AX := MAX(AX,WABS(X(I),WAF)) ; %MAX:  204 %WABS:  304
   6428           ELSEIF         TRUE ;
   6429           AX := MAX(AX,ABS(X(I))) ; %MAX:  204
   6430           ENDIF ;
   6431         ENDLOOP ;
   6432       ENDPROCEDURE ;
   6433     IF LRKCO=0 ;
   6434       RKCO HSQR A B C D ;
   6435       LRKCO := 1 ;
   6436       ENDIF ;
   6437     OPENF 77 'RKLOG.DAT' 'UNKNOWN' ;
   6438     ISTP := 0 ;
   6439     STR := '# STEP    S                 DS' ;
   6440     IF LRKO>0 ;
   6441       WRITE 6 '## LRKO = '&SI(LRKO)&' ##' ; %SI:  288
   6442       STR := STR&'           POSITION(X,    Z,             Phi,'&     
                                 '           Radius)        By             Ex'
                  &                    '             Ez             Egain' ;
   6443       FORM := '(E15.7)' ;
   6444       ENDIF ;
   6445     WRITE 77 '#RUNGE KUTTA   S1,S2 = '&S(X0)&', '&S(X1)               
                  '#        HMIN,H,HMAX = '&S(H0)&', '&S(HS)&', '&S(H1)       
                          '#             EPS,BS = '&S(EPS)&', '&S(BS)       ST
                  R ; %S:  282 %S:  282 %S:  282 %S:  282 %S:  282 %S:  282 %S
                  :  282
   6446     LOOP I 1 N ;
   6447       Z(I,1) := Y0(I) ;
   6448       Z(I,2) := 0.D0 ;
   6449       ENDLOOP ;
   6450     H := ABS(HS) ;
   6451     HH0 := ABS(H0) ;
   6452     HH1 := ABS(H1) ;
   6453     IF X1-X0<0 ;
   6454       H := -H ;
   6455       HH0 := -HH0 ;
   6456       HH1 := -HH1 ;
   6457       ENDIF ;
   6458     X := X0 ;
   6459     RFNORM := 0 ;
   6460     ERREST := 0 ;
   6461     ISTP := 0 ;
   6462     STR := SF(ISTP,'(I6)')&SF(X,'(E18.10)')&SF(H,'(E13.5)') ; %SF:  28
                  5 %SF:  285 %SF:  285
   6463     IF LRKO>0 ;
   6464       SCR := LEN2(CONS(Z(11,1)),CONS(Z(12,1))) ; %LEN2: 5454
   6465       RKO := SCR&SCR ;
   6466       LOOP I 11 13 ;
   6467         STR := STR&SF(CONS(Z(I,1)),FORM) ; %SF:  285
   6468         ENDLOOP ;
   6469       STR := STR&SF(SCR,FORM)&SF(CONS(BFY),FORM)&SF(CONS(EFX),FORM)&  
                                    SF(CONS(EFZ),FORM)&SF(CONS(Z(15,1)),FORM) 
                  ; %SF:  285 %SF:  285 %SF:  285 %SF:  285 %SF:  285
   6470       ENDIF ;
   6471     WRITE 77 STR ;
   6472     WHILE X#X1 ;
   6473       IF RFNORM#0 ;
   6474         H := H*MIN(4,(EPS/RFNORM)^HSQR) ; %MIN:  207
   6475         ENDIF ;
   6476       IF ABS(H)>ABS(HH1) ;
   6477         H := HH1 ;
   6478         ELSEIF ABS(H)<ABS(HH0)*.99 ;
   6479         H := HH0 ;
   6480         WRITE 6 ' --- WARNING, minimum stepsize reached in RK' ;
   6481         ENDIF ;
   6482       IF (X+H-X1)*H>0 ;
   6483         H := X1-X ;
   6484         ENDIF ;
   6485       ISTP := ISTP + 1 ;
   6486       LOOP J 1 13 ;
   6487         LOOP I 1 N ;
   6488           Y0(I) := 0 ;
   6489           LOOP K 1 J-1 ;
   6490             Y0(I) := Y0(I) + Z(I,K+3)*B(J,K) ;
   6491             ENDLOOP ;
   6492           Y0(I) := H * Y0(I) + Z(I,1) ;
   6493           ENDLOOP ;
   6494         ODE Y0 X+H*A(J) Y1 ; %ODE: 6225
   6495         LOOP I 1 N ;
   6496           Z(I,J+3) := Y1(I) ;
   6497           ENDLOOP ;
   6498         ENDLOOP ;
   6499       LOOP I 1 N ;
   6500         Z(I,2) := 0 ;
   6501         Z(I,3) := 0 ;
   6502         LOOP J 1 13 ;
   6503           Z(I,2) := Z(I,2) + Z(I,J+3)*D(J) ;
   6504           Z(I,3) := Z(I,3) + Z(I,J+3)*C(J) ;
   6505           ENDLOOP ;
   6506         Y1(I) := (Z(I,3)-Z(I,2))*H ;
   6507         Z(I,3) := Z(I,3)*H+Z(I,1) ;
   6508         ENDLOOP ;
   6509       NORM N Y1 RFNORM ; %NORM: 6422
   6510       IF (RFNORM>BS)*(ABS(H/H0)>1.2) ;
   6511         H := H/3 ;
   6512         RFNORM := 0 ;
   6513         ELSEIF TRUE ;
   6514         LOOP I 1 N ;
   6515           Z(I,1) := Z(I,3) ;
   6516           ENDLOOP ;
   6517         X := X + H ;
   6518         STR := SF(ISTP,'(I6)')&SF(X,'(E18.10)')&SF(H,'(E13.5)') ; %SF:
                    285 %SF:  285 %SF:  285
   6519         IF LRKO>0 ;
   6520           SCR := LEN2(CONS(Z(11,1)),CONS(Z(12,1))) ; %LEN2: 5454
   6521           RKO := MIN((RKO|1),SCR)&MAX((RKO|2),SCR) ; %MIN:  207 %MAX: 
                   204
   6522           LOOP I 11 13 ;
   6523             STR := STR&SF(CONS(Z(I,1)),FORM) ; %SF:  285
   6524             ENDLOOP ;
   6525           STR := STR&SF(SCR,FORM)&SF(CONS(BFY),FORM)&SF(CONS(EFX),FORM
                  )&                          SF(CONS(EFZ),FORM)&SF(CONS(Z(15,
                  1)),FORM) ; %SF:  285 %SF:  285 %SF:  285 %SF:  285 %SF:  28
                  5
   6526           ENDIF ;
   6527         WRITE 77 STR ;
   6528         ERREST := ERREST + RFNORM ;
   6529         ENDIF ;
   6530       ENDWHILE ;
   6531     WRITE 77 '#ERROR ESTIMATE '&S(ERREST) ; %S:  282
   6532     LOOP I 1 N ;
   6533       Y1(I) := Z(I,1) ;
   6534       ENDLOOP ;
   6535     CLOSEF 77 ;
   6536     IF LRKO>0 ;
   6537       OS 'cp RKLOG.DAT RKLOG'&SI(LRKO)&'.DAT' ; %SI:  288
   6538       LRKO := LRKO+1 ;
   6539       ENDIF ;
   6540     ENDPROCEDURE ;
   6541   PROCEDURE DLACT ARR L ;
   6542     VARIABLE LP0PZ NM1 ;
   6543     LP0PZ := CONS(ETA) ;
   6544     LP0PZ := (1+ARR(6))*( 2*(1+ARR(7))+(1+ARR(6))*LP0PZ )/(2+LP0PZ) ;
   6545     IF LKC=0 ;
   6546       LP0PZ := L*ISRT(LP0PZ-SQR(ARR(2))-SQR(ARR(4))) ;
   6547       ELSEIF LKC=1 ;
   6548       LP0PZ := L*ISRT(LP0PZ) ;
   6549       ENDIF ;
   6550     ARR(1) := ARR(1) + LP0PZ*ARR(2) ;
   6551     IF ND>1 ;
   6552       ARR(3) := ARR(3) + LP0PZ*ARR(4) ;
   6553       ENDIF ;
   6554     IF ND>2 ;
   6555       LP0PZ := (1+ARR(7)+(1+ARR(6))*CONS(ETA))*LP0PZ/(1+CONS(ETA))-   
                        L ;
   6556       ARR(5) := ARR(5) - LP0PZ*(1+CONS(ETA))/(2+CONS(ETA)) ;
   6557       ENDIF ;
   6558     ENDPROCEDURE ;
   6559   PROCEDURE DL L ;
   6560     IF LUM#1 ;
   6561       WRITE 6 ' *** ERROR, call UM before DL' ;
   6562       QUIT 0 ;
   6563       ENDIF ;
   6564     DLACT MAP L ; %DLACT: 6541
   6565     UMS ; %UMS: 1469
   6566     DLACT MSC L ; %DLACT: 6541
   6567     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6568     DR := 0 ;
   6569     UPDATE 0 1 ; %UPDATE: 1261
   6570     ENDPROCEDURE ;
   6571   PROCEDURE PS D ;
   6572     DR := D ;
   6573     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   6574     UPDATE 0 0 ; %UPDATE: 1261
   6575     ENDPROCEDURE ;
   6576   PROCEDURE SDELE S1 S2 H1 H2 H3 D ;
   6577     VARIABLE ERREST 1 ;
   6578     VARIABLE I 1 ;
   6579     VARIABLE J 1 ;
   6580     VARIABLE EE0 1 ;
   6581     VARIABLE PP0 1 ;
   6582     VARIABLE TFAC0 1 ;
   6583     VARIABLE RKSCR NM2 29 16 ;
   6584     VARIABLE MMP NM2 29 ;
   6585     VARIABLE MMQ NM2 29 ;
   6586     LCCT := 1 ;
   6587     DR := D ;
   6588     IF LUM#1 ;
   6589       WRITE 6 ' *** ERROR, call UM before element' ;
   6590       QUIT 0 ;
   6591       ENDIF ;
   6592     LOOP I 1 8 ;
   6593       MMP(I) := XX(I) ;
   6594       ENDLOOP ;
   6595     LOOP I 9 29 ;
   6596       MMP(I) := 0 ;
   6597       ENDLOOP ;
   6598     LOOP I 21 29 4 ;
   6599       MMP(I) := 1 ;
   6600       ENDLOOP ;
   6601     MMP(11) := XLOC ;
   6602     MMP(12) := ZLOC ;
   6603     MMP(13) := PLOC ;
   6604     MMP(14) := TLOC ;
   6605     MMP(15) := VLOC ;
   6606     RK 29 CONS(S1) CONS(S2) MMP CONS(H1) CONS(H2) CONS(H3) EPS EPS*20 
                  RKSCR            MMQ ERREST ; %RK: 6409
   6607     LOOP I 1 8 ;
   6608       MSC(I) := MMQ(I) ;
   6609       ENDLOOP ;
   6610     LOOP I 1 3 ;
   6611       LOOP J 1 3 ;
   6612         SSCR(I,J) := MMQ((I-1)*3+J+20) ;
   6613         ENDLOOP ;
   6614       ENDLOOP ;
   6615     LOCSET MMQ(11) MMQ(12) MMQ(13) S2-S1 MMQ(15) MMQ(14) ; %LOCSET: 11
                  14
   6616     IF NSDP>-1 ;
   6617       IF VLOC#0 ;
   6618         PP0 := CONS(P0) ;
   6619         EE0 := CONS(E0) ;
   6620         TFAC0 := TFAC ;
   6621         RP E0+VLOC*.001 M0 Z0 ; %RP: 6326
   6622         VLOC := 0 ;
   6623         MSC(2) := MSC(2)*(PP0/CONS(P0)) ;
   6624         IF ND>1 ;
   6625           MSC(4) := MSC(4)*(PP0/CONS(P0)) ;
   6626           ENDIF ;
   6627         IF ND>2 ;
   6628           MSC(5) := MSC(5)*(TFAC/TFAC0) ;
   6629           MSC(6) := MSC(6)*(EE0/CONS(E0)) ;
   6630           ENDIF ;
   6631         ENDIF ;
   6632       ENDIF ;
   6633     ENDPROCEDURE ;
   6634   PROCEDURE SDELEREF S1 S2 H1 H2 H3 D ;
   6635     VARIABLE RKSCR 1 29 16 ;
   6636     VARIABLE MMP 1 29 ;
   6637     VARIABLE MMQ 1 29 ;
   6638     VARIABLE ERREST 1 ;
   6639     VARIABLE I 1 ;
   6640     VARIABLE LSPNO 1 ;
   6641     LSPNO := LSPN ;
   6642     LSPN := 0 ;
   6643     LCCT := 1 ;
   6644     DR := D ;
   6645     LOOP I 1 8 ;
   6646       MMP(I) := 0*XX(I) ;
   6647       ENDLOOP ;
   6648     LOOP I 9 29 ;
   6649       MMP(I) := 0 ;
   6650       ENDLOOP ;
   6651     MMP(11) := XLOC ;
   6652     MMP(12) := ZLOC ;
   6653     MMP(13) := PLOC ;
   6654     MMP(14) := TLOC ;
   6655     MMP(15) := VLOC ;
   6656     RK 29 CONS(S1) CONS(S2) MMP CONS(H1) CONS(H2) CONS(H3) EPS EPS*20 
                  RKSCR            MMQ ERREST ; %RK: 6409
   6657     LOCSET MMQ(11) MMQ(12) MMQ(13) S2 MMQ(15) MMQ(14) ; %LOCSET: 1114
   6658     LSPN := LSPNO ;
   6659     ENDPROCEDURE ;
   6660   PROCEDURE DSDED LDL L H1 H2 H3 D ;
   6661     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   6662     VARIABLE SM NM2 3 3 ;
   6663     VARIABLE SCE 1 ;
   6664     SCE := 2E-5 ;
   6665     UMS ; %UMS: 1469
   6666     DLACT MSC -LDL ; %DLACT: 6541
   6667     SNM MSC MS ; %SNM: 1531
   6668     SSNM SSCR SM ; %SSNM: 1546
   6669     LOCSET 0 -LDL 0 -LDL 0 0 ; %LOCSET: 1114
   6670     SDELE -LDL L+LDL H1 H2 H3 D ; %SDELE: 6576
   6671     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   6672     DLACT MSC -LDL ; %DLACT: 6541
   6673     IF L<1E-5 ;
   6674       LOCSET 0 L 0 L+SCE 0 0 ; %LOCSET: 1114
   6675       UPDATE 1 1 ; %UPDATE: 1261
   6676       SPOS := SPOS-SCE ;
   6677       ELSEIF LO(1) ;
   6678       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6679       UPDATE 1 1 ; %UPDATE: 1261
   6680       ENDIF ;
   6681     ENDPROCEDURE ;
   6682   PROCEDURE SIELE L D ;
   6683     VARIABLE XP NM2 29 ;
   6684     VARIABLE I 1 ;
   6685     VARIABLE RES NM1 ;
   6686     PROCEDURE SPNFLO ;
   6687       VARIABLE J 1 ;
   6688       VARIABLE K 1 ;
   6689       VARIABLE N 1 ;
   6690       VARIABLE VN NM2 3 3 ;
   6691       VARIABLE VNP NM2 3 3 ;
   6692       VARIABLE W NM2 3 3 ;
   6693       VARIABLE VNIJ NM2 ;
   6694       RES := 1 ;
   6695       N := 0 ;
   6696       LOOP I 1 3 ;
   6697         LOOP J 1 3 ;
   6698           W(I,J) := XP(3*(I-1)+J+20)*L ;
   6699           SSCR(I,J) := 0 ;
   6700           VNP(I,J) := 0 ;
   6701           ENDLOOP ;
   6702         VNP(I,I) := 1 ;
   6703         SSCR(I,I) := 1 ;
   6704         ENDLOOP ;
   6705       WHILE RES#0 ;
   6706         N := N+1 ;
   6707         RES := 0 ;
   6708         LOOP I 1 3 ;
   6709           LOOP J 1 3 ;
   6710             VNIJ := 0 ;
   6711             LOOP K 1 TWOND ;
   6712               VNIJ := VNIJ + XP(K)*DER(K,VNP(I,J)) ; %DER:  307
   6713               ENDLOOP ;
   6714             LOOP K 1 3 ;
   6715               VNIJ := VNIJ + W(K,J)*VNP(I,K) ;
   6716               ENDLOOP ;
   6717             RES := RES + ABS(VNIJ) ;
   6718             VN(I,J) := VNIJ/N ;
   6719             SSCR(I,J) := SSCR(I,J) + VN(I,J) ;
   6720             ENDLOOP ;
   6721           ENDLOOP ;
   6722         LOOP I 1 3 ;
   6723           LOOP J 1 3 ;
   6724             VNP(I,J) := VN(I,J) ;
   6725             ENDLOOP ;
   6726           ENDLOOP ;
   6727         IF N>200 ;
   6728           WRITE 6 ' $$$ ERROR in SPNFLO, no convergence ' ;
   6729           QUIT 0 ;
   6730           ENDIF ;
   6731         ENDWHILE ;
   6732       ENDPROCEDURE ;
   6733     IF LUM#1 ;
   6734       WRITE 6 ' *** ERROR, call UM before element' ;
   6735       QUIT 0 ;
   6736       ENDIF ;
   6737     DR := D ;
   6738     NSDP := 0 ;
   6739     LCCT := 0 ;
   6740     ODE XX 0 XP ; %ODE: 6225
   6741     LOOP I 1 TWOND ;
   6742       XP(I) := XP(I)*L ;
   6743       ENDLOOP ;
   6744     LOOP I 1 TWOND ;
   6745       DAFLO XP DD(I) RES TWOND ;
   6746       MSC(I) := RES ;
   6747       ENDLOOP ;
   6748     IF LSPN=1 ;
   6749       SPNFLO ; %SPNFLO: 6686
   6750       ENDIF ;
   6751     ENDPROCEDURE ;
   6752   PROCEDURE SYSCLM IAP L0 B0 D0 AA FF LL ;
   6753     VARIABLE FAC NM1 21 ;
   6754     VARIABLE MAG NM1 ;
   6755     VARIABLE I 1 ;
   6756     VARIABLE C 1 TWOND ;
   6757     VARIABLE LIN 2 ;
   6758     VARIABLE P NM1 ;
   6759     VARIABLE PR 1 ;
   6760     VARIABLE COP NM1 NV ;
   6761     VARIABLE BT 100 ;
   6762     VARIABLE J 1 ;
   6763     VARIABLE EP NM1 ;
   6764     VARIABLE MP NM1 ;
   6765     VARIABLE ZP NM1 ;
   6766     VARIABLE KD NM1 NV ;
   6767     VARIABLE F NM1 ;
   6768     FUNCTION PE E M ;
   6769       PE := SQRT(E*(E+2*AMUMEV*M)) ;
   6770       ENDFUNCTION ;
   6771     IF (CONS(B0)=0)+(CONS(Z0)=0) ;
   6772       LOOP I 1 NV ;
   6773         IAP(I) := XX(I) ;
   6774         ENDLOOP ;
   6775       DLACT IAP L0 ; %DLACT: 6541
   6776       ELSEIF TRUE ;
   6777       EP := E0 ;
   6778       MP := M0 ;
   6779       ZP := Z0 ;
   6780       I := CONS(P0)/CONS(B0)/CONS(Z0)/CONS(D0) ;
   6781       J := PE(AA(4),AA(5))/        AA(2)/AA(6)/AA(3) ; %PE: 6768
   6782       IF ABS(I)>100*ABS(J) ;
   6783         LOOP I 1 NV ;
   6784           IAP(I) := XX(I) ;
   6785           ENDLOOP ;
   6786         DLACT IAP L0 ; %DLACT: 6541
   6787         ELSEIF TRUE ;
   6788         IF ABS(I)*100<ABS(J) ;
   6789           WRITE 6 (' --- WARNING in SYSCLM,'&             ' large devi
                  ation from scaling map: '&S(ABS((I-J)/(I+J)))) ; %S:  282
   6790           ENDIF;
   6791         MAG := D0/AA(3) ;
   6792         PR := PE(AA(4),AA(5)) ; %PE: 6768
   6793         BT := PR/PE(CONS(E0),CONS(M0)) ; %PE: 6768
   6794         LIN := (ND<3)*(NV#TWOND) ;
   6795         IF LIN ;
   6796           BT := BT*CONS(Z0)/AA(6)*CONS(MAG)*CONS(B0)*PARA(1) ; %PARA: 
                  1044
   6797           ELSEIF TRUE ;
   6798           BT := BT*Z0/AA(6)*MAG*B0 ;
   6799           ENDIF ;
   6800         FAC(1) := BT/AA(2)-1 ;
   6801         LOOP I 2 AA(8) ;
   6802           FAC(I) := FAC(I-1)*FAC(1) ;
   6803           ENDLOOP ;
   6804         CO NOC+1 ; %CO:  965
   6805         F := FF(1) ;
   6806         P := LL(1) ;
   6807         LOOP I 1 AA(8) ;
   6808           F := F + FF(I+1)*FAC(I) ;
   6809           P := P + LL(I+1)*FAC(I) ;
   6810           ENDLOOP ;
   6811         CO NOC-1 ; %CO:  965
   6812         GFM IAP F AA(7) ; %GFM: 3314
   6813         LOOP I 1 TWOND ;
   6814           C(I) := 0 ;
   6815           ENDLOOP ;
   6816         IF LFR=1.9 ;
   6817           LOOP I 1 TWOND ;
   6818             IAP(I) := DD(I) ;
   6819             ENDLOOP ;
   6820           ENDIF ;
   6821         LFM IAP C IAP P -1 ; %LFM: 3065
   6822         RP AA(4) AA(5) AA(6) ; %RP: 6326
   6823         CATR IAP IAP AA(1) ; %CATR: 1657
   6824         LOOP I 1 NV ;
   6825           COP(I) := DD(I) ;
   6826           ENDLOOP ;
   6827         LOOP I 1 TWOND 2 ;
   6828           COP(I) := DD(I)/MAG ;
   6829           ENDLOOP ;
   6830         POLVAL 1 IAP TWOND COP NV IAP TWOND ;
   6831         LOOP I 1 TWOND 2 ;
   6832           IAP(I) := MAG*IAP(I) ;
   6833           ENDLOOP ;
   6834         IF LIN ;
   6835           RP CONS(EP) CONS(MP) CONS(ZP) ; %RP: 6326
   6836           ELSEIF TRUE ;
   6837           RP EP MP ZP ; %RP: 6326
   6838           ENDIF ;
   6839         IF LFR<0 ;
   6840           TRCA IAP IAP 0 ; %TRCA: 1704
   6841           ELSEIF TRUE ;
   6842           TRCA IAP IAP L0 ; %TRCA: 1704
   6843           ENDIF ;
   6844         IF LIN ;
   6845           RP EP MP ZP ; %RP: 6326
   6846           BDEP IAP L0 1 ; %BDEP: 3474
   6847           ENDIF ;
   6848         ENDIF ;
   6849       ENDIF ;
   6850     ENDPROCEDURE ;
   6851   PROCEDURE RSM IU L0 B0 D0 ;
   6852     VARIABLE FF NM1 10 ;
   6853     VARIABLE LL NM1 10 ;
   6854     VARIABLE AA 1 10 ;
   6855     SYSCFL IU AA FF LL -1 ; %SYSCFL: 5347
   6856     SYSCLM MSC L0 B0 D0 AA FF LL ; %SYSCLM: 6752
   6857     LOCSET 0 L0 0 L0 0 0 ; %LOCSET: 1114
   6858     UPDATE 1 1 ; %UPDATE: 1261
   6859     ENDPROCEDURE ;
   6860   PROCEDURE FFELE L D H LF1 LF2 CI ;
   6861     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   6862     VARIABLE SM NM2 3 3 ;
   6863     VARIABLE LLPI 1 ;
   6864     VARIABLE I 1 ;
   6865     VARIABLE J 1 ;
   6866     PROCEDURE SYSCFF IE ;
   6867       VARIABLE FF NM1 10 ;
   6868       VARIABLE LL NM1 10 ;
   6869       VARIABLE AA 1 10 ;
   6870       VARIABLE NAP NM1 MAX(8,NV) ; %MAX:  204
   6871       VARIABLE B0 5 ;
   6872       UMS ; %UMS: 1469
   6873       LOOP I 1 MIN(6,NPOL) ; %MIN:  207
   6874         B0 := SIG(PPOL(I)*CONS(Z0))*PPOL(I) ; %SIG:  213
   6875         LOOP J 2 MOD(MPOL(I),20) ; %MOD:  210
   6876           B0 := B0*D ;
   6877           ENDLOOP ;
   6878         CO NOC+1 ; %CO:  965
   6879         LOOP J 1 10 ;
   6880           FF(J) :=   GFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  210
   6881           LL(J) :=   LFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  210
   6882           AA(J) := DATFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  210
   6883           ENDLOOP ;
   6884         CO NOC-1 ; %CO:  965
   6885         SYSCLM NAP 0 B0 D AA FF LL ; %SYSCLM: 6752
   6886         IF CONS(PPOL(I)*Z0)<0 ;
   6887           MT NAP NAP 180/MOD(MPOL(I),20) ; %MT: 1153 %MOD:  210
   6888           ENDIF ;
   6889         ANM NAP MSC MSC ; %ANM: 1563
   6890         ENDLOOP ;
   6891       ENDPROCEDURE ;
   6892     CE := CI ;
   6893     DR := D ;
   6894     IF LFR=0 ;
   6895       SIELE L D ; %SIELE: 6682
   6896       IF H=0 ;
   6897         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6898         ELSEIF H#0 ;
   6899         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1114
   6900         ENDIF ;
   6901       UPDATE 1 1 ; %UPDATE: 1261
   6902       ELSEIF LFR=1 ;
   6903       UMS ; %UMS: 1469
   6904       DLACT MSC -4*D ; %DLACT: 6541
   6905       SNM MSC MS ; %SNM: 1531
   6906       SSNM SSCR SM ; %SSNM: 1546
   6907       LOCSET 0 -4*D 0 -4*D 0 0 ; %LOCSET: 1114
   6908       NSDP := LF1 ;
   6909       SDELE -4*D 0 4*D 4*D 4*D D ; %SDELE: 6576
   6910       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6911       SDELE  0 2*D 2*D 2*D 2*D D ; %SDELE: 6576
   6912       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6913       SIELE L-4*D D ; %SIELE: 6682
   6914       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6915       NSDP := LF2 ;
   6916       IF H=0 ;
   6917         LOCSET 0 -2*D 0 -2*D 0 0 ; %LOCSET: 1114
   6918         ELSEIF H#0 ;
   6919         LOCSET (COS(2*H*D)-1)/H -SIN(2*H*D)/H -2*H*D -2*D 0 0 ; %LOCSE
                  T: 1114
   6920         ENDIF ;
   6921       SDELE -2*D 0 2*D 2*D 2*D D ; %SDELE: 6576
   6922       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6923       SDELE 0 4*D 4*D 4*D 4*D D ; %SDELE: 6576
   6924       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   6925       DLACT MSC -4*D ; %DLACT: 6541
   6926       IF H=0 ;
   6927         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6928         ELSEIF H#0 ;
   6929         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1114
   6930         ENDIF ;
   6931       UPDATE 1 1 ; %UPDATE: 1261
   6932       ELSEIF (LFR=1.9)+(LFR=2) ;
   6933       IF SS(CE,1,1)#'M' ; %SS:  276
   6934         WRITE 6            ' *** ERROR, FR 2 or 1.9 with non magnetic 
                  element' ;
   6935         QUIT 0 ;
   6936         ENDIF ;
   6937       J := 0 ;
   6938       LOOP I 1 NPOL ;
   6939         J := MAX(J,MOD(MPOL(I),20)) ; %MAX:  204 %MOD:  210
   6940         ENDLOOP ;
   6941       IF J>6 ;
   6942         WRITE 6            ' --- WARNING, MPOL>6 for LFR='&SF(LFR,'(F3
                  .1)') ; %SF:  285
   6943         ENDIF ;
   6944       SYSCFF 1 ; %SYSCFF: 6866
   6945       SNM MSC MS ; %SNM: 1531
   6946       SSNM SSCR SM ; %SSNM: 1546
   6947       SIELE L D ; %SIELE: 6682
   6948       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6949       SYSCFF 2 ; %SYSCFF: 6866
   6950       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   6951       IF H=0 ;
   6952         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6953         ELSEIF H#0 ;
   6954         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1114
   6955         ENDIF ;
   6956       UPDATE 1 1 ; %UPDATE: 1261
   6957       ELSEIF (LFR=3)+(LFR=2.5) ;
   6958       UMS ; %UMS: 1469
   6959       DLACT MSC -8*D ; %DLACT: 6541
   6960       SNM MSC MS ; %SNM: 1531
   6961       SSNM SSCR SM ; %SSNM: 1546
   6962       LOCSET 0 -8*D 0 -8*D 0 0 ; %LOCSET: 1114
   6963       NSDP := LF1 ;
   6964       SDELE -8*D 6*D D/200 D 7*D D ; %SDELE: 6576
   6965       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6966       SIELE L-12*D D ; %SIELE: 6682
   6967       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6968       NSDP := LF2 ;
   6969       IF H=0 ;
   6970         LOCSET 0 -6*D 0 -6*D 0 0 ; %LOCSET: 1114
   6971         ELSEIF H#0 ;
   6972         LOCSET (COS(6*H*D)-1)/H -SIN(6*H*D)/H -6*H*D -6*D 0 0 ; %LOCSE
                  T: 1114
   6973         ENDIF ;
   6974       SDELE -6*D 8*D D/200 D 7*D D ; %SDELE: 6576
   6975       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   6976       DLACT MSC -8*D ; %DLACT: 6541
   6977       IF H=0 ;
   6978         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   6979         ELSEIF H#0 ;
   6980         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1114
   6981         ENDIF ;
   6982       UPDATE 1 1 ; %UPDATE: 1261
   6983       ELSEIF LFR=-1 ;
   6984       UMS ; %UMS: 1469
   6985       DLACT MSC -8*D ; %DLACT: 6541
   6986       SNM MSC MS ; %SNM: 1531
   6987       SSNM SSCR SM ; %SSNM: 1546
   6988       LOCSET 0 -8*D 0 -8*D 0 0 ; %LOCSET: 1114
   6989       NSDP := LF1 ;
   6990       SDELE -8*D 6*D D/200 D 7*D D ; %SDELE: 6576
   6991       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   6992       SIELE -6*D D ; %SIELE: 6682
   6993       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   6994       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   6995       LLPI := LPI ;
   6996       LPI := 0 ;
   6997       UPDATE 1 1 ; %UPDATE: 1261
   6998       LPI := LLPI ;
   6999       ELSEIF LFR=-2 ;
   7000       SIELE -6*D D ; %SIELE: 6682
   7001       SNM MSC MS ; %SNM: 1531
   7002       SSNM SSCR SM ; %SSNM: 1546
   7003       NSDP := LF2 ;
   7004       IF H=0 ;
   7005         LOCSET 0 -6*D 0 -6*D 0 0 ; %LOCSET: 1114
   7006         ELSEIF H#0 ;
   7007         LOCSET (COS(6*H*D)-1)/H -SIN(6*H*D)/H -6*H*D -6*D 0 0 ; %LOCSE
                  T: 1114
   7008         ENDIF ;
   7009       SDELE -6*D 8*D D/200 D 7*D D ; %SDELE: 6576
   7010       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   7011       DLACT MSC -8*D ; %DLACT: 6541
   7012       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7013       LLPI := LPI ;
   7014       LPI := 0 ;
   7015       UPDATE 1 1 ; %UPDATE: 1261
   7016       LPI := LLPI ;
   7017       ELSEIF LFR=-10 ;
   7018       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7019       SDELE 0 L D/200 D 7*D D ; %SDELE: 6576
   7020       UPDATE 1 1 ; %UPDATE: 1261
   7021       ELSEIF TRUE ;
   7022       WRITE 6 ' *** ERROR, wrong fringe field ID' ;
   7023       QUIT 0 ;
   7024       ENDIF ;
   7025     ENDPROCEDURE ;
   7026   PROCEDURE CB ;
   7027     VARIABLE I 1 ;
   7028     IF LUM=0 ;
   7029       WRITE 6 ' *** ERROR, call UM before CB' ;
   7030       QUIT 0 ;
   7031       ENDIF ;
   7032     MAP(1) := -MAP(1) ;
   7033     MAP(2) := -MAP(2) ;
   7034     RAY(1) := -RAY(1) ;
   7035     RAY(2) := -RAY(2) ;
   7036     RSC(1) := -RSC(1) ;
   7037     RSC(2) := -RSC(2) ;
   7038     IF LSPN=1 ;
   7039       LOOP I 1 3 ;
   7040         SPNR(1,I) := -SPNR(1,I) ;
   7041         ENDLOOP ;
   7042       SPI(1) := -SPI(1) ;
   7043       SSC(1) := -SSC(1) ;
   7044       ENDIF ;
   7045     LCB := -LCB ;
   7046     ENDPROCEDURE ;
   7047   PROCEDURE GE N M S H V W ;
   7048     VARIABLE I 1 ;
   7049     VARIABLE S1 1 ;
   7050     VARIABLE S2 1 ;
   7051     CO NOC+1 ; %CO:  965
   7052     NSDP := 20 ;
   7053     IF M<NOC ;
   7054       WRITE 6 ' --- WARNING in GE, M < calculation order' ;
   7055       ENDIF ;
   7056     INTPOL PN M ;
   7057     LOOP I 1 N ;
   7058       SN(I) := S(I) ;
   7059       HN(I) := H(I) ;
   7060       VN(I) := V(I) ;
   7061       WN(I) := W(I) ;
   7062       ENDLOOP ;
   7063     INP := 1 ;
   7064     NN := N ;
   7065     NPOL := 0 ;
   7066     NPG := M ;
   7067     S1 := CONS(S(1)) ;
   7068     S2 := CONS(S(N)) ;
   7069     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7070     CE := 'GE' ;
   7071     LOFF := 2 ;
   7072     SDELE S1 S2 (S2-S1)/100 (S2-S1)/10 (S2-S1) .1 ; %SDELE: 6576
   7073     UPDATE 1 1 ; %UPDATE: 1261
   7074     CO NOC-1 ; %CO:  965
   7075     ENDPROCEDURE ;
   7076   PROCEDURE MQ L B D ;
   7077     PROCEDURE MQUAD IAP L F AP ;
   7078       VARIABLE C 1 ;
   7079       VARIABLE OM1 1 ;
   7080       VARIABLE OM2 NMP ;
   7081       VARIABLE FI NM1 ;
   7082       VARIABLE FP  NM1 ;
   7083       VARIABLE N NM1 ;
   7084       VARIABLE OM NM1 ;
   7085       PROCEDURE MAPY C X Y ;
   7086         N := IAP(C) ;
   7087         IAP(C) := IAP(C)*X+IAP(C+1)/FP*Y ;
   7088         IF C=1 ;
   7089           IAP(C+1) := -FP*N*Y+IAP(C+1)*X ;
   7090           ELSEIF C=3 ;
   7091           IAP(C+1) :=  FP*N*Y+IAP(C+1)*X ;
   7092           ENDIF ;
   7093         ENDPROCEDURE ;
   7094       IF LUM#1 ;
   7095         WRITE 6 ' *** ERROR, call UM before MQ' ;
   7096         QUIT 0 ;
   7097         ENDIF ;
   7098       IF ABS(CONS(F))<1E-15 ;
   7099         DLACT IAP L ; %DLACT: 6541
   7100         ELSEIF TRUE ;
   7101         FI := F ;
   7102         IF CONS(F*Z0)<0 ;
   7103           FI := -F ;
   7104           N := IAP(1) ;
   7105           IAP(1) := IAP(3) ;
   7106           IAP(3) := N ;
   7107           N := IAP(2) ;
   7108           IAP(2) := IAP(4) ;
   7109           IAP(4) := N ;
   7110           ENDIF ;
   7111         C := CONS(ETA) ;
   7112         OM := SQRT(FI/(AP*CHIM)) ;
   7113         OM1 := CONS(OM) ;
   7114         OM2 := 2*OM1*L ;
   7115         FP := SQRT((1+IAP(6))*((1+IAP(6))*C+2*(1+IAP(7)))/(C+2))*OM ;
   7116         IF ND>2 ;
   7117           N := IAP(3)*IAP(4)*(COSH(OM2)-1)+IAP(1)*IAP(2)*(COS(OM2)-1) 
                  ;
   7118           N := N             +SQR(IAP(2))*(L+.5/OM1*SIN(OM2))+SQR(IAP(
                  4))*(L+.5/OM1*SINH(OM2)) ;
   7119           N := N+(SQR(IAP(1))*(L-SIN(OM2)*.5/OM1)                +SQR(
                  IAP(3))*(-L+SINH(OM2)*.5/OM1))*SQR(OM1) ;
   7120           IAP(5) := IAP(5)               +((1+C)*(1-.25*N/L)-((1+IAP(7
                  ))+(1+IAP(6))*C)*OM/FP)/(2+C)*L ;
   7121           ENDIF ;
   7122         OM := OM*L ;
   7123         MAPY 1 COS(OM) SIN(OM) ; %MAPY: 7085
   7124         MAPY 3 COSH(OM) SINH(OM) ; %MAPY: 7085
   7125         IF CONS(F*Z0)<0 ;
   7126           N := IAP(1) ;
   7127           IAP(1) := IAP(3) ;
   7128           IAP(3) := N ;
   7129           N := IAP(2) ;
   7130           IAP(2) := IAP(4) ;
   7131           IAP(4) := N ;
   7132           ENDIF ;
   7133         ENDIF ;
   7134       ENDPROCEDURE ;
   7135     IF (NOC<3)*(LFR=0)*(LSPN=0) ;
   7136       MQUAD MAP L B D ; %MQUAD: 7077
   7137       IF NRAY#0 ;
   7138         UMS ; %UMS: 1469
   7139         MQUAD MSC L B D ; %MQUAD: 7077
   7140         ENDIF ;
   7141       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   7142       DR := D ;
   7143       CE := 'MQ' ;
   7144       UPDATE 0 1 ; %UPDATE: 1261
   7145       ELSEIF TRUE ;
   7146       NPOL := 1 ;
   7147       PPOL(1) := B/D ;
   7148       MPOL(1) := 2 ;
   7149       LOFF := 1 ;
   7150       FFELE L D 0 1 2 'MQ' ; %FFELE: 6860
   7151       ENDIF ;
   7152     ENDPROCEDURE ;
   7153   PROCEDURE MH L B D ;
   7154     PROCEDURE MHEXA IAP L F AP ;
   7155       VARIABLE C 1 ;
   7156       VARIABLE X NM1 ;
   7157       VARIABLE XZ NM1 ;
   7158       VARIABLE Y NM1 ;
   7159       VARIABLE FP  NM1 ;
   7160       VARIABLE FI NM1 ;
   7161       C := CONS(ETA) ;
   7162       IF LUM#1 ;
   7163         WRITE 6 ' *** ERROR, call UM before MH' ;
   7164         QUIT 0 ;
   7165         ENDIF ;
   7166       FP := SQRT((1+IAP(6))*((1+IAP(6))*C+2*(1+IAP(7)))/(C+2)) ;
   7167       X  := IAP(1) ;
   7168       XZ := IAP(2) ;
   7169       Y := IAP(3) ;
   7170       DLACT IAP L ; %DLACT: 6541
   7171       IF NO>1 ;
   7172         FI := F/(3*SQR(AP)) ;
   7173         C := CONS(CHIM) ;
   7174         IAP(1) := IAP(1) - FI/C*1.5*SQR(L)*(SQR(X)-SQR(Y)         +2/3
                  *L*(X*XZ-Y*IAP(4)+.25*L*(SQR(XZ)-SQR(IAP(4))))) ;
   7175         IAP(2) := IAP(2) - FI/C*L*3*(SQR(X)-SQR(Y)         +L*(X*XZ-Y*
                  IAP(4)+1/3*L*(SQR(XZ)-SQR(IAP(4))))) ;
   7176         IAP(3) := IAP(3)+FI/C*SQR(L)*(3*X*Y+L*(Y*XZ+X*IAP(4)+.5*L*XZ*I
                  AP(4))) ;
   7177         IAP(4) := IAP(4) + FI/C*L*(6*X*Y+L*(3*(Y*XZ+X*IAP(4))+2*L*XZ*I
                  AP(4))) ;
   7178         ENDIF ;
   7179       ENDPROCEDURE ;
   7180     IF (NOC<3)*(LFR=0)*(LSPN=0) ;
   7181       MHEXA MAP L B D ; %MHEXA: 7154
   7182       IF NRAY#0 ;
   7183         UMS ; %UMS: 1469
   7184         MHEXA MSC L B D ; %MHEXA: 7154
   7185         ENDIF ;
   7186       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   7187       DR := D ;
   7188       CE := 'MH' ;
   7189       UPDATE 0 1 ; %UPDATE: 1261
   7190       ELSEIF TRUE ;
   7191       NPOL := 1 ;
   7192       PPOL(1) := B/D/D ;
   7193       MPOL(1) := 3 ;
   7194       LOFF := 1 ;
   7195       FFELE L D 0 1 2 'MH' ; %FFELE: 6860
   7196       ENDIF ;
   7197     ENDPROCEDURE ;
   7198   PROCEDURE MO L B D ;
   7199     NPOL := 1 ;
   7200     PPOL(1) := B/D/D/D ;
   7201     MPOL(1) := 4 ;
   7202     LOFF := 1 ;
   7203     FFELE L D 0 1 2 'MO' ; %FFELE: 6860
   7204     ENDPROCEDURE ;
   7205   PROCEDURE MD L B D ;
   7206     NPOL := 1 ;
   7207     PPOL(1) := B/D/D/D/D ;
   7208     MPOL(1) := 5 ;
   7209     LOFF := 1 ;
   7210     FFELE L D 0 1 2 'MD' ; %FFELE: 6860
   7211     ENDPROCEDURE ;
   7212   PROCEDURE MZ L B D ;
   7213     NPOL := 1 ;
   7214     PPOL(1) := B/D/D/D/D/D ;
   7215     MPOL(1) := 6 ;
   7216     LOFF := 1 ;
   7217     FFELE L D 0 1 2 'MZ' ; %FFELE: 6860
   7218     ENDPROCEDURE ;
   7219   PROCEDURE M5 L BQ BH BO BD BZ D ;
   7220     PPOL(1) := BQ/D ;
   7221     MPOL(1) := 2 ;
   7222     PPOL(2) := BH/D/D ;
   7223     MPOL(2) := 3 ;
   7224     PPOL(3) := BO/D/D/D ;
   7225     MPOL(3) := 4 ;
   7226     PPOL(4) := BD/D/D/D/D ;
   7227     MPOL(4) := 5 ;
   7228     PPOL(5) := BZ/D/D/D/D/D ;
   7229     MPOL(5) := 6 ;
   7230     LOFF := 1 ;
   7231     NPOL := 5 ;
   7232     FFELE L D 0 1 2 'M5' ; %FFELE: 6860
   7233     ENDPROCEDURE ;
   7234   PROCEDURE MM L BA NBA D ;
   7235     VARIABLE I 1 ;
   7236     VARIABLE DP NM2 ;
   7237     DP := 1 ;
   7238     LOOP I 1 NBA ;
   7239       DP := DP/D ;
   7240       PPOL(I) := BA(I)*DP ;
   7241       MPOL(I) := I+1 ;
   7242       ENDLOOP ;
   7243     LOFF := 1 ;
   7244     NPOL := NBA ;
   7245     FFELE L D 0 1 2 'MM' ; %FFELE: 6860
   7246     ENDPROCEDURE ;
   7247   PROCEDURE MMS L BA BS NB D ;
   7248     VARIABLE I 1 ;
   7249     VARIABLE DP NM2 ;
   7250     DP := 1 ;
   7251     LOOP I 1 NB ;
   7252       DP := DP/D ;
   7253       PPOL(I) := BA(I)*DP ;
   7254       MPOL(I) := I+1 ;
   7255       ENDLOOP ;
   7256     DP := 1 ;
   7257     LOOP I 1 NB ;
   7258       DP := DP/D ;
   7259       PPOL(I+NB) := BS(I)*DP/(I+1) ;
   7260       MPOL(I+NB) := I+1+20 ;
   7261       ENDLOOP ;
   7262     LOFF := 1 ;
   7263     NPOL := 2*NB ;
   7264     FFELE L D 0 1 2 'MMS' ; %FFELE: 6860
   7265     ENDPROCEDURE ;
   7266   PROCEDURE MQK L K D ;
   7267     MQ L K*CONS(CHIM)*D   D ; %MQ: 7076
   7268     ENDPROCEDURE ;
   7269   PROCEDURE MSK L K D ;
   7270     MH L K*CONS(CHIM)*D*D D ; %MH: 7153
   7271     ENDPROCEDURE ;
   7272   PROCEDURE MOK L K D ;
   7273     NPOL := 1 ;
   7274     PPOL(1) := K*CONS(CHIM) ;
   7275     MPOL(1):=4 ;
   7276     LOFF := 1 ;
   7277     FFELE L D 0 1 2 'MOK' ; %FFELE: 6860
   7278     ENDPROCEDURE ;
   7279   PROCEDURE MDK L K D ;
   7280     NPOL := 1 ;
   7281     PPOL(1) := K*CONS(CHIM) ;
   7282     MPOL(1):=5 ;
   7283     LOFF := 1 ;
   7284     FFELE L D 0 1 2 'MDK' ; %FFELE: 6860
   7285     ENDPROCEDURE ;
   7286   PROCEDURE MZK L K D ;
   7287     NPOL := 1 ;
   7288     PPOL(1) := K*CONS(CHIM) ;
   7289     MPOL(1):=6 ;
   7290     LOFF := 1 ;
   7291     FFELE L D 0 1 2 'MZK' ; %FFELE: 6860
   7292     ENDPROCEDURE ;
   7293   PROCEDURE MMK L BA NBA D ;
   7294     VARIABLE I 1 ;
   7295     VARIABLE DP NM3 ;
   7296     LOOP I 1 NBA ;
   7297       PPOL(I) := BA(I)*CONS(CHIM) ;
   7298       MPOL(I) := I+1 ;
   7299       ENDLOOP ;
   7300     LOFF := 1 ;
   7301     NPOL := NBA ;
   7302     FFELE L D 0 1 2 'MMK' ; %FFELE: 6860
   7303     ENDPROCEDURE ;
   7304   PROCEDURE MMSK L KA TA NA D ;
   7305     VARIABLE I 1 ;
   7306     VARIABLE DP NM3 ;
   7307     VARIABLE BS NM3 ;
   7308     DP := 1 ;
   7309     LOOP I 1 NA ;
   7310       DP := DP*D ;
   7311       KA(I) := KA(I)*CONS(CHIM)*DP ;
   7312       BS := KA(I)*SIN((I+1)*TA(I)*DEGRAD) ;
   7313       KA(I) := KA(I)*COS((I+1)*TA(I)*DEGRAD) ;
   7314       TA(I) := BS ;
   7315       ENDLOOP ;
   7316     MMS L KA TA NA D ; %MMS: 7247
   7317     ENDPROCEDURE ;
   7318   PROCEDURE MGE NP A NS DS SIGMA D ;
   7319     VARIABLE I 1 ;
   7320     VARIABLE IS 1 ;
   7321     VARIABLE S2 1 ;
   7322     LOOP I 1 NP ;
   7323       MPOL(I) := I+1 ;
   7324       LOOP IS 1 NS ;
   7325         MFD(I,IS) := A(I,IS)/(D^I) ;
   7326         ENDLOOP ;
   7327       ENDLOOP ;
   7328     PPOL(1) := NS ;
   7329     PPOL(2) := DS ;
   7330     PPOL(3) := SIGMA ;
   7331     NSDP := 12 ;
   7332     LOFF := 1 ;
   7333     NPOL := NP ;
   7334     S2 := (NS-1)*DS ;
   7335     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7336     CE := 'MGE' ;
   7337     DR := D ;
   7338     SDELE 0 S2 D/200 1*D 7*D D ; %SDELE: 6576
   7339     UPDATE 1 1 ; %UPDATE: 1261
   7340     ENDPROCEDURE ;
   7341   PROCEDURE BEND R PHI D E1 H1 E2 H2 N S1 S2 NT ;
   7342     VARIABLE I 1 ;
   7343     VARIABLE NTS 1 ;
   7344     VARIABLE F NMP ;
   7345     VARIABLE LPIP 1 ;
   7346     VARIABLE S1N NMP MAX(NOC,NT) ; %MAX:  204
   7347     VARIABLE S2N NMP MAX(NOC,NT) ; %MAX:  204
   7348     VARIABLE E1N NMP ;
   7349     VARIABLE E2N NMP ;
   7350     VARIABLE H1N NMP ;
   7351     VARIABLE H2N NMP ;
   7352     VARIABLE NAP NM1 MAX(NV,8) ; %MAX:  204
   7353     VARIABLE AA 1 10 ;
   7354     VARIABLE FF NM1 10 ;
   7355     VARIABLE LL NM1 10 ;
   7356     FUNCTION FK X E XI ;
   7357       IF CONS(XI)#0 ;
   7358         FK := (COS(E)-SQRT(1-SQR(X*XI+SIN(E))))/XI ;
   7359         ELSEIF TRUE ;
   7360         FK := TAN(E)*X ;
   7361         ENDIF ;
   7362       ENDFUNCTION ;
   7363     PROCEDURE SNS S E H SN NT ;
   7364       VARIABLE I 1 ;
   7365       VARIABLE L 1 ;
   7366       VARIABLE F NM1 ;
   7367       E := 0 ;
   7368       H := 0 ;
   7369       IF NT>0 ;
   7370         E := ATAN(S(1)) ;
   7371         IF NT>1 ;
   7372           H := 1+SQR(S(1)) ;
   7373           H := 2*S(2)/SQRT(H)/H ;
   7374           ENDIF ;
   7375         ENDIF ;
   7376       F := FK(DD(1),E,H) ; %FK: 7356
   7377       L := 1 ;
   7378       LOOP I 1 NT ;
   7379         L := L*I ;
   7380         F := DER(1,F) ; %DER:  307
   7381         SN(I) := S(I)-CONS(F)/L ;
   7382         ENDLOOP ;
   7383       LOOP I NT+1 NTS ;
   7384         L := L*I ;
   7385         F := DER(1,F) ; %DER:  307
   7386         SN(I) := -CONS(F)/L ;
   7387         ENDLOOP ;
   7388       ENDPROCEDURE ;
   7389     PROCEDURE KICK I F IAP ;
   7390       VARIABLE A NM1 1 ;
   7391       VARIABLE NAP NM1 NV ;
   7392       VARIABLE J 1 ;
   7393       LOOP J 1 NV ;
   7394         NAP(J) := DD(J) ;
   7395         ENDLOOP ;
   7396       NAP(1) := IAP(1) ;
   7397       IF ND>1 ;
   7398         NAP(3) := IAP(3) ;
   7399         ENDIF ;
   7400       IF I=1 ;
   7401         A(1) := F ;
   7402         ELSEIF I=2 ;
   7403         A(1) := -DER(1,F)*DD(3) ; %DER:  307
   7404         NAP(1) := 0*NAP(1) ;
   7405         ENDIF ;
   7406       POLVAL 1 A 1 NAP NV A 1 ;
   7407       IAP(2*I) := IAP(2*I)+A(1) ;
   7408       ENDPROCEDURE ;
   7409     FUNCTION POL X CO NT ;
   7410       VARIABLE I 1 ;
   7411       POL := 0 ;
   7412       LOOP I NT 1 -1 ;
   7413         POL := (POL+CO(I))*X ;
   7414         ENDLOOP ;
   7415       ENDFUNCTION ;
   7416     PROCEDURE KICKSXYN SN IAP ;
   7417       VARIABLE F NM1 ;
   7418       F := POL(DD(1),SN,NTS) ; %POL: 7409
   7419       KICK 1 F/R IAP ; %KICK: 7389
   7420       KICK 2 F/R IAP ; %KICK: 7389
   7421       ENDPROCEDURE ;
   7422     PROCEDURE BENDFF3 ;
   7423       VARIABLE LDL 1 ;
   7424       VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   7425       VARIABLE SM NM2 3 3 ;
   7426       NSDP := -4 ;
   7427       LOFF := 2 ;
   7428       PPOL( 1) := CONS(CHIM)/R ;
   7429       PPOL( 2) := -R ;
   7430       PPOL( 3) := 0 ;
   7431       PPOL( 4) := D ;
   7432       PPOL( 5) := 0 ;
   7433       PPOL( 6) := 0 ;
   7434       PPOL( 7) := SIN(-E1N) ;
   7435       PPOL( 8) :=  COS(-E1N) ;
   7436       IF H1N#0 ;
   7437         PPOL( 7) := PPOL( 7)/H1N ;
   7438         PPOL( 8) :=  PPOL( 8)/H1N ;
   7439         ENDIF ;
   7440       PPOL( 9) := R*(COS(PHI) - 1) ;
   7441       PPOL(10) :=  R*SIN(PHI) ;
   7442       PPOL(11) := SIN(PHI-E2N) ;
   7443       PPOL(12) := -COS(E2N-PHI) ;
   7444       IF H2N#0 ;
   7445         PPOL(11) := PPOL(11)/H2N ;
   7446         PPOL(12) :=  PPOL(12)/H2N ;
   7447         ENDIF ;
   7448       PPOL(11) := PPOL(11) + PPOL(9) ;
   7449       PPOL(12) := PPOL(12) + PPOL(10) ;
   7450       PPOL(13) := H1N ;
   7451       PPOL(14) := H2N ;
   7452       LOOP I 1 NT ;
   7453         PPOL(20+I) := N(I) ;
   7454         ENDLOOP ;
   7455       PPOL(20) := NT ;
   7456       LDL := 10*D ;
   7457       LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1114
   7458       IF LFR=3 ;
   7459         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1114
   7460         SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6634
   7461         ENDIF ;
   7462       UMS ; %UMS: 1469
   7463       DLACT MSC -LDL ; %DLACT: 6541
   7464       SNM MSC MS ; %SNM: 1531
   7465       SSNM SSCR SM ; %SSNM: 1546
   7466       SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D 
                  ; %SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   7467       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   7468       DLACT MSC -LDL ; %DLACT: 6541
   7469       SLOC := R*PHI ;
   7470       XLOC := XLOC+LDL*SIN(PLOC) ;
   7471       ZLOC := ZLOC-LDL*COS(PLOC) ;
   7472       UPDATE 1 1 ; %UPDATE: 1261
   7473       ENDPROCEDURE ;
   7474     PROCEDURE BENDFF0 ;
   7475       VARIABLE LGH 10 ;
   7476       VARIABLE F NOC+1 ;
   7477       VARIABLE ISC NM1 MAX(8,NV) ; %MAX:  204
   7478       VARIABLE XP NM2 MAX(8,NV) ; %MAX:  204
   7479       VARIABLE RES NM1 ;
   7480       PROCEDURE DIPOLE R0 PHI E1 XI1 E2 XI2 IN OUT LGH ;
   7481         VARIABLE IER 1 ;
   7482         VARIABLE Z1 NM1 ;
   7483         VARIABLE X1 NM1 ;
   7484         VARIABLE R NM1 ;
   7485         VARIABLE ZRI NM1 ;
   7486         VARIABLE XRI NM1 ;
   7487         VARIABLE ZR NM1 ;
   7488         VARIABLE XR NM1 ;
   7489         VARIABLE Z2 NM1 ;
   7490         VARIABLE X2 NM1 ;
   7491         VARIABLE ZA NM1 ;
   7492         VARIABLE XA NM1 ;
   7493         VARIABLE ZB NM1 ;
   7494         VARIABLE XB NM1 ;
   7495         VARIABLE CO NM1 ;
   7496         VARIABLE SI NM1 ;
   7497         VARIABLE THE NM1 ;
   7498         VARIABLE ST1 NM1 ;
   7499         VARIABLE ST2 NM1 ;
   7500         VARIABLE LN NM1 ;
   7501         VARIABLE NC 1 ;
   7502         VARIABLE PC 1 ;
   7503         VARIABLE VC 1 ;
   7504         VARIABLE MG NM1 ;
   7505         FUNCTION RADI X Y ;
   7506           RADI := SQRT(SQR(X)+SQR(Y)) ;
   7507           ENDFUNCTION ;
   7508         PROCEDURE CAPO X Y PHI IER ;
   7509           VARIABLE XC 1 ;
   7510           VARIABLE YC 1 ;
   7511           VARIABLE TINY 1 ;
   7512           TINY := 1E-16 ;
   7513           XC := CONS(X) ;
   7514           YC := CONS(Y) ;
   7515           IF (ABS(XC)+ABS(YC))<TINY ;
   7516             PHI := 0 ;
   7517             IER := 1 ;
   7518             ELSEIF TRUE ;
   7519             IER := 0 ;
   7520             IF ABS(XC)>ABS(YC) ;
   7521               PHI := ATAN(Y/X) ;
   7522               IF (XC<0)*(YC<0) ;
   7523                 PHI := PHI-PI ;
   7524                 ELSEIF TRUE ;
   7525                 PHI := PHI+PI ;
   7526                 ENDIF ;
   7527               ELSEIF TRUE ;
   7528               PHI := PI/2-ATAN(X/Y) ;
   7529               IF YC<0 ;
   7530                 PHI := PHI-PI ;
   7531                 ENDIF ;
   7532               ENDIF ;
   7533             ENDIF ;
   7534           ENDPROCEDURE ;
   7535         PROCEDURE EQ2 A B C Z1 Z2 ;
   7536           IF (CONS(A)=0)+(SQR(CONS(B))+CONS(C)*CONS(A)<0) ;
   7537             WRITE 6 ' *** ERROR in DIPOLE, no solution' ;
   7538             QUIT 0 ;
   7539             ENDIF ;
   7540           Z1 := B/A ;
   7541           Z2 := SQRT(SQR(Z1)+C/A) ;
   7542           ENDPROCEDURE ;
   7543         PROCEDURE LINLIN A1 B1 C1 A2 B2 C2 X Y ;
   7544           VARIABLE D NM1 ;
   7545           VARIABLE TINY 1 ;
   7546           TINY := 1E-16 ;
   7547           D := A1*B2-A2*B1 ;
   7548           IF ABS(CONS(D))<TINY ;
   7549             WRITE 6 ' *** ERROR in DIPOLE, no solution' ;
   7550             QUIT 0 ;
   7551             ENDIF ;
   7552           X := (B1*C2-B2*C1)/D ;
   7553           Y := (A2*C1-A1*C2)/D ;
   7554           ENDPROCEDURE ;
   7555         PROCEDURE LINCIR A B C XR YR R X1 Y1 X2 Y2 ;
   7556           VARIABLE A1 NM1 ;
   7557           VARIABLE C1 NM1 ;
   7558           VARIABLE Z1 NM1 ;
   7559           VARIABLE Z2 NM1 ;
   7560           IF ABS(CONS(B))>ABS(CONS(A)) ;
   7561             A1 := A/B ;
   7562             C1 := C/B ;
   7563             EQ2 1+SQR(A1) XR-A1*(YR+C1) SQR(R)-SQR(XR)-SQR(YR+C1) Z1 Z
                  2 ; %EQ2: 7535
   7564             X1 := Z1-Z2 ;
   7565             X2 := Z1+Z2 ;
   7566             Y1 := -A1*X1-C1 ;
   7567             Y2 := -A1*X2-C1 ;
   7568             ELSEIF TRUE ;
   7569             A1 := B/A ;
   7570             C1 := C/A ;
   7571             EQ2 1+SQR(A1) YR-A1*(XR+C1) SQR(R)-SQR(YR)-SQR(XR+C1) Z1 Z
                  2 ; %EQ2: 7535
   7572             Y1 := Z1-Z2 ;
   7573             Y2 := Z1+Z2 ;
   7574             X1 := -A1*Y1-C1 ;
   7575             X2 := -A1*Y2-C1 ;
   7576             ENDIF ;
   7577           ENDPROCEDURE ;
   7578         PROCEDURE CIRCIR XR1 YR1 R1 XR2 YR2 R2 X1 Y1 X2 Y2 ;
   7579           VARIABLE C NM1 ;
   7580           C := (SQR(R2)-SQR(XR2)-SQR(YR2))-(SQR(R1)-SQR(XR1)-SQR(YR1))
                   ;
   7581           LINCIR 2*(XR2-XR1) 2*(YR2-YR1) C XR1 YR1 R1 X1 Y1 X2 Y2 ; %L
                  INCIR: 7555
   7582           ENDPROCEDURE ;
   7583         PC := CONS(P0) ;
   7584         MG := SQRT(SQR(P0/PC)-SQR(IN(2))-SQR(IN(4))) ;
   7585         IN(2) := IN(2)/MG ;
   7586         IN(4) := IN(4)/MG ;
   7587         CO := COS(E1) ;
   7588         SI := SIN(E1) ;
   7589         IF CONS(XI1)#0 ;
   7590           R := 1/XI1 ;
   7591           ZR := CO/XI1 ;
   7592           XR := -SI/XI1 ;
   7593           LINCIR IN(2) -1 IN(1) ZR XR R ZA XA ZB XB ; %LINCIR: 7555
   7594           IF CONS(XI1)>0 ;
   7595             Z1 := ZA ;
   7596             X1 := XA ;
   7597             ELSEIF TRUE ;
   7598             Z1 := ZB ;
   7599             X1 := XB ;
   7600             ENDIF ;
   7601           ELSEIF TRUE ;
   7602           LINLIN IN(2) -1 IN(1) CO -SI 0 Z1 X1 ; %LINLIN: 7543
   7603           ENDIF ;
   7604         ST1 := 1+SQR(IN(2)) ;
   7605         IF ND=1 ;
   7606           ST1 := SQRT(ST1) ;
   7607           ST2 := ST1 ;
   7608           ELSEIF ND>1 ;
   7609           ST2 := SQRT(ST1+SQR(IN(4))) ;
   7610           ST1 := SQRT(ST1) ;
   7611           ENDIF ;
   7612         R := R0*P0/PC*CONS(Z0)/Z0*ST1/ST2 ;
   7613         XRI := X1-R/ST1 ;
   7614         ZRI := Z1+R*IN(2)/ST1 ;
   7615         CO := COS(PHI) ;
   7616         SI := SIN(PHI) ;
   7617         Z2 := R0*SI ;
   7618         X2 := R0*(CO-1) ;
   7619         ZR := (ZRI-Z2)*CO - (XRI-X2)*SI ;
   7620         XR := (XRI-X2)*CO + (ZRI-Z2)*SI ;
   7621         CO := COS(E2) ;
   7622         SI := SIN(E2) ;
   7623         IF CONS(XI2)#0 ;
   7624           THE := 1/XI2 ;
   7625           Z2 := -CO/XI2 ;
   7626           X2 := -SI/XI2 ;
   7627           CIRCIR ZR XR R Z2 X2 THE ZA XA ZB XB ; %CIRCIR: 7578
   7628           ELSEIF TRUE ;
   7629           LINCIR CO SI 0 ZR XR R ZA XA ZB XB ; %LINCIR: 7555
   7630           ENDIF ;
   7631         IF RADI(CONS(ZA),CONS(XA))<RADI(CONS(ZB),CONS(XB)) ; %RADI: 75
                  05 %RADI: 7505
   7632           Z2 := ZA ;
   7633           X2 := XA ;
   7634           ELSEIF TRUE ;
   7635           Z2 := ZB ;
   7636           X2 := XB ;
   7637           ENDIF ;
   7638         CAPO X1-XRI Z1-ZRI X1 IER ; %CAPO: 7508
   7639         CAPO X2-XR Z2-ZR THE IER ; %CAPO: 7508
   7640         THE := PHI+THE-X1 ;
   7641         X1 := -(Z2-ZR)/(X2-XR) ;
   7642         LINLIN X1 -1 X2-Z2*X1 1 0 0 ZRI XRI ; %LINLIN: 7543
   7643         OUT(1) := XRI ;
   7644         OUT(2) := X1 ;
   7645         LGH := R0*PHI ;
   7646         LN := Z1*ST1 + R*THE - Z2*SQRT(1+SQR(OUT(2))) ;
   7647         IF ND>1 ;
   7648           OUT(3) := IN(3)+IN(4)*LN/ST1 ;
   7649           OUT(4) := IN(4)*SQRT(1+SQR(OUT(2)))/ST1 ;
   7650           ENDIF ;
   7651         MG := SQRT(1+SQR(OUT(2))+SQR(OUT(4)))*PC/P0 ;
   7652         OUT(2) := OUT(2)/MG ;
   7653         OUT(4) := OUT(4)/MG ;
   7654         IF ND>2 ;
   7655           NC := CONS(ETA) ;
   7656           VC := CONS(V0) ;
   7657           MG := -(1+NC)/(2+NC)*VC/V0 ;
   7658           OUT(5) := IN(5)+(LN*ST2/ST1-V0/VC*LGH)*MG ;
   7659           OUT(6) := IN(6) ;
   7660           ENDIF ;
   7661         ENDPROCEDURE ;
   7662       PROCEDURE DIPOLEY R0 PHI E1 XI1 E2 XI2 IN OUT LGH ;
   7663         KICK 2 FK(DD(1),E1,XI1)/R0 IN ; %KICK: 7389 %FK: 7356
   7664         DIPOLE R0 PHI E1 XI1 E2 XI2 IN OUT LGH ; %DIPOLE: 7480
   7665         KICK 2 FK(DD(1),E2,XI2)/R0 OUT ; %KICK: 7389 %FK: 7356
   7666         ENDPROCEDURE ;
   7667       IF LUM#1 ;
   7668         WRITE 6 ' *** ERROR, call UM before element' ;
   7669         QUIT 0 ;
   7670         ENDIF ;
   7671       IF (NT=0)*(LSPN=0) ;
   7672         DIPOLEY R PHI E1 H1 E2 H2 MSC MSC LGH ; %DIPOLEY: 7662
   7673         ELSEIF TRUE ;
   7674         NPOL := NT+1 ;
   7675         PPOL(1) :=  CONS(CHIM)/R ;
   7676         MPOL(1) := 1 ;
   7677         F := 1/R ;
   7678         LOOP I 2 NPOL ;
   7679           PPOL(I) := -PPOL(1)*N(I-1)*F ;
   7680           MPOL(I) := I ;
   7681           F := F/R ;
   7682           ENDLOOP ;
   7683         LOFF := 2 ;
   7684         DIPOLEY R 0 E1N H1N 0 0 MSC ISC LGH ; %DIPOLEY: 7662
   7685         LOOP I TWOND+1 MIN(NV,8) ; %MIN:  207
   7686           ISC(I) := MSC(I) ;
   7687           ENDLOOP ;
   7688         SIELE R*PHI D ; %SIELE: 6682
   7689         POLVAL 1 MSC TWOND ISC MIN(NV,8) MSC TWOND ; %MIN:  207
   7690         DIPOLEY R 0 0 0 E2N H2N MSC MSC LGH ; %DIPOLEY: 7662
   7691         ENDIF ;
   7692       ENDPROCEDURE ;
   7693     IF CONS(R)<0 ;
   7694       WRITE 6 ' *** ERROR in '&CE&' BEND, negative radius' ;
   7695       QUIT 0 ;
   7696       ELSEIF CONS(PHI)<0;
   7697       WRITE 6 ' *** ERROR in '&CE&' BEND, negative angle' ;
   7698       QUIT 0 ;
   7699       ELSEIF (ABS(E1)+ABS(E2)+ABS(H1)+ABS(H2)#0)*(NT#0) ;
   7700       WRITE 6         ' @@@ ERROR in '&CE&' BEND, wrong parameters' ;
   7701       QUIT 0 ;
   7702       ENDIF ;
   7703     DR := D ;
   7704     LOOP I 1 8 ;
   7705       MSC(I) := DD(I) ;
   7706       ENDLOOP ;
   7707     IF (NRAY=0)*(LSPN=0) ;
   7708       LOOP I 1 TWOND ;
   7709         MSC(I) := MAP(I) ;
   7710         ENDLOOP ;
   7711       ENDIF ;
   7712     NTS := NOC ;
   7713     E1N := E1 ;
   7714     H1N := H1 ;
   7715     E2N := E2 ;
   7716     H2N := H2 ;
   7717     IF (LFR=3)+(LFR=2.5) ;
   7718       IF NT#0 ;
   7719         SNS S1 E1N H1N S1N NT ; %SNS: 7363
   7720         SNS S2 E2N H2N S2N NT ; %SNS: 7363
   7721         UMS ; %UMS: 1469
   7722         KICKSXYN S1N MSC ; %KICKSXYN: 7416
   7723         LPIP := LPI ;
   7724         LPI := 0 ;
   7725         LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7726         UPDATE 1 1 ; %UPDATE: 1261
   7727         LPI := LPIP ;
   7728         ENDIF ;
   7729       BENDFF3 ; %BENDFF3: 7422
   7730       IF NT#0 ;
   7731         UMS ; %UMS: 1469
   7732         KICKSXYN S2N MSC ; %KICKSXYN: 7416
   7733         LPI := 0 ;
   7734         LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   7735         UPDATE 1 1 ; %UPDATE: 1261
   7736         LPI := LPIP ;
   7737         ENDIF ;
   7738       ELSEIF (LFR=-1)+(LFR=-2) ;
   7739       NPOL := NT+1 ;
   7740       PPOL(1) :=  CONS(CHIM)/R ;
   7741       F := 1/R ;
   7742       MPOL(1) := 1 ;
   7743       LOOP I 2 NPOL ;
   7744         PPOL(I) := -PPOL(1)*N(I-1)*F ;
   7745         MPOL(I) := I ;
   7746         F := F/R ;
   7747         ENDLOOP ;
   7748       LOFF := 2 ;
   7749       FFELE R*PHI D 1/R -1 -2 '  ' ; %FFELE: 6860
   7750       ELSEIF TRUE ;
   7751       IF NT#0 ;
   7752         SNS S1 E1N H1N S1N NT ; %SNS: 7363
   7753         SNS S2 E2N H2N S2N NT ; %SNS: 7363
   7754         KICKSXYN S1N MSC ; %KICKSXYN: 7416
   7755         ENDIF ;
   7756       IF LFR=0 ;
   7757         BENDFF0 ; %BENDFF0: 7474
   7758         ELSEIF (LFR=1)+(LFR=1.9)+(LFR=2) ;
   7759         CO NOC+1 ; %CO:  965
   7760         LOOP I 1 10 ;
   7761           AA(I) := DATFF2(1,1,I) ;
   7762           FF(I) := GFF2(1,1,I) ;
   7763           LL(I) := LFF2(1,1,I) ;
   7764           ENDLOOP ;
   7765         CO NOC-1 ; %CO:  965
   7766         SYSCLM NAP 0 CONS(P0)*1E6/CLIGHT/CONS(Z0)/R D AA FF LL ; %SYSC
                  LM: 6752
   7767         ANM NAP MSC MSC ; %ANM: 1563
   7768         BENDFF0 ; %BENDFF0: 7474
   7769         CO NOC+1 ; %CO:  965
   7770         LOOP I 1 10 ;
   7771           AA(I) := DATFF2(2,1,I) ;
   7772           FF(I) := GFF2(2,1,I) ;
   7773           LL(I) := LFF2(2,1,I) ;
   7774           ENDLOOP ;
   7775         CO NOC-1 ; %CO:  965
   7776         SYSCLM NAP 0 CONS(P0)*1E6/CLIGHT/CONS(Z0)/R D AA FF LL ; %SYSC
                  LM: 6752
   7777         ANM NAP MSC MSC ; %ANM: 1563
   7778         ELSEIF LO(1) ;
   7779         WRITE 6            ' *** ERROR in '&CE&' BEND, FR '&S(LFR)&' n
                  ot supported.' ; %S:  282
   7780         QUIT 0 ;
   7781         ENDIF ;
   7782       IF NT#0 ;
   7783         KICKSXYN S2N MSC ; %KICKSXYN: 7416
   7784         ENDIF ;
   7785       LOCSET (COS(PHI)-1)*R SIN(PHI)*R PHI R*PHI 0 0 ; %LOCSET: 1114
   7786       IF (NRAY=0)*(LSPN=0) ;
   7787         LOOP I 1 TWOND ;
   7788           MAP(I) := MSC(I) ;
   7789           ENDLOOP ;
   7790         UPDATE 0 1 ; %UPDATE: 1261
   7791         ELSEIF TRUE ;
   7792         UPDATE 1 1 ; %UPDATE: 1261
   7793         ENDIF ;
   7794       ENDIF ;
   7795     ENDPROCEDURE ;
   7796   PROCEDURE DI R PHI D E1 H1 E2 H2 ;
   7797     CE := 'DI' ;
   7798     BEND R PHI*DEGRAD D E1*DEGRAD H1 E2*DEGRAD H2 0 0 0 0 ; %BEND: 734
                  1
   7799     ENDPROCEDURE ;
   7800   PROCEDURE DP R PHI D ;
   7801     VARIABLE PH 1 ;
   7802     PH := PHI*DEGRAD ;
   7803     CE := 'DP' ;
   7804     BEND R PH D PH/2 0 PH/2 0 0 0 0 0 ; %BEND: 7341
   7805     ENDPROCEDURE ;
   7806   PROCEDURE MC R PHI D N S1 S2 NT ;
   7807     CE := 'MC' ;
   7808     BEND R PHI*DEGRAD D 0 0 0 0 N S1 S2 NT ; %BEND: 7341
   7809     ENDPROCEDURE ;
   7810   PROCEDURE MS R PHI D N1 N2 N3 N4 N5 ;
   7811     VARIABLE S1 1 5 ;
   7812     VARIABLE S2 1 5 ;
   7813     VARIABLE N NMP 5 ;
   7814     VARIABLE I 1 ;
   7815     LOOP I 1 5 ;
   7816       S1(I) := 0 ;
   7817       S2(I) := 0 ;
   7818       ENDLOOP ;
   7819     N(1) := N1 ;
   7820     N(2) := N2 ;
   7821     N(3) := N3 ;
   7822     N(4) := N4 ;
   7823     N(5) := N5 ;
   7824     CE := 'MS' ;
   7825     BEND R PHI*DEGRAD D 0 0 0 0 N S1 S2 5 ; %BEND: 7341
   7826     ENDPROCEDURE ;
   7827   PROCEDURE MSL L PHI D N1 N2 N3 N4 N5 ;
   7828     VARIABLE S1 1 5 ;
   7829     VARIABLE S2 1 5 ;
   7830     VARIABLE N NMP 5 ;
   7831     VARIABLE I 1 ;
   7832     IF PHI=0 ;
   7833       DL L ; %DL: 6559
   7834       ELSEIF TRUE ;
   7835       LOOP I 1 5 ;
   7836         S1(I) := 0 ;
   7837         S2(I) := 0 ;
   7838         ENDLOOP ;
   7839       N(1) := N1 ;
   7840       N(2) := N2 ;
   7841       N(3) := N3 ;
   7842       N(4) := N4 ;
   7843       N(5) := N5 ;
   7844       CE := 'MSL' ;
   7845       BEND L/PHI/DEGRAD PHI*DEGRAD D 0 0 0 0 N S1 S2 5 ; %BEND: 7341
   7846       ENDIF ;
   7847     ENDPROCEDURE ;
   7848   PROCEDURE MPL L PHI D N1 N2 N3 N4 N5 ;
   7849     VARIABLE S1 1 5 ;
   7850     VARIABLE S2 1 5 ;
   7851     VARIABLE N NMP 5 ;
   7852     VARIABLE I 1 ;
   7853     VARIABLE PH 1 ;
   7854     IF PHI=0 ;
   7855       DL L ; %DL: 6559
   7856       ELSEIF TRUE ;
   7857       PH := PHI*DEGRAD ;
   7858       S1(1) := TAN(PH/2) ;
   7859       S2(1) := TAN(PH/2) ;
   7860       LOOP I 2 5 ;
   7861         S1(I) := 0 ;
   7862         S2(I) := 0 ;
   7863         ENDLOOP ;
   7864       N(1) := N1 ;
   7865       N(2) := N2 ;
   7866       N(3) := N3 ;
   7867       N(4) := N4 ;
   7868       N(5) := N5 ;
   7869       CE := 'MPL' ;
   7870       BEND L/PH PH D 0 0 0 0 N S1 S2 5 ; %BEND: 7341
   7871       ENDIF ;
   7872     ENDPROCEDURE ;
   7873   PROCEDURE DIL L PHI D E1 H1 E2 H2 ;
   7874     IF PHI=0 ;
   7875       DL L ; %DL: 6559
   7876       ELSEIF TRUE ;
   7877       DI L/PHI/DEGRAD PHI D E1 H1 E2 H2 ; %DI: 7796
   7878       ENDIF ;
   7879     ENDPROCEDURE ;
   7880   PROCEDURE MCLK L PHI D K S1 S2 NT ;
   7881     VARIABLE I 1 ;
   7882     VARIABLE RPOW 1 ;
   7883     VARIABLE R 1 ;
   7884     VARIABLE KN NM3 NT ;
   7885     VARIABLE TA 1 NT ;
   7886     IF (ABS(PHI)>1E-9) ;
   7887       R := L/(PHI*DEGRAD) ;
   7888       RPOW := R ;
   7889       LOOP I 1 NT ;
   7890         RPOW := RPOW*R ;
   7891         KN(I) := -K(I)*RPOW ;
   7892         ENDLOOP ;
   7893       MC R PHI D KN S1 S2 NT ; %MC: 7806
   7894       ELSEIF 1=1 ;
   7895       LOOP I 1 NT ;
   7896         TA(I) := 0 ;
   7897         ENDLOOP ;
   7898       MMSK L K TA NT D ; %MMSK: 7304
   7899       ENDIF ;
   7900     ENDPROCEDURE ;
   7901   PROCEDURE MSS R PHID D E1D H1 E2D H2 W ;
   7902     VARIABLE E1N NMP ;
   7903     VARIABLE E2N NMP ;
   7904     VARIABLE H1N NMP ;
   7905     VARIABLE H2N NMP ;
   7906     VARIABLE NTS 1 ;
   7907     VARIABLE LDL 1 ;
   7908     VARIABLE PHI 1 ;
   7909     VARIABLE E1 1 ;
   7910     VARIABLE E2 1 ;
   7911     VARIABLE NT 1 ;
   7912     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   7913     VARIABLE SM NM2 3 3 ;
   7914     VARIABLE I 1 ;
   7915     VARIABLE J 1 ;
   7916     VARIABLE LFT 1 ;
   7917     LFT := LFR ;
   7918     LFR := 3 ;
   7919     CE := 'MSS' ;
   7920     NT := 0 ;
   7921     PHI := PHID*DEGRAD ;
   7922     E1 := E1D*DEGRAD ;
   7923     E2 := E2D*DEGRAD ;
   7924     IF CONS(R)<0 ;
   7925       WRITE 6 ' *** ERROR in MSS, negative radius' ;
   7926       QUIT 0 ;
   7927       ELSEIF CONS(PHID)<0 ;
   7928       WRITE 6 ' *** ERROR in MSS, negative angle';
   7929       QUIT 0;
   7930       ELSEIF CONS(PHID)>360 ;
   7931       WRITE 6 ' *** ERROR in MSS, too big angle > 360';
   7932       QUIT 0;
   7933       ELSEIF (ABS(E1)+ABS(E2)+ABS(H1)+ABS(H2)#0)*(NT#0) ;
   7934       WRITE 6 ' @@@ ERROR in MSS, wrong parameters' ;
   7935       QUIT 0 ;
   7936       ENDIF ;
   7937     NSDP := -7 ;
   7938     LOFF := 2 ;
   7939     DR := D ;
   7940     LOOP I 1 8 ;
   7941       MSC(I) := DD(I) ;
   7942       ENDLOOP ;
   7943     IF (NRAY=0)*(LSPN=0) ;
   7944       LOOP I 1 TWOND ;
   7945         MSC(I) := MAP(I) ;
   7946         ENDLOOP ;
   7947       ENDIF ;
   7948     NTS := NOC ;
   7949     E1N := E1 ;
   7950     H1N := H1 ;
   7951     E2N := E2 ;
   7952     H2N := H2 ;
   7953     PPOL( 1) := CONS(CHIM)/R ;
   7954     PPOL( 2) := -R ;
   7955     PPOL( 3) := 0 ;
   7956     PPOL( 4) := D ;
   7957     PPOL( 5) := 0 ;
   7958     PPOL( 6) := 0 ;
   7959     PPOL( 7) := SIN(-E1N) ;
   7960     PPOL( 8) :=  COS(-E1N) ;
   7961     IF H1N#0 ;
   7962       PPOL( 7) := PPOL( 7)/H1N ;
   7963       PPOL( 8) :=  PPOL( 8)/H1N ;
   7964       ENDIF ;
   7965     PPOL( 9) := R*(COS(PHI) - 1) ;
   7966     PPOL(10) :=  R*SIN(PHI) ;
   7967     PPOL(11) := SIN(PHI-E2N) ;
   7968     PPOL(12) := -COS(E2N-PHI) ;
   7969     IF H2N#0 ;
   7970       PPOL(11) := PPOL(11)/H2N ;
   7971       PPOL(12) :=  PPOL(12)/H2N ;
   7972       ENDIF ;
   7973     PPOL(11) := PPOL(11) + PPOL(9) ;
   7974     PPOL(12) := PPOL(12) + PPOL(10) ;
   7975     PPOL(13) := H1N ;
   7976     PPOL(14) := H2N ;
   7977     PPOL(20) := PHI ;
   7978     LOOP I 1 4 ;
   7979       LOOP J 1 4 ;
   7980         PPOL(20+4*(I-1)+J) := W(I,J) ;
   7981         ENDLOOP ;
   7982       ENDLOOP ;
   7983     LDL := 10*D ;
   7984     LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1114
   7985     IF LFT=3 ;
   7986       LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0 ;
                   %LOCSET: 1114
   7987       SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6634
   7988       ENDIF ;
   7989     UMS ; %UMS: 1469
   7990     DLACT MSC -LDL ; %DLACT: 6541
   7991     SNM MSC MS ; %SNM: 1531
   7992     SSNM SSCR SM ; %SSNM: 1546
   7993     SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D ; 
                  %SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   7994     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   7995     DLACT MSC -LDL ; %DLACT: 6541
   7996     SLOC := R*PHI ;
   7997     XLOC := XLOC+LDL*SIN(PLOC) ;
   7998     ZLOC := ZLOC-LDL*COS(PLOC) ;
   7999     UPDATE 1 1 ; %UPDATE: 1261
   8000     FR LFT ; %FR: 5434
   8001     ENDPROCEDURE ;
   8002   PROCEDURE CMR I D ;
   8003     VARIABLE MU 1 ;
   8004     MU := 1.2566E-6 ;
   8005     CE := 'CMR' ;
   8006     NPOL := 1 ;
   8007     PPOL(1) := MU*I/(2*D) ;
   8008     MPOL(1) := 20 ;
   8009     NSDP := 5 ;
   8010     LOFF := 1 ;
   8011     DSDED 5E4*D 0 1E-4*D 1E4*D 1E4*D D ; %DSDED: 6660
   8012     ENDPROCEDURE ;
   8013   PROCEDURE CMG B D ;
   8014     NPOL := 1 ;
   8015     PPOL(1) := B ;
   8016     MPOL(1) :=  20 ;
   8017     NSDP := 3 ;
   8018     CE := 'CMG' ;
   8019     LOFF := 1 ;
   8020     DSDED 5*D 0 D/40 D 10*D D ; %DSDED: 6660
   8021     ENDPROCEDURE ;
   8022   PROCEDURE CML B D ;
   8023     NPOL := 1 ;
   8024     PPOL(1) := B ;
   8025     MPOL(1) := 20 ;
   8026     NSDP := 7 ;
   8027     CE := 'CML' ;
   8028     LOFF := 1 ;
   8029     DSDED 5E4*D 0 1E-4*D 1E4*D 1E4*D D ; %DSDED: 6660
   8030     ENDPROCEDURE ;
   8031   PROCEDURE CMSI I N D L ;
   8032     VARIABLE MU 1 ;
   8033     MU := 1.2566E-6 ;
   8034     CE := 'CMSI' ;
   8035     NPOL := 1 ;
   8036     PPOL(1) := MU*I*N/2 ;
   8037     PPOL(2) := L ;
   8038     MPOL(1) := 20 ;
   8039     NSDP := 10 ;
   8040     LOFF := 1 ;
   8041     DSDED 200*D L 1E-4*D D 3*D D ; %DSDED: 6660
   8042     ENDPROCEDURE ;
   8043   PROCEDURE CMS B D L ;
   8044     NPOL := 1 ;
   8045     PPOL(1) := B*D/2/TANH(L/2/D) ;
   8046     PPOL(2) := L ;
   8047     MPOL(1) := 20 ;
   8048     NSDP := 8 ;
   8049     LOFF := 1 ;
   8050     CE := 'CMS' ;
   8051     DSDED 25*D L 1E-4*D D 3*D D ; %DSDED: 6660
   8052     ENDPROCEDURE ;
   8053   PROCEDURE CMSP B D L S1 S2 ;
   8054     VARIABLE DS1 1 ;
   8055     VARIABLE DS2 1 ;
   8056     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   8057     VARIABLE SM NM2 3 3 ;
   8058     NPOL := 1 ;
   8059     PPOL(1) := B*D/2/TANH(L/2/D) ;
   8060     PPOL(2) := L ;
   8061     MPOL(1) := 20 ;
   8062     NSDP := 8 ;
   8063     LOFF := 1 ;
   8064     CE := 'CMSP' ;
   8065     UMS ; %UMS: 1469
   8066     SNM MSC MS ; %SNM: 1531
   8067     SSNM SSCR SM ; %SSNM: 1546
   8068     DS1 := 0 ;
   8069     IF ABS(S1)<1E-5 ;
   8070       DS1 := L/2-20*D ;
   8071       ENDIF ;
   8072     IF ABS(S1)<1E-5 ;
   8073       DLACT MS DS1 ; %DLACT: 6541
   8074       ELSEIF TRUE ;
   8075       DS1 := S1 ;
   8076       ENDIF ;
   8077     IF ABS(S2-L)<1E-5 ;
   8078       DS2 := 20*D+L/2 ;
   8079       ELSEIF TRUE ;
   8080       DS2 := S2 ;
   8081       ENDIF ;
   8082     LOCSET 0 DS1 0 DS1 0 0 ; %LOCSET: 1114
   8083     SDELE DS1 DS2 1E-4*D (20*D-L/2)/100 3*D D ; %SDELE: 6576
   8084     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   8085     IF ABS(S2-L)<1E-5 ;
   8086       DLACT MSC L/2-20*D ; %DLACT: 6541
   8087       ZLOC := ZLOC-(L/2-20*D) ;
   8088       ENDIF ;
   8089     SLOC := S2-S1 ;
   8090     UPDATE 1 1 ; %UPDATE: 1261
   8091     ENDPROCEDURE ;
   8092   PROCEDURE CMST NI R1 R2 L ;
   8093     VARIABLE MU 1 ;
   8094     MU := 1.2566E-6 ;
   8095     IF (R1<0)+(R1=0) ;
   8096       WRITE 6 ' *** ERROR in CMST, R1 < 0 or R1 = 0' ;
   8097       QUIT 0 ;
   8098       ELSEIF (R2<R1)+(R2=R1) ;
   8099       WRITE 6 ' *** ERROR in CMST, R2 < R1 or R2 = R1' ;
   8100       QUIT 0 ;
   8101       ENDIF ;
   8102     CE := 'CMST' ;
   8103     NPOL := 1 ;
   8104     PPOL(1) := MU*NI/4/(R2-R1) ;
   8105     PPOL(2) := L ;
   8106     PPOL(3) := R1 ;
   8107     PPOL(4) := R2 ;
   8108     MPOL(1) := 20 ;
   8109     NSDP := 13 ;
   8110     LOFF := 1 ;
   8111     DSDED 200*R2 L 1E-4*R1 R1 3*R1 R1 ; %DSDED: 6660
   8112     ENDPROCEDURE ;
   8113   PROCEDURE CMSTP N NI R1 R2 L X S1 S2 ;
   8114     VARIABLE MU 1 ;
   8115     VARIABLE F 1 ;
   8116     VARIABLE D 1 ;
   8117     VARIABLE IS 1 ;
   8118     CE := 'CMSTP' ;
   8119     MU := 1.2566E-6 ;
   8120     D := 1D8 ;
   8121     PPOL(1) := N ;
   8122     LOOP IS 1 N ;
   8123       D := MIN(D,R1(IS)) ; %MIN:  207
   8124       IF (R2(IS)<R1(IS))+(R2(IS)=R1(IS))+(L(IS)<0) ;
   8125         PPOL(1) := -1 ;
   8126         ENDIF ;
   8127       MFD(IS,1) := MU*NI(IS)/4/(R2(IS)-R1(IS)) ;
   8128       MFD(IS,2) := L(IS) ;
   8129       MFD(IS,3) := R1(IS) ;
   8130       MFD(IS,4) := R2(IS) ;
   8131       MFD(IS,5) := X(IS) ;
   8132       ENDLOOP ;
   8133     IF (D<0)+(D=0)+(D=1D8) ;
   8134       WRITE 6 ' *** ERROR in CMSTP, R1<0 or R1=0 or R1 too large' ;
   8135       QUIT 0 ;
   8136       ELSEIF PPOL(1)=-1 ;
   8137       WRITE 6 ' *** ERROR in CMSTP, R2<R1 or R2=R1 or L<0' ;
   8138       QUIT 0 ;
   8139       ENDIF ;
   8140     F := 200*D ;
   8141     NPOL := 1 ;
   8142     MPOL(1) := 20 ;
   8143     NSDP := 14 ;
   8144     LOFF := 1 ;
   8145     LOCSET 0 S1 0 S1 0 0 ; %LOCSET: 1114
   8146     SDELE S1 S2 1E-4*D D 3*D D ; %SDELE: 6576
   8147     UPDATE 1 1 ; %UPDATE: 1261
   8148     ENDPROCEDURE ;
   8149   PROCEDURE WI B K L D K1 IA A ;
   8150     VARIABLE L1 1 ;
   8151     VARIABLE LS 1 ;
   8152     VARIABLE I 1 ;
   8153     VARIABLE X 1 ;
   8154     VARIABLE XLOC0 1 ;
   8155     VARIABLE ZLOC0 1 ;
   8156     VARIABLE PLOC0 1 ;
   8157     VARIABLE SLOC0 1 ;
   8158     VARIABLE LLPI 1 ;
   8159     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   8160     VARIABLE SM NM2 3 3 ;
   8161     VARIABLE SCE 1 ;
   8162     SCE := 2E-5 ;
   8163     PPOL(1) := B ;
   8164     PPOL(2) := 2*PI/K ;
   8165     PPOL(3) := D ;
   8166     PPOL(4) := L ;
   8167     PPOL(5) := K1 ;
   8168     PPOL(6) := IA ;
   8169     NSDP := -3 ;
   8170     LOFF := 2 ;
   8171     CE := 'WI' ;
   8172     IF IA=0 ;
   8173       LOOP I 1 10 ;
   8174         PPOL(I+6) := 0 ;
   8175         ENDLOOP ;
   8176       PPOL(8) := 8 ;
   8177       L1 := 5*D ;
   8178       ELSEIF IA=1 ;
   8179       LOOP I 1 10 ;
   8180         PPOL(I+6) := A(I) ;
   8181         ENDLOOP ;
   8182       L1 := 10*D ;
   8183       ELSEIF TRUE ;
   8184       WRITE 6 ' *** ERROR in WI fringe field mode' ;
   8185       ENDIF ;
   8186     DR := D ;
   8187     LOCSET 0 0 0 SCE 0 0 ; %LOCSET: 1114
   8188     UPDATE 0 0 ; %UPDATE: 1261
   8189     SPOS := SPOS-SCE ;
   8190     LLPI := LPI ;
   8191     LPI := 0 ;
   8192     LS := L+4*L1 ;
   8193     UMS ; %UMS: 1469
   8194     DLACT MSC -L1 ; %DLACT: 6541
   8195     SNM MSC MS ; %SNM: 1531
   8196     SSNM SSCR SM ; %SSNM: 1546
   8197     LRKO := -LRKO ;
   8198     X := L ;
   8199     FIT X ;
   8200       LOCSET 0 -L1 0 0 0 0 ; %LOCSET: 1114
   8201       SDELEREF -L1 X K/500 K/10 K D ; %SDELEREF: 6634
   8202       ENDFIT L*1E-5 100 1 ABS(ZLOC-L) ;
   8203     LRKO := -LRKO ;
   8204     XLOC0 := XLOC ;
   8205     ZLOC0 := ZLOC ;
   8206     PLOC0 := PLOC ;
   8207     SLOC0 := SLOC ;
   8208     LOCSET 0 -L1 0 0 0 0 ; %LOCSET: 1114
   8209     SDELE 0 LS K/500 K/10 K D ; %SDELE: 6576
   8210     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   8211     DLACT MSC -(ZLOC-L) ; %DLACT: 6541
   8212     LOCSET XLOC0 ZLOC0 PLOC0 SLOC0 0 0 ; %LOCSET: 1114
   8213     UPDATE 1 1 ; %UPDATE: 1261
   8214     LPI := LLPI ;
   8215     PS D ; %PS: 6571
   8216     ENDPROCEDURE ;
   8217   PROCEDURE MF L A NX NZ DX DZ SIGMA D SX SZ SPHI ;
   8218     VARIABLE DS1 1 ;
   8219     VARIABLE IX 1 ;
   8220     VARIABLE IZ 1 ;
   8221     IF (SIGMA<0.5)+(SIGMA>5.0) ;
   8222       WRITE 6 ' *** ERROR in MF, SIGMA < 0.5  or  SIGMA > 5.0' ;
   8223       ENDIF ;
   8224     IF (DX<0)+(DX=0)+(DZ<0)+(DZ=0) ;
   8225       WRITE 6 ' *** ERROR in MF, DX =< 0  or  DZ =< 0' ;
   8226       ENDIF ;
   8227     MFP(1) := 0 ;
   8228     LOOP IX 1 NX ;
   8229       LOOP IZ 1 NZ ;
   8230         MFD(IX,IZ) := A(IX,IZ) ;
   8231         ENDLOOP ;
   8232       ENDLOOP ;
   8233     PPOL(1) := NX ;
   8234     PPOL(2) := NZ ;
   8235     PPOL(3) := DX ;
   8236     PPOL(4) := DZ ;
   8237     PPOL(5) := SIGMA ;
   8238     NSDP := -5 ;
   8239     LOFF := 2 ;
   8240     DS1 := MIN(DX,DZ) ; %MIN:  207
   8241     LOCSET SX SZ -SPHI*DEGRAD 0 0 0 ; %LOCSET: 1114
   8242     CE := 'MF' ;
   8243     SDELE 0 L DS1/100 SQRT(DS1*L/5) L/5 D ; %SDELE: 6576
   8244     UPDATE 1 1 ; %UPDATE: 1261
   8245     IF MFP(1)>0 ;
   8246       WRITE 6 (' --- WARNING in MF, out of range of data at '&        
                  SF(MFP(1),'(I8)')&' points') ; %SF:  285
   8247       ENDIF ;
   8248     ENDPROCEDURE ;
   8249   PROCEDURE MFFLD XMIN ZMIN XMAX ZMAX DX DZ ;
   8250     VARIABLE NX 1 ;
   8251     VARIABLE NZ 1 ;
   8252     NX := INT((XMAX-XMIN)/DX+1.00001) ;
   8253     NZ := INT((ZMAX-ZMIN)/DZ+1.00001) ;
   8254     IF (NX<2)+(NZ<2) ;
   8255       WRITE 6 ' *** ERROR in MFFLD, NX < 2 or NZ < 2' ;
   8256       QUIT 0 ;
   8257       ENDIF ;
   8258     IF LFR#3 ;
   8259       WRITE 6 ' *** ERROR in MFFLD, call FR 3 before MFFLD' ;
   8260       ENDIF ;
   8261     MFP(2) := 1 ;
   8262     OPENF 98 'MFFLD.DAT' 'UNKNOWN' ;
   8263     WRITE 98 ' MIN (X,Z) = ('&SF(XMIN,'(G16.9)')&','&SF(ZMIN,'(G16.9)'
                  )&')' ; %SF:  285 %SF:  285
   8264     WRITE 98 ' MAX (X,Z) = ('&SF(XMAX,'(G16.9)')&','&SF(ZMAX,'(G16.9)'
                  )&')' ; %SF:  285 %SF:  285
   8265     WRITE 98 ' DX = '&SF(DX,'(D16.9)')&',  DZ = '&SF(DZ,'(D16.9)') ; %
                  SF:  285 %SF:  285
   8266     WRITE 98 ' NX = '&SF(NX,'(I6)')&',  NZ = '&SF(NZ,'(I6)') ; %SF:  2
                  85 %SF:  285
   8267     MFP(3) := XMIN ;
   8268     MFP(4) := XMAX ;
   8269     MFP(5) := DX ;
   8270     MFP(6) := ZMIN ;
   8271     MFP(7) := ZMAX ;
   8272     MFP(8) := DZ ;
   8273     ENDPROCEDURE ;
   8274   PROCEDURE MFFLDIN A NX NZ DX DZ ;
   8275     VARIABLE STR 80 ;
   8276     VARIABLE IX 1 ;
   8277     VARIABLE IZ 1 ;
   8278     VARIABLE ADT 1 ;
   8279     OPENF 98 'MFFLD.DAT' 'OLD' ;
   8280     READ 98 STR ;
   8281     READ 98 STR ;
   8282     READ 98 STR ;
   8283     DX := R(STR,7,22) ; %R:  279
   8284     DZ := R(STR,31,46) ; %R:  279
   8285     READ 98 STR ;
   8286     NX := R(STR,7,12) ; %R:  279
   8287     NZ := R(STR,21,26) ; %R:  279
   8288     LOOP IX 1 NX ;
   8289       LOOP IZ 1 NZ ;
   8290         READ 98 ADT ;
   8291         A(IX,IZ) := ADT ;
   8292         ENDLOOP ;
   8293       ENDLOOP ;
   8294     CLOSEF 98 ;
   8295     ENDPROCEDURE ;
   8296   FUNCTION FGDATCHECK DUMMY;
   8297     VARIABLE IB 1;
   8298     VARIABLE IL 1;
   8299     VARIABLE NB 1;
   8300     VARIABLE NS0 1;
   8301     VARIABLE DR 1;
   8302     VARIABLE OR 1;
   8303     FGDATCHECK := LO(1) ;
   8304     NB := MFD(1,1) ;
   8305     IF NB<2 ;
   8306       FGDATCHECK := LO(0) ;
   8307       WRITE 6         ' *** ERROR in FGDATCHECK, at least two radius b
                  locks required';
   8308       ENDIF;
   8309     IF FGDATCHECK ;
   8310       LOOP IB 2 NB+1 ;
   8311         IF MFD(IB,1)<2 ;
   8312           FGDATCHECK := LO(0) ;
   8313           WRITE 6 (' *** ERROR in '&            'FGDATCHECK, block hea
                  der and one Fourier mode required') ;
   8314           ELSEIF LENGTH(MFD(IB,2))<2 ;
   8315           FGDATCHECK := LO(0) ;
   8316           WRITE 6            ' *** ERROR in FGDATCHECK, block header t
                  oo short' ;
   8317           ELSEIF LENGTH(MFD(IB,2))>2 ;
   8318           WRITE 6            ' --- WARNING in FGDATCHECK, block header
                   contains extra data' ;
   8319           ENDIF ;
   8320         ENDLOOP ;
   8321       ENDIF ;
   8322     IF FGDATCHECK ;
   8323       DR := ABS(MFD(3,2)|1 - MFD(2,2)|1) ;
   8324       NS0 := MFD(2,2)|2 ;
   8325       OR := MFD(2,2)|1 - DR ;
   8326       LOOP IB 2 NB+1 ;
   8327         IF (MFD(IB,2)|1 - OR - DR)>1E-14 ;
   8328           FGDATCHECK := LO(0) ;
   8329           WRITE 6            ' *** ERROR in FGDATCHECK, radii not even
                  ly spaced and increasing' ;
   8330           ENDIF;
   8331         IF MFD(IB,2)|2#NS0 ;
   8332           FGDATCHECK := LO(0) ;
   8333           WRITE 6            ' *** ERROR in FGDATCHECK, number of sect
                  ors not constant' ;
   8334           ENDIF ;
   8335         OR := MFD(IB,2)|1 ;
   8336         ENDLOOP ;
   8337       ENDIF ;
   8338     IF FGDATCHECK ;
   8339       LOOP IB 2 NB+1 ;
   8340         IF MFD(IB,3)|1<0 ;
   8341           WRITE 6            ' --- WARNING in FGDATCHECK, negative con
                  stant Fourier coefficient';
   8342           ENDIF ;
   8343         LOOP IL 3 MFD(IB,1)+1 ;
   8344           IF LENGTH(MFD(IB,IL))<2 ;
   8345             FGDATCHECK := LO(0) ;
   8346             WRITE 6            ' *** ERROR in FGDATCHECK, Fourier coef
                  ficent and phase required' ;
   8347             ELSEIF LO(1) ;
   8348             IF LENGTH(MFD(IB,IL))>2 ;
   8349               WRITE 6                  ' --- WARNING in FGDATCHECK, da
                  ta line contains extra data' ;
   8350               ENDIF ;
   8351             IF ABS(MFD(IB,IL)|2)>PI+1E-14 ;
   8352               WRITE 6                  ' --- WARNING in FGDATCHECK, ph
                  ase not in [-pi,pi]'                  MFD(IB,IL);
   8353               ENDIF ;
   8354             ENDIF ;
   8355           ENDLOOP ;
   8356         ENDLOOP ;
   8357       ENDIF ;
   8358     ENDFUNCTION ;
   8359   PROCEDURE EQ L VV D ;
   8360     NPOL := 1 ;
   8361     PPOL(1) := VV/D/D ;
   8362     MPOL(1) := -2 ;
   8363     LOFF := 1 ;
   8364     FFELE L D 0 1 2 'EQ' ; %FFELE: 6860
   8365     ENDPROCEDURE ;
   8366   PROCEDURE EH L VV D ;
   8367     NPOL := 1 ;
   8368     PPOL(1) := VV/D/D/D ;
   8369     MPOL(1) := -3 ;
   8370     LOFF := 1 ;
   8371     FFELE L D 0 1 2 'EH' ; %FFELE: 6860
   8372     ENDPROCEDURE ;
   8373   PROCEDURE EO L VV D ;
   8374     NPOL := 1 ;
   8375     PPOL(1) := VV/D/D/D/D ;
   8376     MPOL(1) := -4 ;
   8377     LOFF := 1 ;
   8378     FFELE L D 0 1 2 'EO' ; %FFELE: 6860
   8379     ENDPROCEDURE ;
   8380   PROCEDURE ED L VV D ;
   8381     NPOL := 1 ;
   8382     PPOL(1) := VV/D/D/D/D/D ;
   8383     MPOL(1) := -5 ;
   8384     LOFF := 1 ;
   8385     FFELE L D 0 1 2 'ED' ; %FFELE: 6860
   8386     ENDPROCEDURE ;
   8387   PROCEDURE EZ L VV D ;
   8388     NPOL := 1 ;
   8389     PPOL(1) := VV/D/D/D/D/D/D ;
   8390     MPOL(1) := -6 ;
   8391     LOFF := 1 ;
   8392     FFELE L D 0 1 2 'EZ' ; %FFELE: 6860
   8393     ENDPROCEDURE ;
   8394   PROCEDURE E5 L VQ VH VO VD VZ D ;
   8395     NPOL := 5 ;
   8396     PPOL(1) := VQ/D/D ;
   8397     MPOL(1) := -2 ;
   8398     PPOL(2) := VH/D/D/D ;
   8399     MPOL(2) := -3 ;
   8400     PPOL(3) := VO/D/D/D/D ;
   8401     MPOL(3) := -4 ;
   8402     PPOL(4) := VD/D/D/D/D/D ;
   8403     MPOL(4) := -5 ;
   8404     PPOL(5) := VZ/D/D/D/D/D/D ;
   8405     MPOL(5) := -6 ;
   8406     LOFF := 1 ;
   8407     FFELE L D 0 1 2 'E5' ; %FFELE: 6860
   8408     ENDPROCEDURE ;
   8409   PROCEDURE EM L VA NVA D ;
   8410     VARIABLE I 1 ;
   8411     VARIABLE DP NM2 ;
   8412     DP := 1/D ;
   8413     LOOP I 1 NVA ;
   8414       DP := DP/D ;
   8415       PPOL(I) := VA(I)*DP ;
   8416       MPOL(I) := -(I+1) ;
   8417       ENDLOOP ;
   8418     LOFF := 1 ;
   8419     NPOL := NVA ;
   8420     FFELE L D 0 1 2 'EM' ; %FFELE: 6860
   8421     ENDPROCEDURE ;
   8422   PROCEDURE EMS L VA VS NV D ;
   8423     VARIABLE I 1 ;
   8424     VARIABLE DP NM2 ;
   8425     DP := 1/D ;
   8426     LOOP I 1 NV ;
   8427       DP := DP/D ;
   8428       PPOL(I   ) := VA(I)*DP ;
   8429       MPOL(I   ) := -(I+1) ;
   8430       ENDLOOP ;
   8431     DP := 1/D ;
   8432     LOOP I 1 NV ;
   8433       DP := DP/D ;
   8434       PPOL(I+NV) := -VS(I)*DP*(I+1) ;
   8435       MPOL(I+NV) := -(I+1+20) ;
   8436       ENDLOOP ;
   8437     LOFF := 1 ;
   8438     NPOL := 2*NV ;
   8439     FFELE L D 0 1 2 'EMS' ; %FFELE: 6860
   8440     ENDPROCEDURE ;
   8441   PROCEDURE EBEND R PHI D N NT CI ;
   8442     VARIABLE RPP 1 ;
   8443     VARIABLE LDL 1 ;
   8444     VARIABLE I 1 ;
   8445     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   8446     VARIABLE SM NM2 3 3 ;
   8447     CE := CI ;
   8448     DR := D ;
   8449     LOFF := 2 ;
   8450     IF CONS(R)<0 ;
   8451       WRITE 6 ' *** ERROR in '&CE&', negative radius' ;
   8452       QUIT 0 ;
   8453       ELSEIF CONS(PHI)<0 ;
   8454       WRITE 6 ' *** ERROR in '&CE&', negative angle' ;
   8455       QUIT 0 ;
   8456       ENDIF ;
   8457     IF LFR=0 ;
   8458       NPOL := NT+1 ;
   8459       PPOL(1) := CONS(CHIE)/R/1000 ;
   8460       RPP := 1 ;
   8461       LOOP I 1 NT ;
   8462         RPP := RPP*R ;
   8463         PPOL(I+1) := -PPOL(1)*N(I)/RPP/(I+1) ;
   8464         ENDLOOP ;
   8465       LOOP I 1 NPOL ;
   8466         MPOL(I) := -I ;
   8467         ENDLOOP ;
   8468       SIELE R*PHI D ; %SIELE: 6682
   8469       LOCSET R*(COS(PHI)-1) R*SIN(PHI) PHI R*PHI 0 0 ; %LOCSET: 1114
   8470       UPDATE 1 1 ; %UPDATE: 1261
   8471       ELSEIF (LFR=3)+(LFR=2.5) ;
   8472       NSDP := -11 ;
   8473       LOOP I 1 36 ;
   8474         PPOL(I) := 0 ;
   8475         ENDLOOP ;
   8476       PPOL(1) := CONS(CHIE)/R/1000 ;
   8477       PPOL(2) := -R ;
   8478       PPOL(4) := D ;
   8479       PPOL(8) := 1 ;
   8480       PPOL(9) := R*(COS(PHI)-1) ;
   8481       PPOL(10) := R*SIN(PHI) ;
   8482       PPOL(11) := PPOL(9)+SIN(PHI) ;
   8483       PPOL(12) := PPOL(10)-COS(PHI) ;
   8484       IF NT>16 ;
   8485         WRITE 6 ' --- WARNING in '&CE&', NT is too large.' ;
   8486         ENDIF ;
   8487       PPOL(20) := MIN(NT,16) ; %MIN:  207
   8488       LOOP I 1 PPOL(20) ;
   8489         PPOL(20+I) := N(I)/(I+1) ;
   8490         ENDLOOP ;
   8491       LDL := 10*D ;
   8492       LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1114
   8493       IF LFR=3 ;
   8494         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1114
   8495         SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6634
   8496         ENDIF ;
   8497       UMS ; %UMS: 1469
   8498       DLACT MSC -LDL ; %DLACT: 6541
   8499       SNM MSC MS ; %SNM: 1531
   8500       SSNM SSCR SM ; %SSNM: 1546
   8501       LOCSET XLOC ZLOC PLOC 0 0 0 ; %LOCSET: 1114
   8502       SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D 
                  ; %SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   8503       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   8504       DLACT MSC -LDL ; %DLACT: 6541
   8505       SLOC := R*PHI ;
   8506       XLOC := XLOC+LDL*SIN(PLOC) ;
   8507       ZLOC := ZLOC-LDL*COS(PLOC) ;
   8508       UPDATE 1 1 ; %UPDATE: 1261
   8509       ELSEIF LO(1) ;
   8510       WRITE 6         ' *** ERROR in '&CE&', FR '&S(LFR)&' not support
                  ed.' ; %S:  282
   8511       QUIT 0 ;
   8512       ENDIF ;
   8513     ENDPROCEDURE ;
   8514   PROCEDURE EC R PHID D N NT ;
   8515     EBEND R PHID*DEGRAD D N NT 'EC' ; %EBEND: 8441
   8516     ENDPROCEDURE ;
   8517   PROCEDURE ES R PHID D N1 N2 N3 N4 N5 ;
   8518     VARIABLE NT 1 ;
   8519     VARIABLE N 1 5 ;
   8520     NT := 5 ;
   8521     N(1) := N1 ;
   8522     N(2) := N2 ;
   8523     N(3) := N3 ;
   8524     N(4) := N4 ;
   8525     N(5) := N5 ;
   8526     EBEND R PHID*DEGRAD D N NT 'ES' ; %EBEND: 8441
   8527     ENDPROCEDURE ;
   8528   PROCEDURE ECL R PHID D ;
   8529     VARIABLE NT 1 ;
   8530     VARIABLE N 1 MAX(5,NO+1) ; %MAX:  204
   8531     VARIABLE I 1 ;
   8532     NT := MAX(5,NO+1) ; %MAX:  204
   8533     LOOP I 1 NT ;
   8534       N(I) := 1 ;
   8535       ENDLOOP ;
   8536     LOOP I 2 NT 2 ;
   8537       N(I) := -N(I) ;
   8538       ENDLOOP ;
   8539     EBEND R PHID*DEGRAD D N NT 'ECL' ; %EBEND: 8441
   8540     ENDPROCEDURE ;
   8541   PROCEDURE ESP R PHID D ;
   8542     VARIABLE NT 1 ;
   8543     VARIABLE N 1 MAX(5,NO+1) ; %MAX:  204
   8544     VARIABLE I 1 ;
   8545     NT := MAX(5,NO+1) ; %MAX:  204
   8546     LOOP I 1 NT ;
   8547       N(I) := I+1 ;
   8548       ENDLOOP ;
   8549     LOOP I 2 NT 2 ;
   8550       N(I) := -N(I) ;
   8551       ENDLOOP ;
   8552     EBEND R PHID*DEGRAD D N NT 'ESP' ; %EBEND: 8441
   8553     ENDPROCEDURE ;
   8554   PROCEDURE WC RE RM L D NE NM NT ;
   8555     VARIABLE I 1 ;
   8556     NPOL := 2+2*NT ;
   8557     PPOL(1) := -CONS(CHIE)/RE/1000 ;
   8558     MPOL(1) := -1 ;
   8559     PPOL(2) :=  CONS(CHIM)/RM      ;
   8560     MPOL(2) := +1 ;
   8561     LOOP I 1 NT ;
   8562       PPOL(2+I) := PPOL(1)*NE(I)/(I+1) ;
   8563       MPOL(2+I) := -I-1 ;
   8564       PPOL(2+I+NT) := PPOL(2)*NM(I) ;
   8565       MPOL(2+I+NT) := I+1 ;
   8566       ENDLOOP ;
   8567     LOFF := 2 ;
   8568     FFELE L D 1/RM-1/RE -1 -2 'WC' ; %FFELE: 6860
   8569     ENDPROCEDURE ;
   8570   PROCEDURE WF RE RM L D ;
   8571     WC RE RM L D 0 0 0 ; %WC: 8554
   8572     ENDPROCEDURE ;
   8573   PROCEDURE MSEM R PHI DM NB DE EV N CI ;
   8574     VARIABLE I 1 ;
   8575     VARIABLE NM 1 ;
   8576     VARIABLE F NMP ;
   8577     VARIABLE LDL 1 ;
   8578     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  204
   8579     VARIABLE SM NM2 3 3 ;
   8580     CE := CI ;
   8581     DR := DE ;
   8582     LOFF := 2 ;
   8583     IF LUM#1 ;
   8584       WRITE 6 ' *** ERROR, call UM before MSEM' ;
   8585       QUIT 0 ;
   8586       ELSEIF CONS(R)<0 ;
   8587       WRITE 6 ' *** ERROR in '&CE&', negative radius' ;
   8588       QUIT 0 ;
   8589       ELSEIF CONS(PHI)<0 ;
   8590       WRITE 6 ' *** ERROR in '&CE&', negative angle';
   8591       QUIT 0 ;
   8592       ENDIF ;
   8593     NPOL := 1 ;
   8594     PPOL(1) := CONS(CHIM)/R ;
   8595     MPOL(1) := 1 ;
   8596     F := 1 ;
   8597     LOOP I 1 N ;
   8598       F := F/R ;
   8599       IF ABS(NB(I))#0 ;
   8600         NPOL := NPOL+1 ;
   8601         MPOL(NPOL) := I+1 ;
   8602         PPOL(NPOL) := -PPOL(1)*NB(I)*F ;
   8603         ENDIF ;
   8604       ENDLOOP ;
   8605     NM := NPOL ;
   8606     F := 1/DE ;
   8607     LOOP I 1 N ;
   8608       F := F/DE ;
   8609       IF ABS(EV(I))#0 ;
   8610         NPOL := NPOL+1 ;
   8611         MPOL(NPOL) := -(I+1) ;
   8612         PPOL(NPOL) := EV(I)*F ;
   8613         ENDIF ;
   8614       ENDLOOP ;
   8615     MPOL(NPOL+1) := NM ;
   8616     PPOL(NPOL+1) := R ;
   8617     PPOL(NPOL+2) := R*(COS(PHI)-1) ;
   8618     PPOL(NPOL+4) := PPOL(NPOL+2)+SIN(PHI) ;
   8619     PPOL(NPOL+3) := R*SIN(PHI) ;
   8620     PPOL(NPOL+5) := PPOL(NPOL+3)-COS(PHI) ;
   8621     MPOL(NPOL+2) := 1 ;
   8622     IF (LFR=0)+(NPOL=NM) ;
   8623       SIELE R*PHI DE ; %SIELE: 6682
   8624       LOCSET R*(COS(PHI)-1) R*SIN(PHI) PHI R*PHI 0 0 ; %LOCSET: 1114
   8625       UPDATE 1 1 ; %UPDATE: 1261
   8626       ELSEIF (LFR=3)+(LFR=2.5) ;
   8627       NSDP := -21 ;
   8628       LDL := 10*DE ;
   8629       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   8630       IF LFR=3 ;
   8631         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1114
   8632         SDELEREF 0.5*R*PHI 0 DE/200 DE 7*DE DE ; %SDELEREF: 6634
   8633         ENDIF ;
   8634       MPOL(NPOL+2) := 0 ;
   8635       SDELE 0 -LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE) DE ; %
                  SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   8636       SNM MSC MS ; %SNM: 1531
   8637       SSNM SSCR SM ; %SSNM: 1546
   8638       MPOL(NPOL+2) := 1 ;
   8639       SDELE 0 R*PHI+2*LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE)
                   DE ; %SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   8640       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1225
   8641       MPOL(NPOL+2) := 0 ;
   8642       SDELE 0 -LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE) DE ; %
                  SDELE: 6576 %MIN:  207 %MIN:  207 %MIN:  207
   8643       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1225
   8644       SLOC := R*PHI ;
   8645       UPDATE 1 1 ; %UPDATE: 1261
   8646       ELSEIF LO(1) ;
   8647       WRITE 6         ' *** ERROR in MSEM, FR '&S(LFR)&' not supported
                  .' ; %S:  282
   8648       QUIT 0 ;
   8649       ENDIF ;
   8650     ENDPROCEDURE ;
   8651   PROCEDURE CEG V D ;
   8652     NPOL := 1 ;
   8653     PPOL(1) := V ;
   8654     MPOL(1) := -20 ;
   8655     NSDP := 3 ;
   8656     CE := 'CEG' ;
   8657     LOFF := 1 ;
   8658     DSDED 5*D 0 1E-4*D D 10*D D ; %DSDED: 6660
   8659     ENDPROCEDURE ;
   8660   PROCEDURE CEL V D L C ;
   8661     VARIABLE O 1 ;
   8662     O := 1.315 ;
   8663     NPOL := 1 ;
   8664     MPOL(1) := -20 ;
   8665     NSDP := 6 ;
   8666     DR := D/O ;
   8667     LOFF := 1 ;
   8668     CE := 'CEL' ;
   8669     PPOL(1) := -V/(2*O/D*C) ;
   8670     PPOL(2) := O*L/2/D ;
   8671     PPOL(3) := O*(C+L/2)/D ;
   8672     DSDED 5*D+C+L/2 0 1E-4*D D 10*D D/O ; %DSDED: 6660
   8673     ENDPROCEDURE ;
   8674   PROCEDURE CEA V D L C ;
   8675     NPOL := 1 ;
   8676     MPOL(1) := -20 ;
   8677     NSDP := 9 ;
   8678     LOFF := 1 ;
   8679     CE := 'CEA' ;
   8680     PPOL(1) := V/(PI*C) ;
   8681     PPOL(2) := L/2 ;
   8682     PPOL(3) := C+L/2 ;
   8683     DSDED 15*D+C+L/2 0 1E-4*D D 10*D D ; %DSDED: 6660
   8684     ENDPROCEDURE ;
   8685   PROCEDURE DC V D L ;
   8686     VARIABLE S1 1 ;
   8687     NPOL := 1 ;
   8688     MPOL(1) := -20 ;
   8689     NSDP := 11 ;
   8690     LOFF := 1 ;
   8691     CE := 'DC' ;
   8692     PPOL(1) := -V/L ;
   8693     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   8694     SDELE 0 L 1E-4*D D 10*D D ; %SDELE: 6576
   8695     UPDATE 1 1 ; %UPDATE: 1261
   8696     ENDPROCEDURE ;
   8697   PROCEDURE RF V N W PHI D ;
   8698     VARIABLE VV NM1 ;
   8699     VARIABLE VV0 100 ;
   8700     VARIABLE PP0 1 ;
   8701     VARIABLE PH 100 ;
   8702     VARIABLE EE0 1 ;
   8703     VARIABLE T NM1 ;
   8704     VARIABLE I 1 ;
   8705     PROCEDURE RFM  M ;
   8706       T := M(5)*(-PP0/EE0/CLIGHT) ;
   8707       VV := POLY(M(1),M(3),V,N)*SIN(W*2*PI*T+PH)*(1+M(8))*.001*Z0 ; %P
                  OLY:  570
   8708       M(2) := M(2)*PP0/CONS(P0) ;
   8709       IF ND>1 ;
   8710         M(4) := M(4)*PP0/CONS(P0) ;
   8711         ENDIF ;
   8712       IF ND>2 ;
   8713         M(5) := T*(-CONS(E0)/CONS(P0))*CLIGHT ;
   8714         M(6) := ( M(6)+(VV-CONS(VV0))/EE0)/(1+CONS(VV0)/EE0) ;
   8715         ENDIF ;
   8716       ENDPROCEDURE ;
   8717     IF LRP#1 ;
   8718       WRITE 6 ' *** ERROR, call RP before RF ' ;
   8719       QUIT 0 ;
   8720       ENDIF ;
   8721     PP0 := CONS(P0) ;
   8722     EE0 := CONS(E0) ;
   8723     PH := PHI*DEGRAD ;
   8724     VV0 := POLY(0,0,V,N)*SIN(PH)*.001*Z0 ; %POLY:  570
   8725     RP E0+VV0 M0 Z0 ; %RP: 6326
   8726     IF CONS(E0)<1E-10 ;
   8727       WRITE 6 ' *** RF TOO HIGH ' ;
   8728       QUIT 0 ;
   8729       ENDIF ;
   8730     RFM MAP ; %RFM: 8705
   8731     IF NRAY#0 ;
   8732       UMS ; %UMS: 1469
   8733       RFM MSC ; %RFM: 8705
   8734       ENDIF ;
   8735     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   8736     DR := D ;
   8737     CE := 'RF' ;
   8738     UPDATE 0 1 ; %UPDATE: 1261
   8739     ENDPROCEDURE ;
   8740   PROCEDURE GLASS IS0 P1 IS1 P2 IS2 N D AA ;
   8741     VARIABLE X NM1 ;
   8742     VARIABLE A NM1 ;
   8743     VARIABLE Y NM1 ;
   8744     VARIABLE B NM1 ;
   8745     VARIABLE TANA NM1 ;
   8746     VARIABLE TANB NM1 ;
   8747     VARIABLE L NM1 ;
   8748     VARIABLE NOM 1 ;
   8749     VARIABLE XL 1 ;
   8750     VARIABLE ZL 1 ;
   8751     VARIABLE PL 1 ;
   8752     PROCEDURE TRANS1 A B TANA TANB ;
   8753       VARIABLE SCR NM1 ;
   8754       SCR := ISRT(1-A*A-B*B) ;
   8755       TANA := A*SCR ;
   8756       TANB := B*SCR ;
   8757       ENDPROCEDURE ;
   8758     PROCEDURE TRANS2 TANA TANB A B ;
   8759       VARIABLE SCR NM1 ;
   8760       SCR := ISRT(1+TANA*TANA+TANB*TANB) ;
   8761       A := TANA*SCR ;
   8762       B := TANB*SCR ;
   8763       ENDPROCEDURE ;
   8764     PROCEDURE LL X TANA Y TANB P L IS ;
   8765       VARIABLE C1 NM1 ;
   8766       VARIABLE C2 NM1 ;
   8767       VARIABLE C3 NM1 ;
   8768       VARIABLE L1 NM1 ;
   8769       VARIABLE L2 NM1 ;
   8770       VARIABLE CS NM1 ;
   8771       VARIABLE Z1 NM1 ;
   8772       IF IS=0 ;
   8773         C1 := 1+TANA*TANA+TANB*TANB ;
   8774         C2 := TANA*X+TANB*Y-P ;
   8775         C3 := X*X+Y*Y ;
   8776         CS := C2*C2-C1*C3 ;
   8777         IF CONS(C2)*P>0 ;
   8778           WRITE 6 ' @@@ COSY CODE ERROR in GLASS, contact programer' ;

   8779           ENDIF ;
   8780         IF CONS(CS)<0 ;
   8781           WRITE 6 ' *** RAY CANNOT TOUCH THE LENS ' ;
   8782           ENDIF ;
   8783         L1 := (-C2-SQRT(CS))/C1 ;
   8784         L2 := (-C2+SQRT(CS))/C1 ;
   8785         L  := L1 ;
   8786         IF ABS(CONS(L1))>ABS(CONS(L2)) ;
   8787           L := L2 ;
   8788           ENDIF ;
   8789         X := X+TANA*L ;
   8790         Y := Y+TANB*L ;
   8791         ELSEIF IS>0 ;
   8792         Z1 := 0 ;
   8793         L := POLY(X,Y,P,IS) ; %POLY:  570
   8794         WHILE ABS(L-Z1)>1E-13 ;
   8795           X := X+TANA*(L-Z1) ;
   8796           Y := Y+TANB*(L-Z1) ;
   8797           Z1 := L ;
   8798           L := POLY(X,Y,P,IS) ; %POLY:  570
   8799           ENDWHILE ;
   8800         ENDIF ;
   8801       ENDPROCEDURE ;
   8802     PROCEDURE ANG X TANA Y TANB N P L IS IS0 ;
   8803       VARIABLE CA1 NM1 ;
   8804       VARIABLE CA2 NM1 ;
   8805       VARIABLE CA3 NM1 ;
   8806       VARIABLE CB1 NM1 ;
   8807       VARIABLE CB2 NM1 ;
   8808       VARIABLE CB3 NM1 ;
   8809       VARIABLE CC1 NM1 ;
   8810       VARIABLE CC2 NM1 ;
   8811       VARIABLE CC3 NM1 ;
   8812       VARIABLE C1 NM1 ;
   8813       VARIABLE C2 NM1 ;
   8814       VARIABLE CD NM1 ;
   8815       VARIABLE S1 NM1 ;
   8816       VARIABLE S2 NM1 ;
   8817       VARIABLE S3 NM1 ;
   8818       VARIABLE S4 NM1 ;
   8819       VARIABLE I 1 ;
   8820       VARIABLE J 1 ;
   8821       VARIABLE P0 1 IS IS ;
   8822       IF IS=0 ;
   8823         CA1 := X/ABS(P) ;
   8824         CB1 := Y/ABS(P) ;
   8825         CC1 := (L-P)/ABS(P) ;
   8826         ELSEIF IS>0 ;
   8827         LOOP I 1 IS ;
   8828           LOOP J 1 IS ;
   8829             P0(I,J) := P(I+1,J)*I ;
   8830             ENDLOOP ;
   8831           ENDLOOP ;
   8832         CA1 := POLY(X,Y,P0,IS-1) ; %POLY:  570
   8833         LOOP I 1 IS ;
   8834           LOOP J 1 IS ;
   8835             P0(I,J) := P(I,J+1)*J ;
   8836             ENDLOOP ;
   8837           ENDLOOP ;
   8838         CB1 := POLY(X,Y,P0,IS-1) ; %POLY:  570
   8839         C1 := ISRT(CA1*CA1+CB1*CB1+1) ;
   8840         CC1 := -1*C1 ;
   8841         CA1 := CA1*C1 ;
   8842         CB1 := CB1*C1 ;
   8843         ENDIF ;
   8844       CC2 := ISRT(TANA*TANA+TANB*TANB+1) ;
   8845       CA2 := TANA*CC2 ;
   8846       CB2 := TANB*CC2 ;
   8847       S1 := CC1*CB2-CC2*CB1 ;
   8848       S2 := CC1*CA2-CC2*CA1 ;
   8849       C1 := (S1*CB1+S2*CA1)/N ;
   8850       C2 := (S1*S1+S2*S2)/N/N-CC1*CC1 ;
   8851       CD := C1*C1-C2 ;
   8852       IF CONS(CD)<0 ;
   8853         WRITE 6 ' *** TOT REFLECTION' ;
   8854         ENDIF ;
   8855       CC3 := -C1+SQRT(CD) ;
   8856       CB3 := (S1/N+CB1*CC3)/CC1 ;
   8857       CA3 := (S2/N+CA1*CC3)/CC1 ;
   8858       S3 := CA2*CA3+CB2*CB3+CC2*CC3 ;
   8859       TANA := CA3/CC3 ;
   8860       TANB := CB3/CC3 ;
   8861       CC3 := -C1-SQRT(CD) ;
   8862       CB3 := (S1/N+CB1*CC3)/CC1 ;
   8863       CA3 := (S2/N+CA1*CC3)/CC1 ;
   8864       S4 := CA2*CA3+CB2*CB3+CC2*CC3 ;
   8865       CA3 := CA3/CC3 ;
   8866       CB3 := CB3/CC3 ;
   8867       IF IS0<0 ;
   8868         IF CONS(S3)>CONS(S4) ;
   8869           TANA := CA3 ;
   8870           TANB := CB3 ;
   8871           ENDIF ;
   8872         ENDIF ;
   8873       IF IS0>0 ;
   8874         IF CONS(S3)<CONS(S4) ;
   8875           TANA := CA3 ;
   8876           TANB := CB3 ;
   8877           ENDIF ;
   8878         ENDIF ;
   8879       ENDPROCEDURE ;
   8880     NOM := NOC ;
   8881     IF IS1+IS2>0 ;
   8882       CO NOM+1 ; %CO:  965
   8883       ENDIF ;
   8884     X := AA(1) ;
   8885     A := AA(2) ;
   8886     Y := AA(3) ;
   8887     B := AA(4) ;
   8888     TRANS1 A B TANA TANB ; %TRANS1: 8752
   8889     LL X TANA Y TANB P1 L IS1 ; %LL: 8764
   8890     ANG X TANA Y TANB N P1 L IS1 IS0 ; %ANG: 8802
   8891     IF IS0>0 ;
   8892       X := X+TANA*(D-L) ;
   8893       Y := Y+TANB*(D-L) ;
   8894       LL X TANA Y TANB P2 L IS2 ; %LL: 8764
   8895       ANG X TANA Y TANB 1/N P2 L IS2 IS0 ; %ANG: 8802
   8896       PL := ATAN(CONS(TANA)) ;
   8897       ZL := CONS(L) ;
   8898       XL := CONS(X) ;
   8899       X := (X-XL)-TANA*(L-ZL) ;
   8900       Y := Y-TANB*(L-ZL) ;
   8901       ELSEIF IS0<0 ;
   8902       TANA := -TANA ;
   8903       TANB := -TANB ;
   8904       X := X+TANA*L ;
   8905       Y := Y+TANB*L ;
   8906       PL := ATAN(CONS(TANA)) ;
   8907       ZL := CONS(L) ;
   8908       ENDIF ;
   8909     TRANS2 TANA TANB A B ; %TRANS2: 8758
   8910     TANB := B*ISRT(1-SQR(B))/COS(ATAN(TANA)-PL) ;
   8911     A := SQRT(1-SQR(B))*SIN(ATAN(TANA)-PL) ;
   8912     Y := Y-X*SIN(PL)*TANB ;
   8913     X := X*(COS(PL)-SIN(PL)*TAN(ATAN(TANA)-PL)) ;
   8914     AA(1) := X ;
   8915     AA(2) := A ;
   8916     AA(3) := Y ;
   8917     AA(4) := B ;
   8918     CO NOM ; %CO:  965
   8919     ENDPROCEDURE ;
   8920   PROCEDURE GLS R1 R2 N L D ;
   8921     VARIABLE I 1 ;
   8922     GLASS 1 R1 0 R2 0 N L MAP ; %GLASS: 8740
   8923     IF NRAY#0 ;
   8924       UMS ; %UMS: 1469
   8925       GLASS 1 R1 0 R2 0 N L MSC ; %GLASS: 8740
   8926       ENDIF ;
   8927     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   8928     DR := D ;
   8929     CE := 'GLS' ;
   8930     UPDATE 0 1 ; %UPDATE: 1261
   8931     ENDPROCEDURE ;
   8932   PROCEDURE GL  P1 I1 P2 I2 N L D ;
   8933     VARIABLE I 1 ;
   8934     GLASS 1 P1 I1 P2 I2 N L MAP ; %GLASS: 8740
   8935     IF NRAY#0 ;
   8936       UMS ; %UMS: 1469
   8937       GLASS 1 P1 I1 P2 I2 N L MSC ; %GLASS: 8740
   8938       ENDIF ;
   8939     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   8940     DR := D ;
   8941     CE := 'GL' ;
   8942     UPDATE 0 1 ; %UPDATE: 1261
   8943     ENDPROCEDURE ;
   8944   PROCEDURE GP PHI1 PHI2 N L D ;
   8945     VARIABLE P 1 2 2 ;
   8946     VARIABLE Q 1 2 2 ;
   8947     VARIABLE I 1 ;
   8948     VARIABLE J 1 ;
   8949     LOOP I 1 2 ;
   8950       LOOP J 1 2 ;
   8951         P(I,J) := 0 ;
   8952         Q(I,J) := 0 ;
   8953         ENDLOOP ;
   8954       ENDLOOP ;
   8955     P(2,1) := TAN(PHI1*DEGRAD) ;
   8956     Q(2,1) := TAN(PHI2*DEGRAD) ;
   8957     GLASS 2 P 1 Q 1 N L MAP ; %GLASS: 8740
   8958     IF NRAY#0 ;
   8959       UMS ; %UMS: 1469
   8960       GLASS 2 P 1 Q 1 N L MSC ; %GLASS: 8740
   8961       ENDIF ;
   8962     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   8963     DR := D ;
   8964     CE := 'GP' ;
   8965     UPDATE 0 1 ; %UPDATE: 1261
   8966     ENDPROCEDURE ;
   8967   PROCEDURE GMS R D ;
   8968     VARIABLE I 1 ;
   8969     GLASS -1 R 0 0 0 1 0 MAP ; %GLASS: 8740
   8970     IF NRAY#0 ;
   8971       UMS ; %UMS: 1469
   8972       GLASS -1 R 0 0 0 1 0 MSC ; %GLASS: 8740
   8973       ENDIF ;
   8974     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   8975     DR := D ;
   8976     CE := 'GMS' ;
   8977     UPDATE 0 1 ; %UPDATE: 1261
   8978     ENDPROCEDURE ;
   8979   PROCEDURE GMP R D ;
   8980     VARIABLE P 1 3 3 ;
   8981     VARIABLE I 1 ;
   8982     VARIABLE J 1 ;
   8983     LOOP I 1 3 ;
   8984       LOOP J 1 3 ;
   8985         P(I,J) := 0 ;
   8986         ENDLOOP ;
   8987       ENDLOOP ;
   8988     P(3,1) := .5/R ;
   8989     P(1,3) := .5/R ;
   8990     GLASS -1 P 2 0 0 1 0 MAP ; %GLASS: 8740
   8991     IF NRAY#0 ;
   8992       UMS ; %UMS: 1469
   8993       GLASS -1 P 2 0 0 1 0 MSC ; %GLASS: 8740
   8994       ENDIF ;
   8995     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   8996     DR := D ;
   8997     CE := 'GMP' ;
   8998     UPDATE 0 1 ; %UPDATE: 1261
   8999     ENDPROCEDURE ;
   9000   PROCEDURE GMF PHI D ;
   9001     VARIABLE P 1 2 2 ;
   9002     VARIABLE I 1 ;
   9003     VARIABLE J 1 ;
   9004     LOOP I 1 2 ;
   9005       LOOP J 1 2 ;
   9006         P(I,J) := 0 ;
   9007         ENDLOOP ;
   9008       ENDLOOP ;
   9009     P(2,1) := TAN((90-PHI)*DEGRAD) ;
   9010     GLASS -1 P 1 0 0 1 0 MAP ; %GLASS: 8740
   9011     IF NRAY#0 ;
   9012       UMS ; %UMS: 1469
   9013       GLASS -1 P 1 0 0 1 0 MSC ; %GLASS: 8740
   9014       ENDIF ;
   9015     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9016     DR := D ;
   9017     CE := 'GMF' ;
   9018     UPDATE 0 1 ; %UPDATE: 1261
   9019     ENDPROCEDURE ;
   9020   PROCEDURE GM  P N D ;
   9021     VARIABLE I 1 ;
   9022     GLASS -1 P N 0 0 1 0 MAP ; %GLASS: 8740
   9023     IF NRAY#0 ;
   9024       UMS ; %UMS: 1469
   9025       GLASS -1 P N 0 0 1 0 MSC ; %GLASS: 8740
   9026       ENDIF ;
   9027     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9028     DR := D ;
   9029     CE := 'GM' ;
   9030     UPDATE 0 1 ; %UPDATE: 1261
   9031     ENDPROCEDURE ;
   9032   PROCEDURE SA DX DY ;
   9033     UMS ; %UMS: 1469
   9034     MSC(1) := MSC(1) - DX ;
   9035     MSC(3) := MSC(3) - DY ;
   9036     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9037     DR := 0 ;
   9038     CE := 'SA' ;
   9039     UPDATE 1 1 ; %UPDATE: 1261
   9040     ENDPROCEDURE ;
   9041   PROCEDURE TA AX AY ;
   9042     VARIABLE PF NM1 ;
   9043     VARIABLE A NM1 ;
   9044     VARIABLE AXR 1 ;
   9045     VARIABLE AYR 1 ;
   9046     VARIABLE SCR NM1 ;
   9047     PROCEDURE TAX M ;
   9048       A := ATAN(M(2)*ISRT(PF-SQR(M(2))-SQR(M(4)))) ;
   9049       SCR := -SIN(AXR)/COS(A-AXR)*ISRT(PF-SQR(M(4)))*M(1) ;
   9050       M(3) := M(3)+M(4)*SCR ;
   9051       IF ND>2 ;
   9052         M(5) := M(5)-SCR*(P0/CONS(P0))*(TFAC/V0) ;
   9053         ENDIF ;
   9054       M(2) := SQRT(PF-SQR(M(4)))*SIN(A-AXR) ;
   9055       M(1) := M(1)*(COS(AXR)-SIN(AXR)*TAN(A-AXR)) ;
   9056       ENDPROCEDURE ;
   9057     PROCEDURE TAY M ;
   9058       A := ATAN(M(4)*ISRT(PF-SQR(M(2))-SQR(M(4)))) ;
   9059       SCR := -SIN(AYR)/COS(A-AYR)*ISRT(PF-SQR(M(2)))*M(3) ;
   9060       M(1) := M(1)+M(2)*SCR ;
   9061       IF ND>2 ;
   9062         M(5) := M(5)-SCR*(P0/CONS(P0))*(TFAC/V0) ;
   9063         ENDIF ;
   9064       M(4) := SQRT(PF-SQR(M(2)))*SIN(A-AYR) ;
   9065       M(3) := M(3)*(COS(AYR)-SIN(AYR)*TAN(A-AYR)) ;
   9066       ENDPROCEDURE ;
   9067     AXR := AX*DEGRAD ;
   9068     AYR := AY*DEGRAD ;
   9069     PF := SQR(P0/CONS(P0)) ;
   9070     TAX MAP ; %TAX: 9047
   9071     TAY MAP ; %TAY: 9057
   9072     IF NRAY#0 ;
   9073       UMS ; %UMS: 1469
   9074       TAX MSC ; %TAX: 9047
   9075       TAY MSC ; %TAY: 9057
   9076       ENDIF ;
   9077     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9078     DR := 0 ;
   9079     CE := 'TA' ;
   9080     UPDATE 0 1 ; %UPDATE: 1261
   9081     ENDPROCEDURE ;
   9082   PROCEDURE RA PHI ;
   9083     VARIABLE ANG NM2 ;
   9084     IF LPG#0 ;
   9085       WRITE 6 ' --- WARNING in RA, PTY # 0' ;
   9086       ENDIF ;
   9087     ANG := PHI*DEGRAD ;
   9088     UMS ; %UMS: 1469
   9089     MSC(1) :=  COS(ANG)*DD(1) + SIN(ANG)*DD(3) ;
   9090     MSC(3) := -SIN(ANG)*DD(1) + COS(ANG)*DD(3) ;
   9091     MSC(2) :=  COS(ANG)*DD(2) + SIN(ANG)*DD(4) ;
   9092     MSC(4) := -SIN(ANG)*DD(2) + COS(ANG)*DD(4) ;
   9093     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9094     LOCTRA 0 0 0 0 0 ANG LTRA ; %LOCTRA: 1082
   9095     DR := 0 ;
   9096     CE := 'RA' ;
   9097     UPDATE 1 1 ; %UPDATE: 1261
   9098     ENDPROCEDURE ;
   9099   PROCEDURE RSX PHI ;
   9100     VARIABLE I 1 ;
   9101     VARIABLE J 1 ;
   9102     VARIABLE ANG NM2;
   9103     ANG := PHI*DEGRAD;
   9104     UMS ; %UMS: 1469
   9105     LOOP I 1 3 ;
   9106       LOOP J 1 3 ;
   9107         SSCR(I,J) := 0*DD(1) ;
   9108         ENDLOOP ;
   9109       ENDLOOP ;
   9110     SSCR(1,1) := 1 + 0*DD(1) ;
   9111     SSCR(2,2) := COS(ANG) + 0*DD(1) ;
   9112     SSCR(3,2) := -SIN(ANG) + 0*DD(1) ;
   9113     SSCR(2,3) := SIN(ANG) + 0*DD(1) ;
   9114     SSCR(3,3) := COS(ANG) + 0*DD(1) ;
   9115     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9116     CE:='RSX' ;
   9117     DR:=0 ;
   9118     UPDATE 1 1 ; %UPDATE: 1261
   9119     ENDPROCEDURE ;
   9120   PROCEDURE RSY PHI ;
   9121     VARIABLE I 1 ;
   9122     VARIABLE J 1 ;
   9123     VARIABLE ANG NM2;
   9124     ANG := PHI*DEGRAD;
   9125     UMS ; %UMS: 1469
   9126     LOOP I 1 3 ;
   9127       LOOP J 1 3 ;
   9128         SSCR(I,J) := 0*DD(1) ;
   9129         ENDLOOP ;
   9130       ENDLOOP ;
   9131     SSCR(2,2) := 1 + 0*DD(1) ;
   9132     SSCR(1,1) := COS(ANG) + 0*DD(1) ;
   9133     SSCR(3,1) := -SIN(ANG) + 0*DD(1) ;
   9134     SSCR(1,3) := SIN(ANG) + 0*DD(1) ;
   9135     SSCR(3,3) := COS(ANG) + 0*DD(1) ;
   9136     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9137     CE:='RSY' ;
   9138     DR:=0 ;
   9139     UPDATE 1 1 ; %UPDATE: 1261
   9140     ENDPROCEDURE ;
   9141   PROCEDURE RSA PHI ;
   9142     VARIABLE I 1 ;
   9143     VARIABLE J 1 ;
   9144     VARIABLE ANG NM2;
   9145     ANG := PHI*DEGRAD;
   9146     UMS ; %UMS: 1469
   9147     LOOP I 1 3 ;
   9148       LOOP J 1 3 ;
   9149         SSCR(I,J) := 0*DD(1) ;
   9150         ENDLOOP ;
   9151       ENDLOOP ;
   9152     SSCR(3,3) := 1 + 0*DD(1) ;
   9153     SSCR(2,2) := COS(ANG) + 0*DD(1) ;
   9154     SSCR(2,1) :=-SIN(ANG) + 0*DD(1) ;
   9155     SSCR(1,2) := SIN(ANG) + 0*DD(1) ;
   9156     SSCR(1,1) := COS(ANG) + 0*DD(1) ;
   9157     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1114
   9158     CE:='RSA' ;
   9159     DR:=0 ;
   9160     UPDATE 1 1 ; %UPDATE: 1261
   9161     ENDPROCEDURE ;
   9162   PROCEDURE WSM IU L B A ;
   9163     VARIABLE LIN 80 ;
   9164     VARIABLE NAP NM1 NV ;
   9165     VARIABLE C NM1 TWOND ;
   9166     VARIABLE ML NM1 NV ;
   9167     VARIABLE P NM1 ;
   9168     VARIABLE F NM1 ;
   9169     VARIABLE I 10 ;
   9170     VARIABLE J 1 ;
   9171     IF (ND>2)*(NP<1)+(ND<3)*(NP<2) ;
   9172       WRITE 6 ' *** ERROR in WSM, too few parameters' ;
   9173       QUIT 0 ;
   9174       ENDIF ;
   9175     LOOP I 1 NV ;
   9176       NAP(I) := MAP(I) ;
   9177       ENDLOOP ;
   9178     IF ND>2 ;
   9179       EDEP NAP L PARA(1) ; %EDEP: 3530 %PARA: 1044
   9180       ELSEIF ND<3 ;
   9181       EDEP NAP L PARA(2) ; %EDEP: 3530 %PARA: 1044
   9182       LOOP I 1 TWOND ;
   9183         DAPLU NAP(I) TWOND+1 0 F ;
   9184         NAP(I) := F ;
   9185         ENDLOOP ;
   9186       ENDIF ;
   9187     I := '(E23.16)' ;
   9188     LIN := '     OV'&SF(NOC,'(I3)')&SF(ND,'(I3)')      &SF(NP,'(I3)')&
                  ' ;' ; %SF:  285 %SF:  285 %SF:  285
   9189     WRITE IU LIN ;
   9190     LIN := '     RP'&SF(CONS(E0),I)      &SF(CONS(M0),I)&SF(CONS(Z0),I
                  )&' ;' ; %SF:  285 %SF:  285 %SF:  285
   9191     WRITE IU LIN ;
   9192     LIN := '     UM ; FR'      &SF(LFR,'(I3)')&' ; ESET'&SF(EPS,I)&' ;
                   WSET'&SF(WAF,I)&' ;' ; %SF:  285 %SF:  285 %SF:  285
   9193     WRITE IU LIN ;
   9194     LIN := '     CE'&SF(L,I)&SF(B,I)&SF(A,I)&' ;' ; %SF:  285 %SF:  28
                  5 %SF:  285
   9195     WRITE IU LIN ;
   9196     WRITE IU '  ' ;
   9197     MLF NAP C ML P -1 ; %MLF: 3117
   9198     I := -1 ;
   9199     MGF ML F I J ; %MGF: 3353
   9200     IF J#0 ;
   9201       WRITE 6 ' *** ERROR in WSM, no gen. f.' ;
   9202       QUIT 0 ;
   9203       ENDIF ;
   9204     LIN := '     GENERATING FUNCTION OF TYPE  '&SF(I,'(I2)') ; %SF:  2
                  85
   9205     WRITE IU LIN ;
   9206     LIN := '     LIE EXPONENT        OF TYPE  '&SF(-1,'(I2)') ; %SF:  
                  285
   9207     WRITE IU LIN ;
   9208     WRITE IU '  ' ;
   9209     CO NOC+1 ; %CO:  965
   9210     IF ND=3 ;
   9211       J := TWOND+1 ;
   9212       ELSEIF ND<3 ;
   9213       J := TWOND+2 ;
   9214       ENDIF ;
   9215     LOOP I 0 NOC ;
   9216       DAPEW IU F J I ;
   9217       DAPEW IU P J I ;
   9218       ENDLOOP ;
   9219     CO NOC-1 ; %CO:  965
   9220     ENDPROCEDURE ;
   9221   PROCEDURE CRSYSCA ;
   9222     WRITE 6 ' This is going to take very long, do you really want to d
                  o this?'             ' If you only need the fringe fields of
                   selected multipoles, it'             ' would be faster to c
                  ompute and store them separately in a'             ' referen
                  ce file using WSM and RSM.' ;
   9223     OPENF 99 'SYSCA.DAT' 'NEW' ;
   9224     OV  5  3  1 ; %OV:  969
   9225     RP 400 16 3 ; %RP: 6326
   9226     UM ; %UM: 1488
   9227     FR -1 ; %FR: 5434
   9228     ESET 1E-12 ; %ESET:  700
   9229     WSET 1 ; %WSET:  697
   9230     DI 2 30 .0254 0 0 0 0 ; %DI: 7796
   9231     WSM 99 0 (CONS(P0/Z0)/CLIGHT*1E6/2) .0254 ; %WSM: 9162
   9232     UM ; %UM: 1488
   9233     FR -2 ; %FR: 5434
   9234     ESET 1E-12 ; %ESET:  700
   9235     WSET 1 ; %WSET:  697
   9236     DI 2 30 .0254 0 0 0 0 ; %DI: 7796
   9237     WSM 99 0 (CONS(P0/Z0)/CLIGHT*1E6/2) .0254 ; %WSM: 9162
   9238     OV  6  3  1 ; %OV:  969
   9239     RP 400 16 3 ; %RP: 6326
   9240     UM ; %UM: 1488
   9241     FR -1 ; %FR: 5434
   9242     ESET 1E-12 ; %ESET:  700
   9243     WSET 1 ; %WSET:  697
   9244     MQ 0 1 .0254 ; %MQ: 7076
   9245     WSM 99 0 1 .0254 ; %WSM: 9162
   9246     UM ; %UM: 1488
   9247     FR -2 ; %FR: 5434
   9248     ESET 1E-12 ; %ESET:  700
   9249     WSET 1 ; %WSET:  697
   9250     MQ 0 1 .0254 ; %MQ: 7076
   9251     WSM 99 0 1 .0254 ; %WSM: 9162
   9252     OV  6  3  1 ; %OV:  969
   9253     RP 400 16 3 ; %RP: 6326
   9254     UM ; %UM: 1488
   9255     FR -1 ; %FR: 5434
   9256     ESET 1E-12 ; %ESET:  700
   9257     WSET 1 ; %WSET:  697
   9258     MH 0 .5 .0254 ; %MH: 7153
   9259     WSM 99 0 .5 .0254 ; %WSM: 9162
   9260     UM ; %UM: 1488
   9261     FR -2 ; %FR: 5434
   9262     ESET 1E-12 ; %ESET:  700
   9263     WSET 1 ; %WSET:  697
   9264     MH 0 .5 .0254 ; %MH: 7153
   9265     WSM 99 0 .5 .0254 ; %WSM: 9162
   9266     OV  6  3  1 ; %OV:  969
   9267     RP 400 16 3 ; %RP: 6326
   9268     UM ; %UM: 1488
   9269     FR -1 ; %FR: 5434
   9270     ESET 1E-12 ; %ESET:  700
   9271     WSET 1 ; %WSET:  697
   9272     MO 0 .25 .0254 ; %MO: 7198
   9273     WSM 99 0 .25 .0254 ; %WSM: 9162
   9274     UM ; %UM: 1488
   9275     FR -2 ; %FR: 5434
   9276     ESET 1E-12 ; %ESET:  700
   9277     WSET 1 ; %WSET:  697
   9278     MO 0 .25 .0254 ; %MO: 7198
   9279     WSM 99 0 .25 .0254 ; %WSM: 9162
   9280     OV  6  3  1 ; %OV:  969
   9281     RP 400 16 3 ; %RP: 6326
   9282     UM ; %UM: 1488
   9283     FR -1 ; %FR: 5434
   9284     ESET 1E-12 ; %ESET:  700
   9285     WSET 1 ; %WSET:  697
   9286     MD 0 .125 .0254 ; %MD: 7205
   9287     WSM 99 0 .125 .0254 ; %WSM: 9162
   9288     UM ; %UM: 1488
   9289     FR -2 ; %FR: 5434
   9290     ESET 1E-12 ; %ESET:  700
   9291     WSET 1 ; %WSET:  697
   9292     MD 0 .125 .0254 ; %MD: 7205
   9293     WSM 99 0 .125 .0254 ; %WSM: 9162
   9294     OV  6  3  1 ; %OV:  969
   9295     RP 400 16 3 ; %RP: 6326
   9296     UM ; %UM: 1488
   9297     FR -1 ; %FR: 5434
   9298     ESET 1E-12 ; %ESET:  700
   9299     WSET 1 ; %WSET:  697
   9300     MZ 0 .25 .0254 ; %MZ: 7212
   9301     WSM 99 0 .25 .0254 ; %WSM: 9162
   9302     UM ; %UM: 1488
   9303     FR -2 ; %FR: 5434
   9304     ESET 1E-12 ; %ESET:  700
   9305     WSET 1 ; %WSET:  697
   9306     MZ 0 .25 .0254 ; %MZ: 7212
   9307     WSM 99 0 .25 .0254 ; %WSM: 9162
   9308     CLOSEF 99 ;
   9309     ENDPROCEDURE ;
   9310   PROCEDURE MAKEINV A E INV ;
   9311     VARIABLE I 1 ;
   9312     CO NOC+1 ; %CO:  965
   9313     INV := 0 ;
   9314     LOOP I 1 ND ;
   9315       INV := INV + (SQR(A(2*I-1))+SQR(A(2*I)))/E(I) ;
   9316       ENDLOOP ;
   9317     CO NOC-1 ; %CO:  965
   9318     ENDPROCEDURE ;
   9319   PROCEDURE WL SS1 SS2 N S1 S2 LF ;
   9320     VARIABLE FLOW NM1 MAX(8,NV) ; %MAX:  204
   9321     VARIABLE ARG NM1 NV ;
   9322     VARIABLE RES NM1 NV ;
   9323     VARIABLE CSTR NM1 1 ;
   9324     VARIABLE FNL NM1 2 3 ;
   9325     VARIABLE SCR NM1 ;
   9326     VARIABLE L 1 2 ;
   9327     VARIABLE I 1 ;
   9328     VARIABLE J 1 ;
   9329     VARIABLE IER 1 ;
   9330     IF LWA#1 ;
   9331       WRITE 6 ' *** ERROR in WL, call WAS 1 before OV' ;
   9332       QUIT 0 ;
   9333       ELSEIF LRP=0 ;
   9334       WRITE 6 ' *** ERROR, call RP before WL' ;
   9335       QUIT 0 ;
   9336       ELSEIF (SS1(1,1)#0)+(SS2(1,1)#0) ;
   9337       WRITE 6         ' *** ERROR in WL, SS1(1,1) and SS2(1,1) must be
                   0' ;
   9338       QUIT 0 ;
   9339       ELSEIF ABS(S2-S1)<1.D-12 ;
   9340       WRITE 6         ' *** ERROR in WL, S2-S1 must be non zero' ;
   9341       QUIT 0 ;
   9342       ENDIF ;
   9343     CO NO+1 ; %CO:  965
   9344     IF LCO=0 ;
   9345       LOOP I 1 8 ;
   9346         FLOW(I) := XX(I)+0*DD(1) ;
   9347         ENDLOOP ;
   9348       DLACT FLOW DD(NV) ; %DLACT: 6541
   9349       ELSEIF LCO=1 ;
   9350       LOOP I 1 8 ;
   9351         FLOW(I) := XX(I)+0*DD(1) ;
   9352         ENDLOOP ;
   9353       FLOW(1) := FLOW(1)+FLOW(2)*DD(NV) ;
   9354       FLOW(3) := FLOW(3)+FLOW(4)*DD(NV) ;
   9355       ENDIF ;
   9356     LOOP I MIN(9,NV) NV ; %MIN:  207
   9357       FLOW(I) := DD(I) ;
   9358       ENDLOOP ;
   9359     LOOP I 1 NV-1 ;
   9360       ARG(I) := DD(I) ;
   9361       ENDLOOP ;
   9362     L(1) := S1 ;
   9363     L(2) := S2 ;
   9364     LOOP J 1 2 ;
   9365       ARG(NV) := DD(NV)+L(J) ;
   9366       POLVAL 1 FLOW NV ARG NV RES NV ;
   9367       IF     J=1 ;
   9368         CSTR(1) :=  POLY(DD(1),DD(3),SS1,N) ; %POLY:  570
   9369         ELSEIF J=2 ;
   9370         CSTR(1) := -POLY(DD(1),DD(3),SS2,N) ; %POLY:  570
   9371         ENDIF ;
   9372       CSTR(1) := CSTR(1)-DD(NV)+L(J) ;
   9373       POLVAL 1 CSTR 1 RES NV CSTR 1 ;
   9374       ARG(NV) := CSTR(1) ;
   9375       MI ARG RES NV IER NOC NV NM1 ; %MI:  430
   9376       IF IER#0 ;
   9377         WRITE 6 ' *** ERROR in WL, inversion failed' ;
   9378         QUIT 0 ;
   9379         ENDIF ;
   9380       DAPLU RES(NV) NV 0 SCR ;
   9381       ARG(NV) := SCR+L(J) ;
   9382       RES(1) := FLOW(1) ;
   9383       RES(2) := FLOW(3) ;
   9384       RES(3) := FLOW(NV) ;
   9385       POLVAL 1 RES 3 ARG NV RES 3 ;
   9386       LOOP I 1 3 ;
   9387         FNL(J,I) := RES(I) ;
   9388         ENDLOOP ;
   9389       ENDLOOP ;
   9390     CO NO ; %CO:  965
   9391     LF := 0 ;
   9392     LOOP I 1 3 ;
   9393       LF := LF+SQR(FNL(2,I)-FNL(1,I)) ;
   9394       ENDLOOP ;
   9395     LF := SQRT(LF) ;
   9396     ENDPROCEDURE ;
   9397   PROCEDURE BBC Z A RHO I DELTA C ;
   9398     BETHEBLOCHC(1) := Z ;
   9399     BETHEBLOCHC(2) := A ;
   9400     BETHEBLOCHC(3) := RHO ;
   9401     BETHEBLOCHC(4) := I ;
   9402     BETHEBLOCHC(5) := DELTA ;
   9403     BETHEBLOCHC(6) := C ;
   9404     ENDPROCEDURE ;
   9405   FUNCTION BETHEBLOCH ETOT ;
   9406     VARIABLE BETA NM1 ;
   9407     VARIABLE GAMMA NM1 ;
   9408     VARIABLE MECC 1 ;
   9409     VARIABLE MEM0 NM1 ;
   9410     VARIABLE TMAXN NM1 ;
   9411     VARIABLE TMAXD NM1 ;
   9412     GAMMA := ETOT/(M0*AMUMEV) ;
   9413     IF CONS(GAMMA)<1 ;
   9414       WRITE 6         ' *** ERROR in BETHEBLOCH, kinetic energy lost t
                  o negative' ;
   9415       QUIT 0 ;
   9416       ENDIF ;
   9417     BETA := SQRT((GAMMA+1)*(GAMMA-1))/GAMMA ;
   9418     MECC := 0.510998918 ;
   9419     MEM0 := MECC/(M0*AMUMEV) ;
   9420     TMAXD := 1+2*GAMMA*MEM0+SQR(MEM0) ;
   9421     TMAXN := 2*MECC*(GAMMA+1)*(GAMMA-1) ;
   9422     BETHEBLOCH := -15.35375*BETHEBLOCHC(1)/BETHEBLOCHC(2)*BETHEBLOCHC(
                  3)         *SQR(Z0/BETA) * ( LOG(SQR(TMAXN/BETHEBLOCHC(4))/T
                  MAXD)-2*SQR(BETA)         -BETHEBLOCHC(5)-2*BETHEBLOCHC(6)/B
                  ETHEBLOCHC(1) ) ;
   9423     ENDFUNCTION ;
   9424   PROCEDURE EODE Y S YP ;
   9425     YP(1) := BETHEBLOCH(Y(1)) ; %BETHEBLOCH: 9405
   9426     YP(2) := ISRT(1-SQR(M0*AMUMEV/Y(1))) ;
   9427     ENDPROCEDURE ;
   9428   PROCEDURE RK4 N X0 X1 Y0 NS Z Y1 ;
   9429     VARIABLE H 1 ;
   9430     VARIABLE HH 1 4 ;
   9431     VARIABLE X 1 ;
   9432     VARIABLE Y NM1 N ;
   9433     VARIABLE YP NM1 N ;
   9434     VARIABLE I 1 ;
   9435     VARIABLE J 1 ;
   9436     VARIABLE K 1 ;
   9437     LOOP J 1 N ;
   9438       Y1(J) := Y0(J) ;
   9439       ENDLOOP ;
   9440     X := X0 ;
   9441     H := (X1-X0)/NS ;
   9442     HH(1) := 0 ;
   9443     HH(2) := 0.5*H ;
   9444     HH(3) := 0.5*H ;
   9445     HH(4) := H ;
   9446     LOOP I 1 NS ;
   9447       EODE Y1 X+HH(1) YP ; %EODE: 9424
   9448       LOOP J 1 N ;
   9449         Z(J,1) := YP(J) ;
   9450         ENDLOOP ;
   9451       LOOP K 2 4 ;
   9452         LOOP J 1 N ;
   9453           Y(J) := Y1(J)+HH(K)*Z(J,K-1) ;
   9454           ENDLOOP ;
   9455         EODE Y X+HH(K) YP ; %EODE: 9424
   9456         LOOP J 1 N ;
   9457           Z(J,K) := YP(J) ;
   9458           ENDLOOP ;
   9459         ENDLOOP ;
   9460       LOOP J 1 N ;
   9461         Y1(J) := Y1(J)+H/6*(Z(J,1)+2*Z(J,2)+2*Z(J,3)+Z(J,4)) ;
   9462         ENDLOOP ;
   9463       X := X+H ;
   9464       ENDLOOP ;
   9465     ENDPROCEDURE ;
   9466   PROCEDURE EL EI TI L EF TF ;
   9467     VARIABLE Y0 NM1 2 ;
   9468     VARIABLE Y NM1 2 ;
   9469     VARIABLE YP NM1 2 ;
   9470     VARIABLE Z NM1 2 4 ;
   9471     VARIABLE SCR NM1 ;
   9472     VARIABLE I 1 ;
   9473     VARIABLE J 1 ;
   9474     IF LWA#1 ;
   9475       WRITE 6 ' *** ERROR in EL, call WAS 1 before OV' ;
   9476       QUIT 0 ;
   9477       ELSEIF LRP=0 ;
   9478       WRITE 6 ' *** ERROR, call RP before EL' ;
   9479       QUIT 0 ;
   9480       ELSEIF (BETHEBLOCHC(1)*BETHEBLOCHC(2)*BETHEBLOCHC(4))=0 ;
   9481       WRITE 6 ' *** ERROR, call BBC properly before EL' ;
   9482       QUIT 0 ;
   9483       ENDIF ;
   9484     Y0(1) := EI+M0*AMUMEV ;
   9485     Y0(2) := TI ;
   9486     RK4 2 0 L Y0 10 Z Y ; %RK4: 9428
   9487     LOOP J 1 2 ;
   9488       Y0(J) := Y(J) ;
   9489       ENDLOOP ;
   9490     LOOP I 1 NO+1 ;
   9491       EODE Y L YP ; %EODE: 9424
   9492       LOOP J 1 2 ;
   9493         DAINT NV YP(J) SCR ;
   9494         Y(J) := Y0(J)+SCR ;
   9495         ENDLOOP ;
   9496       ENDLOOP ;
   9497     EF := Y(1)-M0*AMUMEV ;
   9498     TF := Y(2) ;
   9499     ENDPROCEDURE ;
   9500   FUNCTION VELC KE ;
   9501     VARIABLE ETA0 NM1 ;
   9502     ETA0 := KE/(M0*AMUMEV) ;
   9503     VELC := SQRT(ETA0*(2+ETA0))/(1+ETA0) ;
   9504     ENDFUNCTION ;
   9505   PROCEDURE COSY2TR MC ;
   9506     VARIABLE I 1 ;
   9507     VARIABLE SCR NM1 ;
   9508     SCR := ISRT( SQR(P0/CONS(P0))-SQR(XX(2))-SQR(XX(4)) ) ;
   9509     LOOP I 1 TWOND ;
   9510       MC(I) := XX(I) ;
   9511       ENDLOOP ;
   9512     LOOP I 2 4 2 ;
   9513       MC(I) := MC(I)*SCR ;
   9514       ENDLOOP ;
   9515     MC(5) := -CONS(P0)/CONS(E0)*MC(5) ;
   9516     ENDPROCEDURE ;
   9517   PROCEDURE WA SS1 SS2 N L D ;
   9518     VARIABLE SS0 1 N+1 N+1 ;
   9519     VARIABLE XX0 NM1 NV ;
   9520     VARIABLE MC NM1 NV ;
   9521     VARIABLE LF NM1 ;
   9522     VARIABLE LF1 NM1 ;
   9523     VARIABLE LF2 NM1 ;
   9524     VARIABLE IER 1 ;
   9525     VARIABLE TF NM1 ;
   9526     VARIABLE EF NM1 ;
   9527     VARIABLE I 1 ;
   9528     VARIABLE J 1 ;
   9529     IF L<1.D-12 ;
   9530       WRITE 6  ' *** ERROR in WA, L must be positive' ;
   9531       QUIT 0 ;
   9532       ELSEIF LUM#1 ;
   9533       WRITE 6  ' *** ERROR, call UM before WA' ;
   9534       QUIT 0 ;
   9535       ELSEIF ND#3 ;
   9536       WRITE 6 (' *** ERROR in WA, '&         'call OV with phase space
                   dimension 3') ;
   9537       QUIT 0 ;
   9538       ENDIF ;
   9539     LOOP I 1 N+1 ;
   9540       LOOP J 1 N+1 ;
   9541         SS0(I,J) := 0 ;
   9542         ENDLOOP ;
   9543       ENDLOOP ;
   9544     LCO := 1 ;
   9545     WL SS1 SS0 MIN(N,NO) 0 0.5*L LF1 ; %WL: 9319 %MIN:  207
   9546     WL SS0 SS2 MIN(N,NO) 0.5*L L LF2 ; %WL: 9319 %MIN:  207
   9547     LCO := 0 ;
   9548     LF := LF1+LF2 ;
   9549     EL E0 DD(5) L EF TF ; %EL: 9466
   9550     MC(1) := TF ;
   9551     MC(2) := EF ;
   9552     LOOP I 1 NV-1 ;
   9553       XX0(I) := DD(I) ;
   9554       ENDLOOP ;
   9555     XX0(NV) := LF-CONS(LF) ;
   9556     POLVAL 1 MC 2 XX0 NV MC 2 ;
   9557     EF := MC(2) ;
   9558     TF := MC(1) ;
   9559     LF := 0.5*L*SQRT(1+SQR(XX(2))+SQR(XX(4))) ;
   9560     TF := TF + (LF-LF1)/VELC(E0) + (LF-LF2)/VELC(EF) ; %VELC: 9500 %VE
                  LC: 9500
   9561     XX0(1) := XX(1)+L*XX(2) ;
   9562     XX0(2) := XX(2) ;
   9563     XX0(3) := XX(3)+L*XX(4) ;
   9564     XX0(4) := XX(4) ;
   9565     XX0(5) := TF-CONS(TF) ;
   9566     XX0(6) := (EF-CONS(EF))/CONS(EF) ;
   9567     LOOP I 7 NV ;
   9568       XX0(I) := DD(I) ;
   9569       ENDLOOP ;
   9570     COSY2TR MC ; %COSY2TR: 9505
   9571     LOOP I 7 NV ;
   9572       MC(I) := DD(I) ;
   9573       ENDLOOP ;
   9574     POLVAL 1 XX0 NV MC NV XX0 NV ;
   9575     RP CONS(EF) M0 Z0 ; %RP: 6326
   9576     COSY2TR MC ; %COSY2TR: 9505
   9577     LOOP I 7 NV ;
   9578       MC(I) := DD(I) ;
   9579       ENDLOOP ;
   9580     MI MC MC NV IER NOC NV NM1 ; %MI:  430
   9581     IF IER#0 ;
   9582       WRITE 6 ' *** ERROR in WA, MI inversion failed' ;
   9583       QUIT 0 ;
   9584       ENDIF ;
   9585     POLVAL 1 MC NV XX0 NV XX0 NV ;
   9586     LOOP I 1 6 ;
   9587       MSC(I) := XX0(I) ;
   9588       ENDLOOP ;
   9589     LOOP I 7 8 ;
   9590       MSC(I) := XX(I) ;
   9591       ENDLOOP ;
   9592     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1114
   9593     DR := D ;
   9594     CE := 'WA' ;
   9595     UPDATE 1 1 ; %UPDATE: 1261
   9596     ENDPROCEDURE ;
   9597   FUNCTION NUMEXP X ;
   9598     VARIABLE ABX 1 ;
   9599     ABX := ABS(X) ;
   9600     IF ABX=0 ;
   9601       NUMEXP := -300 ;
   9602       ELSEIF ABX<1 ;
   9603       NUMEXP := INT(LOG(ABX)/LOG(10))-1 ;
   9604       ELSEIF LO(1) ;
   9605       NUMEXP := INT(LOG(ABX)/LOG(10)) ;
   9606       ENDIF ;
   9607     ENDFUNCTION ;
   9608   FUNCTION TICSINC XDIF ;
   9609     VARIABLE SMP 1 ;
   9610     VARIABLE NX 1 ;
   9611     SMP := ABS(XDIF) ;
   9612     NX := NUMEXP(SMP) ; %NUMEXP: 9597
   9613     IF     SMP<(2*10^NX+0.01*SMP) ;
   9614       TICSINC := 2*10^(NX-1) ;
   9615       ELSEIF SMP<(5*10^NX+0.01*SMP) ;
   9616       TICSINC := 5*10^(NX-1) ;
   9617       ELSEIF LO(1) ;
   9618       TICSINC := 10^NX ;
   9619       ENDIF ;
   9620     ENDFUNCTION ;
   9621   PROCEDURE TICSTR X TIC CHAR DIG ;
   9622     VARIABLE STR 40 ;
   9623     VARIABLE FORM 40 ;
   9624     VARIABLE NX 1 ;
   9625     VARIABLE NTIC 1 ;
   9626     VARIABLE WORD 2 2 ;
   9627     VARIABLE NC 1 ;
   9628     NX := NUMEXP(X) ; %NUMEXP: 9597
   9629     NTIC := NUMEXP(TIC) ; %NUMEXP: 9597
   9630     IF ABS(X)<1.D-300 ;
   9631       STR := '0' ;
   9632       ELSEIF ABS(NX)<5 ;
   9633       IF NOT(NTIC<0) ;
   9634         STR := SI(X) ; %SI:  288
   9635         ELSEIF LO(1) ;
   9636         IF NX<0 ;
   9637           FORM := '(F'&SI(-NTIC+3)&'.'&SI(-NTIC)&')' ; %SI:  288 %SI: 
                   288
   9638           ELSEIF LO(1) ;
   9639           FORM := '(F'&SI(NX-NTIC+3)&'.'&SI(-NTIC)&')' ; %SI:  288 %SI
                  :  288
   9640           ENDIF ;
   9641         STR := SF(X,FORM) ; %SF:  285
   9642         ENDIF ;
   9643       ELSEIF LO(1) ;
   9644       FORM := '(G'&SI(NX-NTIC+8)&'.'&SI(NX-NTIC+1)&')' ; %SI:  288 %SI
                  :  288
   9645       STR := SF(X,FORM) ; %SF:  285
   9646       ENDIF ;
   9647     WORDS STR NC WORD ' ' ; %WORDS:  378
   9648     CHAR := STR|WORD(1) ;
   9649     DIG := LENGTH(CHAR) ;
   9650     ENDPROCEDURE ;
   9651   PROCEDURE FILE2VE FN NC C VEC ;
   9652     VARIABLE LIN 1000 ;
   9653     VARIABLE WORD 2 20 ;
   9654     VARIABLE NW 1 ;
   9655     VARIABLE N 1 ;
   9656     VARIABLE I 1 ;
   9657     OPENF 77 FN 'OLD' ;
   9658     LIN := 'start' ;
   9659     N := 0 ;
   9660     WHILE LIN#'' ;
   9661       READS 77 LIN ;
   9662       IF LIN#'' ;
   9663         IF ((LIN|1)#'#')*(LIN#' ') ;
   9664           WORDS LIN NW WORD ' ' ; %WORDS:  378
   9665           IF NW>0 ;
   9666             IF N=0 ;
   9667               N := MIN(NC,NW) ; %MIN:  207
   9668               LOOP I 1 N ;
   9669                 VEC(I) := RE(LIN|WORD(C(I))) ;
   9670                 ENDLOOP ;
   9671               ELSEIF LO(1) ;
   9672               LOOP I 1 N ;
   9673                 VEC(I) := VEC(I)&RE(LIN|WORD(C(I))) ;
   9674                 ENDLOOP ;
   9675               ENDIF ;
   9676             ENDIF ;
   9677           ENDIF ;
   9678         ENDIF ;
   9679       ENDWHILE ;
   9680     CLOSEF 77 ;
   9681     ENDPROCEDURE ;
   9682   PROCEDURE RFILT RMAX FN FNF ;
   9683     VARIABLE LIN 1000 ;
   9684     VARIABLE WORD 2 20 ;
   9685     VARIABLE NW 1 ;
   9686     VARIABLE X 1 ;
   9687     VARIABLE Y 1 ;
   9688     VARIABLE RMAX2 1 ;
   9689     OPENF 77 FN 'OLD' ;
   9690     OPENF 78 FNF 'UNKNOWN' ;
   9691     WRITE 78 '# The original file: '&FN               '# Filter to sta
                  y inside the radius RMAX = '&S(RMAX) ; %S:  282
   9692     RMAX2 := SQR(RMAX*(1+1D-8)) ;
   9693     LIN := 'start' ;
   9694     WHILE LIN#'' ;
   9695       READS 77 LIN ;
   9696       IF LIN#'' ;
   9697         IF (LIN|1)='#' ;
   9698           WRITE 78 LIN ;
   9699           ELSEIF LIN#' ' ;
   9700           WORDS LIN NW WORD ' ' ; %WORDS:  378
   9701           IF NW>0 ;
   9702             X := RE(LIN|WORD(1)) ;
   9703             Y := RE(LIN|WORD(2)) ;
   9704             IF (SQR(X)+SQR(Y))<RMAX2 ;
   9705               WRITE 78 LIN ;
   9706               ENDIF ;
   9707             ENDIF ;
   9708           ENDIF ;
   9709         ENDIF ;
   9710       ENDWHILE ;
   9711     CLOSEF 77 ;
   9712     CLOSEF 78 ;
   9713     ENDPROCEDURE ;
   9714   PROCEDURE TSC WX WY NX NY DELTA FN ;
   9715     VARIABLE MU NM1 3 ;
   9716     VARIABLE MA 2*NM1 8 ;
   9717     VARIABLE DX 1 ;
   9718     VARIABLE DY 1 ;
   9719     VARIABLE X 1 MAX(5,NV) ; %MAX:  204
   9720     VARIABLE R 1 MAX(5,NV) ; %MAX:  204
   9721     VARIABLE T 1 MAX(5,NV) ; %MAX:  204
   9722     VARIABLE I 1 ;
   9723     VARIABLE J 1 ;
   9724     VARIABLE K 1 ;
   9725     TS MU ; %TS: 3900
   9726     NF 1D-7 MA ; %NF: 3895
   9727     WRITE 6 'TUNESCAN, ORBITAL TUNES FROM TS: ' MU(1) MU(2) ;
   9728     LOOP I 1 NV ;
   9729       X(I) := 0 ;
   9730       R(I) := 0 ;
   9731       T(I) := 0 ;
   9732       ENDLOOP ;
   9733     X(5) := DELTA ;
   9734     R(5) := DELTA ;
   9735     DX := 2*WX/(NX-1) ;
   9736     DY := 2*WY/(NY-1) ;
   9737     OPENF 77 FN 'UNKNOWN' ;
   9738     WRITE 77 ('#   x                        y                        '
                  &                'x-tnue                   y-tune') ;
   9739     LOOP I 1 NX ;
   9740       X(1) := DX*(I-1)-WX ;
   9741       LOOP J 1 NY ;
   9742         X(3) := DY*(J-1)-WY ;
   9743         POLVAL 1 MA TWOND X NV T TWOND ;
   9744         LOOP K 1 ND ;
   9745           R(2*K-1) := SQRT(SQR(T(2*K-1))+SQR(T(2*K))) ;
   9746           ENDLOOP ;
   9747         POLVAL 1 MU ND R NV T ND ;
   9748         WRITE 77 (SF(X(1),'(E25.17)')&SF(X(3),'(E25.17)')&            
                         SF(T(1),'(E25.17)')&SF(T(2),'(E25.17)')) ; %SF:  285 
                  %SF:  285 %SF:  285 %SF:  285
   9749         ENDLOOP ;
   9750       ENDLOOP ;
   9751     CLOSEF 77 ;
   9752     ENDPROCEDURE ;
 --- BIN FILE WRITTEN: cosy
   9753   SAVE 'cosy' ;
